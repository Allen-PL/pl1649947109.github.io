<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>林殊途</title>
  
  <subtitle>我虽为兵卒,可谁又见我后退一步</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pl1649947109.github.io/pl1649947109/"/>
  <updated>2019-12-02T03:32:19.434Z</updated>
  <id>https://pl1649947109.github.io/pl1649947109/</id>
  
  <author>
    <name>pl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网站使用说明</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2030/01/01/main/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2030/01/01/main/</id>
    <published>2029-12-31T17:00:00.000Z</published>
    <updated>2019-12-02T03:32:19.434Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://9017499461.linshutu.top/main.png" alt></p><p>注：部分内容和功能还在持续更新当中……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://9017499461.linshutu.top/main.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;注：部分内容和功能还在持续更新当中……&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>知识大总结</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/12/02/%E5%B0%8F%E7%BB%BF%E6%9C%AC/%E9%9D%A2%E8%AF%95%E5%A4%87%E6%88%98/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/12/02/小绿本/面试备战/</id>
    <published>2019-12-02T12:00:00.000Z</published>
    <updated>2019-12-02T15:47:20.326Z</updated>
    
    <content type="html"><![CDATA[<h3 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h3><h3 id="socket和并发编程"><a href="#socket和并发编程" class="headerlink" title="socket和并发编程"></a>socket和并发编程</h3><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><h3 id="django"><a href="#django" class="headerlink" title="django"></a>django</h3><h3 id="drf"><a href="#drf" class="headerlink" title="drf"></a>drf</h3><a id="more"></a><h4 id="视图（APIView类）"><a href="#视图（APIView类）" class="headerlink" title="视图（APIView类）"></a>视图（APIView类）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        pk = kwargs.get(<span class="string">'pk'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pk:</span><br><span class="line">            queryset = models.Article.objects.all()</span><br><span class="line">            ser = serializer.ArticleSerializer(instance=queryset,many=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span> Response(ser.data)</span><br><span class="line">        article_object = models.Article.objects.filter(id=pk).first()</span><br><span class="line">        ser = serializer.ArticleSerializer(instance=article_object, many=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        ser = serializer.ArticleSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> ser.is_valid():</span><br><span class="line">            ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(ser.data)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.errors)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""全部更新"""</span></span><br><span class="line">        pk = kwargs.get(<span class="string">'pk'</span>)</span><br><span class="line">        article_object = models.Article.objects.filter(id=pk).first()</span><br><span class="line">        ser = serializer.ArticleSerializer(instance=article_object,data=request.data)</span><br><span class="line">        <span class="keyword">if</span> ser.is_valid():</span><br><span class="line">            ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(ser.data)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.errors)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">patch</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""局部"""</span></span><br><span class="line">        pk = kwargs.get(<span class="string">'pk'</span>)</span><br><span class="line">        article_object = models.Article.objects.filter(id=pk).first()</span><br><span class="line">        ser = serializer.ArticleSerializer(instance=article_object, data=request.data,partial=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> ser.is_valid():</span><br><span class="line">            ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(ser.data)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.errors)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        pk = kwargs.get(<span class="string">'pk'</span>)</span><br><span class="line">        models.Article.objects.filter(id=pk).delete()</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'删除成功'</span>)</span><br></pre></td></tr></table></figure><h4 id="序列化与关联表数据的展示"><a href="#序列化与关联表数据的展示" class="headerlink" title="序列化与关联表数据的展示"></a>序列化与关联表数据的展示</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#外键关联的表的数据的展示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式一</span></span><br><span class="line"><span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class"><span class="title">ArticleSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    model = models.Article</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br><span class="line">        <span class="comment">#这个意思就是展示深度，默认展示的深度是0,就是只展示我们的第一张表的信息，它的范围是0-10，最多关联10张表的展示，但是不推荐使用这种方式，因为这种方式展示的不需要的东西太多。</span></span><br><span class="line">        depth = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二</span></span><br><span class="line"><span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class"><span class="title">ArticleSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="comment">#这种方式就是使用这个方法里面的source源，用它就可以跨表查询我们需要的字段，后面的required=True这里是我们在写入数据不需要传值，不然就会报错</span></span><br><span class="line">    category_txt = serializers.CharField(source=<span class="string">'category.name'</span>,required=<span class="literal">False</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    model = models.Article</span><br><span class="line">        fields = [<span class="string">'title'</span>...<span class="string">'category_txt'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式三</span></span><br><span class="line"><span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class"><span class="title">ArticleSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    x1 = serializers.SerializerMethodField()</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    model = models.Article</span><br><span class="line">        fields = [<span class="string">'title'</span>...<span class="string">'category_txt'</span>]</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_x1</span><span class="params">(self,obj)</span>:</span></span><br><span class="line">        <span class="comment">#这种方式和上面的一样，这个obj就是我们针对表数据一条条的查，这里的obj就是Article，obj查到category，它就是一个跨表的category对象</span></span><br><span class="line">        <span class="keyword">return</span> obj.category.name</span><br><span class="line">    </span><br><span class="line"><span class="comment">#本表内choice字段类型数据的展示</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> api <span class="keyword">import</span> models</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="comment">#上面的方式二：这里也是使用之前的方式，但是没有加括号：因为drf为我们做了一步，检测到它是一个方法就加括号执行，没有检测到就找对应的属性</span></span><br><span class="line">    status_txt = serializers.CharField(source=<span class="string">'get_status_display'</span>,required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    x2 = serializers.SerializerMethodField()</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.Article</span><br><span class="line">        fields = [<span class="string">'id'</span>,<span class="string">'title'</span>,<span class="string">'summary'</span>,<span class="string">'content'</span>,<span class="string">'category'</span>,,<span class="string">'status_txt'</span>,,<span class="string">'x2'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#上面的方式三：这个就正常了，直接加括号</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_x2</span><span class="params">(self,obj)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> obj.get_status_display()  <span class="comment">#这个是不是和我们的ModelForm一样，对呀这就是人家开发出来的app的优势之一，使用的统一性和兼容性</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#对于跨表多对多数据的展示</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewArticleSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span> </span><br><span class="line">    tag_info = serializers.SerializerMethodField() </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span> </span><br><span class="line">        model = models.Article </span><br><span class="line">        fields = [<span class="string">'title'</span>,<span class="string">'summary'</span>,<span class="string">'tag_info'</span>] </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_tag_info</span><span class="params">(self,obj)</span>:</span> </span><br><span class="line">            <span class="comment">#对于多对多的跨表数据展示，使用钩子函数的方式，我们的obj.tag.all()取得是一个queryset()对象，在这我们就可以使用列表推导式的方式自己构建字典或者直接使用values方法，返回的就是一个字典。这和我们ORM查询时一样的正向查找使用万能的点，反向查找使用小写的表名（反向查询还可以使用xx_set的方式）</span></span><br><span class="line">            <span class="keyword">return</span> [row <span class="keyword">for</span> row <span class="keyword">in</span> obj.tag.all().values(<span class="string">'id'</span>,<span class="string">'title'</span>)]</span><br></pre></td></tr></table></figure><h4 id="分页（APIView里面）"><a href="#分页（APIView里面）" class="headerlink" title="分页（APIView里面）"></a>分页（APIView里面）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在使用APIView视图里面还需要我们手动去设置分页相关的</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(APIView)</span>:</span></span><br><span class="line">page_object = PageNumberPagination()   <span class="comment">#实例化分页</span></span><br><span class="line">result = page_object.paginate_queryset(queryset, request, self)  <span class="comment">#和数据绑定</span></span><br><span class="line">ser = PageArticleSerializer(instance=result, many=<span class="literal">True</span>)  <span class="comment">#序列化数据</span></span><br><span class="line"><span class="keyword">return</span> Response(&#123;<span class="string">'count'</span>: page_object.page.paginator.count, <span class="string">'result'</span>: ser.data&#125;)</span><br></pre></td></tr></table></figure><h4 id="分页（ListAPIView里面）"><a href="#分页（ListAPIView里面）" class="headerlink" title="分页（ListAPIView里面）"></a>分页（ListAPIView里面）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个是APIView的子类，它里面帮助我们实现了这个分页的功能，它是在GenericAPIView()类里面帮我们实现的，它里面还帮助我们实现了很多的功能，我们后面会说到，它也是ListAPIView继承的类之一。</span><br></pre></td></tr></table></figure><h4 id="筛选和视图（APIView这类）"><a href="#筛选和视图（APIView这类）" class="headerlink" title="筛选和视图（APIView这类）"></a>筛选和视图（APIView这类）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#序列化类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">comment_count = serializers.SerializerMethodField()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">model = models.Article</span><br><span class="line"><span class="comment"># fields = "__all__"</span></span><br><span class="line">exclude = [<span class="string">'author'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_comment_count</span><span class="params">(self, obj)</span>:</span></span><br><span class="line"><span class="comment"># xx_set反向查表</span></span><br><span class="line"><span class="keyword">return</span> obj.comment_set.count()</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageArticleSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="comment">#反向查表</span></span><br><span class="line">content = serializers.CharField(source=<span class="string">"articledetail.content"</span>)</span><br><span class="line">author = serializers.CharField(source=<span class="string">"author.username"</span>)</span><br><span class="line">    <span class="comment">#choice选择</span></span><br><span class="line">category = serializers.CharField(source=<span class="string">"get_category_display"</span>)</span><br><span class="line">    <span class="comment">#定义时间钩子，显示固定的格式</span></span><br><span class="line">date = serializers.SerializerMethodField()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">model = models.Article</span><br><span class="line">fields = <span class="string">"__all__"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_date</span><span class="params">(self, obj)</span>:</span></span><br><span class="line"><span class="keyword">return</span> obj.create_at.strftime(<span class="string">'%Y-%m-%d %H:%M'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#同时保存文章和文章内容两张表内容（这两张表是外键关联的关系，这里就是一对一的关系）</span></span><br><span class="line">ser = seriailzer.ArticleSerializer(data=request.data)</span><br><span class="line">ser_detail = seriailzer.ArticleDetailSerializer(data=request.data)</span><br><span class="line"><span class="comment"># 注意一点，我们post数据的时候一定要把两张表的该填的数据填上</span></span><br><span class="line"><span class="keyword">if</span> ser.is_valid() <span class="keyword">and</span> ser_detail.is_valid():</span><br><span class="line"><span class="comment"># 文章表保存之后返回的是一个对象，它里面包含了ser的所有信息</span></span><br><span class="line">article_object = ser.save(author_id=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># ser_detail.save(article.id=article_object.id)</span></span><br><span class="line"><span class="comment"># 可以使用上面的方式给我们的文章内容表的article字段加内容，也可是使用下面的方式给我们的</span></span><br><span class="line"><span class="comment"># 文章外键加内容，都是可以的</span></span><br><span class="line">ser_detail.save(article=article_object)</span><br><span class="line"><span class="keyword">return</span> Response(<span class="string">"保存成功"</span>)</span><br><span class="line"><span class="keyword">return</span> Response(<span class="string">"失败"</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#筛选也需要自己写</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.filters <span class="keyword">import</span> BaseFilterBackend</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFilterBackend</span><span class="params">(BaseFilterBackend)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">filter_queryset</span><span class="params">(self, request, queryset, view)</span>:</span></span><br><span class="line">        val = request.query_params.get(<span class="string">'cagetory'</span>)</span><br><span class="line">        <span class="keyword">return</span> queryset.filter(category_id=val)  <span class="comment">#返回过滤后的对象</span></span><br></pre></td></tr></table></figure><h4 id="视图（ListAPIView类）"><a href="#视图（ListAPIView类）" class="headerlink" title="视图（ListAPIView类）"></a>视图（ListAPIView类）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">ListAPIView（展示所有）,</span><br><span class="line">CreateAPIView（创建）,</span><br><span class="line">RetrieveAPIView（单条数据展示）,</span><br><span class="line">UpdateAPIView（更新）,</span><br><span class="line">DestroyAPIView（删除）</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagSer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.Tag</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagView</span><span class="params">(ListAPIView,CreateAPIView)</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">展示所有的数据和添加数据,这里面定义的方法都是继承的CreateAPIView类里面实现的，具体的我们后面说</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">    queryset = models.Tag.objects.all()</span><br><span class="line">    serializer_class = TagSer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        重写父类的方法，定制展示和提交数据时的serializer</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.request.method == <span class="string">'GET'</span>:</span><br><span class="line">            <span class="keyword">return</span> TagSer</span><br><span class="line">        <span class="keyword">elif</span> self.request.method == <span class="string">'POST'</span>:</span><br><span class="line">            <span class="keyword">return</span> OtherTagSer</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_create</span><span class="params">(self,serializer)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        重写父类里面的方式，自定制保存的数据</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        serializer.save(author=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagDetailView</span><span class="params">(RetrieveAPIView,UpdateAPIView,DestroyAPIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    展示单条信息，更新个删除数据：为什么和上面的分开？因为单条的展示和多条数据的展示是有冲突的</span></span><br><span class="line"><span class="string">    因为，他们里面都定义了get方法，所以我们在使用的时候把他们分开并且可定制不同的serializer</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = models.Tag.objects.all()</span><br><span class="line">    serializer_class = TagSer</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#GenericAPIView里面提供的属性和方法</span></span><br><span class="line">属性：</span><br><span class="line">查询和序列化</span><br><span class="line">-queryset 列表视图的查询集</span><br><span class="line">-serializer_class 视图使用的序列化器</span><br><span class="line">分页和过滤</span><br><span class="line">-pagination_class 分页控制类</span><br><span class="line">-filter_backends 过滤控制后端</span><br><span class="line">详情页视图使用（单条数据的处理）</span><br><span class="line">-lookup_field 查询单一数据库对象时使用的条件字段，默认为’pk‘</span><br><span class="line">    </span><br><span class="line">方法:</span><br><span class="line">    -get_queryset(self)  缓存queryset</span><br><span class="line">    -get_object(self)  返回视图显示的对象</span><br><span class="line">    -get_serializer_class(self)返回序列化类</span><br><span class="line">    -get_serializer(self, args, *kwargs)用于验证和序列化输入输出</span><br><span class="line">    -filter_queryset(self)  对给定的queryset进行过滤筛选（在这种模式下也需要自定制过滤类，重写这个方法）</span><br><span class="line">    -还有一些和分页相关的</span><br></pre></td></tr></table></figure><h4 id="drf的封装、版本、认证、权限"><a href="#drf的封装、版本、认证、权限" class="headerlink" title="drf的封装、版本、认证、权限"></a>drf的封装、版本、认证、权限</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">View</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dipatch</span><span class="params">(self)</span>:</span></span><br><span class="line">print(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APIView</span><span class="params">(View)</span>:</span></span><br><span class="line"></span><br><span class="line">    version_class = settings.xxx </span><br><span class="line">parser_class = settings.sxx</span><br><span class="line">permision_classes = []</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dipatch</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.initial()</span><br><span class="line">method = getattr(self,<span class="string">"get"</span>)</span><br><span class="line"><span class="keyword">return</span> method()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initial</span><span class="params">(self)</span>:</span></span><br><span class="line">self.version_class()</span><br><span class="line">self.parser_class()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> self.permision_classes:</span><br><span class="line"> item()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericAPIView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">queryset = <span class="literal">None</span></span><br><span class="line">serilizer_class = <span class="literal">None</span> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> self.queryset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_serilizer</span><span class="params">(self,*arg,**kwargs)</span>:</span></span><br><span class="line">cls = self.get_serilizer_class()</span><br><span class="line"><span class="keyword">return</span> cls(*arg,**kwargs)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_serilizer_class</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> self.serilizer_class</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListModelMixin</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(self)</span>:</span></span><br><span class="line">queryset = self.get_queryset()</span><br><span class="line">ser = self.get_serilizer(queryset,many=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">return</span> Reponse(ser.data)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListAPIView</span><span class="params">(ListModelMixin,GenericAPIView)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> self.list(...)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagView</span><span class="params">(ListAPIView)</span>:</span>  </span><br><span class="line">queryset = models.User.object.all()</span><br><span class="line">serilizer_class = TagSerilizer</span><br><span class="line"></span><br><span class="line">obj = TagView()</span><br><span class="line">x = obj.dispatch()</span><br></pre></td></tr></table></figure><p>走一个完整的源码流程（就是在执行视图之前的源码分析）：</p><p>路由进来走我们的as_view()类，它去调用执行dispatch()方法 ，这个方法在APIView里面，首先它执行initialize_request()方法对request进行封装，其中封装了一个get_authentications()方法，这个方法去遍历我们定义的认证相关的类并实例化封装到一个列表里面封装进了新的request里面，接着就去执行initial()方法，在这个方法里面会依次执行版本、认证、权限、和频率限制相关的方法；</p><p>对于版本会执行determine()方法，它会去找我们定义的版本相关的内容，返回一个元组，并封装进我们新的requet，</p><p>对于认证会执行perform_authentication()方法，在这个方法会执行request.user，它里面就会去调用执行我们之前封装的认证相关的类，它会返回一个元组，这个元组包括三种情况，返回一个包含用户信息和token的元组表示认证成功，返回一个空元组接着接着继续进行下一个认证，当抛出异常，表示认证失败。</p><p>对于权限，会执行check_permissions()方法，在这个方法里面首先会去找我们自定义的实例化权限类，把他们实例化封装到一个列表里面，接着 我们会循环这个列表执行实例化的权限类，如果返回True就表示我们有权限访问，否则就会抛出异常</p><p>对于频率限制，是可以进行匿名用户和登陆用户的限制的；在DRF的内部会使用一个字典来储存频率限制相关的内容，字典的键是匿名访问者的IP或者登陆用户的相关信息，而字典的值是一个列表，它里面存放的是访问者每次访问的时间。它会把最新的访问时间插入到列表的第0位。比如我们设置的访问频率是5/min,当请求到来，我们首先判断访问者的IP或者用户信息是否在这个大字典里面，如果不再就新建一个键值对储存到这个大字典里面；如果在，我们就找到相应的键的值，我们取列表的最末尾的时间和当前请求的时间进行比较，如果时间差大于60秒，表示这个时间过期了，就把它pop()掉，接着比较知道时间差在1min以内，然后我们判断列表的长度，如果它的长度在我们设置的频率限制范围内就表示可以访问，否者就不能访问。</p><h4 id="restful规范"><a href="#restful规范" class="headerlink" title="restful规范"></a>restful规范</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">restful是业界接口开发中的一套规范，它为我们的API设计提供了一组规则和约束条件，我们在开发API的时候应该遵守这些规范。</span><br><span class="line">1.https代替http，保证数据传输时的安全</span><br><span class="line">2.在url中体现api标识，我们一看到这个api就知道它是一个api（一般放在域名后面紧跟着域名，可以放在其他的位置，但是可能会出现跨域的问题）</span><br><span class="line">3.在接口中要体现版本信息，（在以后的版本迭代中管理起来更加方便）</span><br><span class="line">4.restful也称作面向资源编程，视网络上的一切都是资源，对资源可以进行操作，所以一般资源都是用名词命名</span><br><span class="line">5.如果要 加一些筛选条件，可可以添加在url中</span><br><span class="line">6.我们可以更具method的不同做不同的操作（get、post、put、patch、delete）</span><br><span class="line">7.返回给用户状态码（2xx，4xx，还可以进行自定制）</span><br></pre></td></tr></table></figure><h4 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">跨域是由于浏览器的同源策略造成的，在前后端分离项目中，前端通过ajax请求数据，如果在不同的协议、域名或者端口下发送请求都会出现跨域，浏览器就会block掉这个返回的数据。</span><br><span class="line"></span><br><span class="line">解决方案：CORS（跨域请求伪造）</span><br><span class="line">针对简单请求和复杂请求</span><br><span class="line">对于简单请求，浏览器只需要发送一次请求，前端浏览器需要什么验证信息，我们直接返回就可以</span><br><span class="line">对于复杂请求，浏览器先发送一次OPTIONS请求进行预检，预检的时候前端需要什么验证信息，我们后端就给它返回什么信息。预检通过了才能进行真正数据请求。</span><br></pre></td></tr></table></figure><h4 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jwt全称JSON Web Token，它是一种认证技术，常用在前后端分离项目中，用于和用户登陆相关的操作。在以前我们实现用户的认证都是基于session来实现的，那种方式需要在服务端保存用户的信息。</span><br><span class="line">用户登陆成功了之后，会给前端返回一段token字符串，它是由.分割的三部分的字符串组成，第一段是token的类型和加密的算法通过urlbase64进行加密产生；第二段是用户相关信息和过期时间通过urlbase64经过加密产生的；第三段信息是前两段密文通过拼接后使用hash256加密并加盐之后再通过urlbase64加密产生。</span><br><span class="line">这样，前端如果验证成功，我们就把这段这串字符串返回给它，保存再用户浏览器的cookie里面，下次再发来请求时，我们通过对这段这段字符串进行解密进行过期校验和信息校验就能成功判断该用户是否有权限对我们的资源进行访问了</span><br><span class="line">(解密：对前端发来的token进行切分成3段，前两端拼接hash256加密得到新的字符串和token的第三段进行比较，如果一致就说明数据没有被篡改，然后我们取出过期时间进行判断，如果还在活期之内就说明验证通过)</span><br><span class="line">它的优点：</span><br><span class="line">-token只保存再前端的浏览器</span><br><span class="line">-内部集成超时时间，后端可以根据时间进行校验是否超时</span><br><span class="line">-内部使用hash256进行加密，所以用户不能需改token值，只要修改了认证就会失败</span><br></pre></td></tr></table></figure><h4 id="视图的三种方式"><a href="#视图的三种方式" class="headerlink" title="视图的三种方式"></a>视图的三种方式</h4><p>APIView方式：这种方式需要我们自定制的内容比较多，它只为我们提供了版本、认证、权限和频率限制相关的功能，我们想要其他的一些功能需要我们自己写，而且，对于各种请求我峨嵋你都需要自己写</p><p>ListAPIView这一类的：他们继承了GenericAPIView和ListModelMixin这一类，它们里面就为我们封装了很多的功能，请求方法这一类的就封装在ListModelMixin里面，其他的分页过滤，序列化相关的都封装在GenericAPIView类里面，而且GenericAPIView还继承了APIView，所以，ListAPIView就自动继承了APIView的所有功能，所以说它为我们封装的这么多的功能就极大的简化了我们的工作流程</p><p>ListModelMixin这一类的：对于他们，url这里就可以看出来不一样，他们的as_view()里面会有一个字典的参数，键是请求方法，值是我们需要做的操作（list：展示所有的数据，retrieve展示单条数据，create：新建数据…….）,这样写和ListAPIView这一类有什么区别呢？针对ListAPIView，他们的视图对所有数据和单条数据的操作是分开的，因为对单条数据的操作需要传递参数。而这种方式就把单条数据的操作和多条数据的操作和起来了，就是由于它的url的的特殊造成的，对于单条数据的操作我们直接写一个方法就可以解决。我们写的类继承的有ListModelMixin以及一个GenericViewSet类，而这个GenericViewSet继承了我们的GenericAPIView。</p><h3 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h3><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><h3 id="计算机操作系统"><a href="#计算机操作系统" class="headerlink" title="计算机操作系统"></a>计算机操作系统</h3><h4 id="三次握手和四次挥手的流程"><a href="#三次握手和四次挥手的流程" class="headerlink" title="三次握手和四次挥手的流程"></a>三次握手和四次挥手的流程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">三次握手的流程：</span><br><span class="line">建立连接时，客户端发送SYN包（syn=x）到服务端，并进入SYN_SENT状态，等待服务器确认</span><br><span class="line">服务端收到SYN包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（syn=y），并进入SYN_RECV状态</span><br><span class="line">客户端接受到服务端发来的AYN+ACK包，轩昂服务器发送确认包ACK（ack=y+1），这个包发送完毕，客户端和服务端表示建立握手完成。</span><br><span class="line"></span><br><span class="line">四次挥手的流程：</span><br><span class="line">客户端发送释放报文FIN，并携带序列号seq=u</span><br><span class="line">服务端接受到客户端的请求释放报文，并向客户端发送确认报文ACK=1和ack=u+1，并携带自己的序列号seq=v</span><br><span class="line">等到服务端发送完最后的数据，它就向客户端发送FIN请求释放报文，ack=u+1以及现在的序列号seq=w</span><br><span class="line">客户端接受到服务端发来的释放请求后，发出确认ACK=1，ack=w+1，此时客户端进入TIME_WAIT状态，等2MSL之后客户端还没有接受到FIN信号，表示挥手完成TCP断开连接</span><br><span class="line"></span><br><span class="line">客户端TCP状态迁移：        </span><br><span class="line">CLOSED-&gt;SYN_SENT-&gt;ESTABLISHED-&gt;FIN_WAIT_1-&gt;FIN_WAIT_2-&gt;TIME_WAIT-&gt;CLOSED</span><br><span class="line">服务器TCP状态迁移：      </span><br><span class="line">CLOSED-&gt;LISTEN-&gt;SYN收到-&gt;ESTABLISHED-&gt;CLOSE_WAIT-&gt;LAST_ACK-&gt;CLOSED</span><br></pre></td></tr></table></figure><h4 id="为什么连接的时候是三次握手？关闭是四次挥手？"><a href="#为什么连接的时候是三次握手？关闭是四次挥手？" class="headerlink" title="为什么连接的时候是三次握手？关闭是四次挥手？"></a>为什么连接的时候是三次握手？关闭是四次挥手？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在建立连接的时候，服务端收到客户端的SYN连接请求报文后，可以直接发送SYN+ACK报文来应答，ACK是用来应答的，SYN是用来同步的。</span><br><span class="line"></span><br><span class="line">在断开连接的时候，服务端收到FIN报文，并不会立即就关闭SOCKET连接，所以就先回复确认报文ACK，接着等服务端发送完所有的报文之后再发送FIN报文，同步断开连接。</span><br></pre></td></tr></table></figure><h4 id="为什么TIME-WAIT状态需要经过2MSL才能返回CLOSE状态？"><a href="#为什么TIME-WAIT状态需要经过2MSL才能返回CLOSE状态？" class="headerlink" title="为什么TIME_WAIT状态需要经过2MSL才能返回CLOSE状态？"></a>为什么TIME_WAIT状态需要经过2MSL才能返回CLOSE状态？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">首先，这个MSL是一个单位，表示一个数据包在网络中存在的最长时间，那么2MSL就表示一个数据包在网络中一个来回存在的最长的时间 。</span><br><span class="line">我们最后的客户端发乎ACK，有可能丢失，但是经过2MSL客户端还没有接受到FIN，表示ACK被服务端成功接收，TCP连接关闭。</span><br><span class="line">同时也是为了清除在上次连接在网络中可能迷路的包。下次连接的时候就不会出现出现连接上次包的情况的发生</span><br></pre></td></tr></table></figure><h4 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.TCP是面向连接（发送消息直线需要先建立连接），UDP是无连接的（发送消息之前不需要建立连接）</span><br><span class="line">2.TCP是面向字节流的（就是一串无结构的字节流），UDP是面向报文的</span><br><span class="line">3.TCP提供可靠的服务，UDP不保证可靠的服务，但是它的速度快</span><br><span class="line">4.TCP只能点到点传输，UDP可以进行一对一、一对多、多对多的通信</span><br><span class="line">5.TCP的协议头开销20个字节；UDP的协议头只开销8个字节</span><br></pre></td></tr></table></figure><h4 id="粘包的了解"><a href="#粘包的了解" class="headerlink" title="粘包的了解"></a>粘包的了解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">粘包是由于接收数据方不知道发送方发送数据的界限，不知道一次性取多少字节的数据量。</span><br><span class="line"></span><br><span class="line">粘包发生有两种情况，对于发送方，短时间内连续多次send()数据，造成多个数据连在一起发送出去造成粘包；对于接收方，接收缓冲区的大小小于发送过来的数据，只能分两次去取数据，但是，剩下的数据就会和下次发来的数据粘在一起发生粘包现象</span><br><span class="line"></span><br><span class="line">UDP永远不是发生粘包现象：说白了还是因为UDP传输是基于报文传输的而不是基于流传输的，它对数据进行了简单的封装，这种面向消息的通信是有消息保护边界的</span><br><span class="line"></span><br><span class="line">解决办法:我们可以先发送报头长度（使用struck编辑4字节的内容）；再编辑报头内容然后发送；最后发送真正的内容</span><br></pre></td></tr></table></figure><h4 id="虚拟内存和物理内存的区别"><a href="#虚拟内存和物理内存的区别" class="headerlink" title="虚拟内存和物理内存的区别"></a>虚拟内存和物理内存的区别</h4><p><a href="https://blog.csdn.net/lvyibin890/article/details/82217193" target="_blank" rel="noopener">https://blog.csdn.net/lvyibin890/article/details/82217193</a></p><h4 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">进程：它是系统进行资源分配和调度的一个单位，是最小的资源管理单位</span><br><span class="line"></span><br><span class="line">线程：线程是进程的一个实体，是CPU调度的基本单位，是最小的执行单元。所有的线程的创建、撤销、切换的开销都远小于进程，一个进程可以拥有多个线程。</span><br></pre></td></tr></table></figure><h4 id="进程的三态模型"><a href="#进程的三态模型" class="headerlink" title="进程的三态模型"></a>进程的三态模型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">进程的生命周期可分为三种进程状态：</span><br><span class="line">运行态：占用CPU的时间，</span><br><span class="line">就绪态：具备运行的条件，等待系统分配处理器以便运行，</span><br><span class="line">阻塞态：不具备运行条件，正在等待某个事件的完成。</span><br><span class="line">运行遇到阻塞(运行态)--&gt;阻塞态  </span><br><span class="line">事件执行完成(阻塞态)--&gt;就绪态</span><br><span class="line">进程被选中(就绪态)--&gt;运行态</span><br></pre></td></tr></table></figure><h4 id="进程间的通信方式有哪些"><a href="#进程间的通信方式有哪些" class="headerlink" title="进程间的通信方式有哪些"></a>进程间的通信方式有哪些</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#队列</span></span><br><span class="line">用于两个进程之间的通讯，首先在一个进程中中创建一个消息队列，然后再往消息队列中写数据，另一个进程中这个队列中取数据</span><br><span class="line"><span class="comment">#管道</span></span><br><span class="line">管道是一种半双工的通信方式，数据只能单向流动，并且只能在父子进程之间使用。它是由内核管理的一个缓冲区，速度慢，容量有限</span><br><span class="line"><span class="comment">#信号量</span></span><br><span class="line">信号量是一个计数器，可以用来控制多个进程对共享资源的访问。</span><br><span class="line">它常作为一种锁机制，防止某进程正在访问共享资源时，其他 进程也访问该资源。因此，它主要作为进程间以及同一进程内不同线程之间的同步手段</span><br><span class="line"><span class="comment">#socket套接字</span></span><br><span class="line">套接字也是一种进程间的通信机制，与其他通信机制不同的是，它可用于不同机器间的进程通信</span><br></pre></td></tr></table></figure><h3 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h3><h4 id="斐波那契数列（递归）"><a href="#斐波那契数列（递归）" class="headerlink" title="斐波那契数列（递归）"></a>斐波那契数列（递归）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(2^n):最慢的,但是最经典的</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibnacci</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> fibnacci(n<span class="number">-1</span>) + fibnacci(n<span class="number">-2</span>)</span><br><span class="line"><span class="comment">#注意，这种是利用斐波那契数列的公式实现的，它的时间复杂度就近似等于2^n，这种方式看似简单，但是有一个非常大的坑，当我们计算第100个斐波那契数的时候，可能到我们死也计算不出来（计算机大概每秒计算10^9次方左右，而100的斐波那契大的计算次数是1267650600228229401496703205376），所以它并不实用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#下面的几种方式的时间复杂度都是O(n)</span></span><br><span class="line"><span class="comment">#改良版递归实现斐波那契数列</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    li = [<span class="number">1</span>,<span class="number">1</span>] + [<span class="number">-1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n<span class="number">-2</span>)]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fibnacci</span><span class="params">(n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> li[n<span class="number">-1</span>] == <span class="number">-1</span>:</span><br><span class="line">            li[n<span class="number">-1</span>] = fibnacci(n<span class="number">-1</span>) + fibnacci(n<span class="number">-2</span>)</span><br><span class="line">        <span class="keyword">return</span> li[n<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> fibnacci(n)</span><br><span class="line"><span class="keyword">print</span> (fib(<span class="number">5</span>)) &gt;&gt;&gt;<span class="number">5</span></span><br><span class="line"><span class="comment">#这种方式的实现是开辟了一个新的列表空间来间接储存新产生的数据，所以说它的时间复杂度是O(n)，算是以时间换取空间的案例吧</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用python的生成器的方式实现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibnacci</span><span class="params">(n)</span>:</span></span><br><span class="line">    a,b = <span class="number">1</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a,b = b,a+b</span><br><span class="line"><span class="keyword">print</span> ([i <span class="keyword">for</span> i <span class="keyword">in</span> fibnacci(<span class="number">5</span>)]) &gt;&gt;&gt;[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment">#注意，这种方式不能打印b，只能打印a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用python的append的方式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibnacci</span><span class="params">(n)</span>:</span></span><br><span class="line">    li = [<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n):</span><br><span class="line">        li.append(li[<span class="number">-1</span>]+li[<span class="number">-2</span>])</span><br><span class="line">    <span class="keyword">return</span> li</span><br><span class="line"><span class="keyword">print</span> (fibnacci(<span class="number">5</span>)) &gt;&gt;&gt;[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment">#这种方式也额外开辟了一快空间，但是借助python的列表的方法来实现是非常简单的</span></span><br></pre></td></tr></table></figure><h4 id="不使用python语法实现a-b值得交换"><a href="#不使用python语法实现a-b值得交换" class="headerlink" title="不使用python语法实现a,b值得交换"></a>不使用python语法实现a,b值得交换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">a = a + b</span><br><span class="line">a = a - b</span><br><span class="line">b = a - b</span><br><span class="line"><span class="keyword">print</span> (a,b) &gt;&gt;&gt;<span class="number">2</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(li,num)</span>:</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    hight = len(l1) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> low &lt; hight:</span><br><span class="line">        mid = (low+hight) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> li[mid] == num:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> li[mid] &lt; num:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            hight = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="string">f"<span class="subst">&#123;num&#125;</span> not in this list"</span>)</span><br></pre></td></tr></table></figure><h4 id="冒泡查询-O-n-2"><a href="#冒泡查询-O-n-2" class="headerlink" title="冒泡查询(O(n^2))"></a>冒泡查询(O(n^2))</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(li)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(li)<span class="number">-1</span>):  <span class="comment">#n-1趟，就是走的多少趟</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(li)<span class="number">-1</span>-i): <span class="comment">#-i的原因是后面有序区的数据就不需要比较了</span></span><br><span class="line">            <span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>]:</span><br><span class="line">                li[j],li[j+<span class="number">1</span>] = li[j+<span class="number">1</span>],li[j]</span><br><span class="line">    <span class="keyword">return</span> li</span><br><span class="line"><span class="comment">#它的原理就是每一趟把无序区的最大的数字推到有序区，这样遍历n-1趟就可以把顺序排出来。比较相邻的两个数字，如果前面的数字比后面的数字大就交换数字，也就是把无序区的数字往有序区推的过程。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#优化一点点，就是所谓的无序区是有序的，那么就不需要再进行后面的比较了，这里使用了标记的方式实现的</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(li)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(li)<span class="number">-1</span>):</span><br><span class="line">swapped = <span class="literal">False</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(li)-i<span class="number">-1</span>):</span><br><span class="line"><span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>]:</span><br><span class="line">li[j], li[j+<span class="number">1</span>] = li[j+<span class="number">1</span>], li[j]</span><br><span class="line">swapped = <span class="literal">True</span>  <span class="comment">#如果有交换的话，就不退出，继续遍历交换</span></span><br><span class="line"><span class="keyword">if</span> swapped == <span class="literal">False</span>:</span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure><h4 id="选择排序-O-n-2"><a href="#选择排序-O-n-2" class="headerlink" title="选择排序(O(n^2))"></a>选择排序(O(n^2))</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#选择排序的思想就是有序区在前面，从后面的数据遍历，找到后面无序区最小的插到最前面，变成有序区最大的值。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selest_sort</span><span class="params">(li)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(li)<span class="number">-1</span>): <span class="comment">#遍历n-1趟</span></span><br><span class="line">mos_id = i <span class="comment">#这个就是紧邻有序区的数字，待交换</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(mos_id+<span class="number">1</span>,len(li)): <span class="comment">#遍历找到最小值</span></span><br><span class="line"><span class="keyword">if</span> li[j] &lt; li[mos_id]:</span><br><span class="line">mos_id = j  <span class="comment">#无序区有最小值交换</span></span><br><span class="line">li[mos_id],li[i] = li[i],li[mos_id]</span><br><span class="line"><span class="keyword">return</span> li</span><br></pre></td></tr></table></figure><h4 id="插入排序-O-n-2"><a href="#插入排序-O-n-2" class="headerlink" title="插入排序(O(n^2))"></a>插入排序(O(n^2))</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这个的原理也是以左边的区域为有序区，遍历右面无序区的数据，把他们取到之后和有序区的数字进行比较，然后在合适的位置插入进去</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(li)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(li)):  <span class="comment"># i表示要插入的数的下标</span></span><br><span class="line">tmp = li[i]  <span class="comment"># 把取得的数存起来</span></span><br><span class="line">j = i - <span class="number">1</span>  <span class="comment"># j就是有序取要比较的数的下标</span></span><br><span class="line"><span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> li[j] &gt; tmp:  <span class="comment"># 决定什么时候停止循环，把tmp插入到对应的位置上。两个终止条件：1，j的位置的值比tmp小，2，j=-1已经移动到最前面的</span></span><br><span class="line">li[j + <span class="number">1</span>] = li[j]</span><br><span class="line">j -= <span class="number">1</span></span><br><span class="line">li[j + <span class="number">1</span>] = tmp</span><br><span class="line"><span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line">li = [<span class="number">1</span>, <span class="number">2132</span>, <span class="number">43</span>, <span class="number">31</span>, <span class="number">534</span>, <span class="number">31</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">543</span>, <span class="number">132</span>, <span class="number">15</span>, <span class="number">34</span>, <span class="number">31</span>, <span class="number">3</span>, <span class="number">165</span>, <span class="number">34</span>, <span class="number">31</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">132</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">print</span> (insert_sort(li))</span><br></pre></td></tr></table></figure><h4 id="快速排序-nlogn"><a href="#快速排序-nlogn" class="headerlink" title="快速排序(nlogn)"></a>快速排序(nlogn)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;python基础&quot;&gt;&lt;a href=&quot;#python基础&quot; class=&quot;headerlink&quot; title=&quot;python基础&quot;&gt;&lt;/a&gt;python基础&lt;/h3&gt;&lt;h3 id=&quot;socket和并发编程&quot;&gt;&lt;a href=&quot;#socket和并发编程&quot; class=&quot;headerlink&quot; title=&quot;socket和并发编程&quot;&gt;&lt;/a&gt;socket和并发编程&lt;/h3&gt;&lt;h3 id=&quot;数据库&quot;&gt;&lt;a href=&quot;#数据库&quot; class=&quot;headerlink&quot; title=&quot;数据库&quot;&gt;&lt;/a&gt;数据库&lt;/h3&gt;&lt;h3 id=&quot;前端&quot;&gt;&lt;a href=&quot;#前端&quot; class=&quot;headerlink&quot; title=&quot;前端&quot;&gt;&lt;/a&gt;前端&lt;/h3&gt;&lt;h3 id=&quot;django&quot;&gt;&lt;a href=&quot;#django&quot; class=&quot;headerlink&quot; title=&quot;django&quot;&gt;&lt;/a&gt;django&lt;/h3&gt;&lt;h3 id=&quot;drf&quot;&gt;&lt;a href=&quot;#drf&quot; class=&quot;headerlink&quot; title=&quot;drf&quot;&gt;&lt;/a&gt;drf&lt;/h3&gt;
    
    </summary>
    
    
      <category term="小绿本" scheme="https://pl1649947109.github.io/pl1649947109/tags/%E5%B0%8F%E7%BB%BF%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>第五讲——flask之信号大全、蓝图拆分目录、总结</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/24/%E4%B9%A6/flask/%E7%AC%AC%E4%BA%94%E8%AE%B2%E2%80%94%E2%80%94flask%E4%B9%8B%E4%BF%A1%E5%8F%B7%E5%A4%A7%E5%85%A8%E3%80%81%E8%93%9D%E5%9B%BE%E6%8B%86%E5%88%86%E7%9B%AE%E5%BD%95%E3%80%81%E6%80%BB%E7%BB%93/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/24/书/flask/第五讲——flask之信号大全、蓝图拆分目录、总结/</id>
    <published>2019-11-24T12:00:00.000Z</published>
    <updated>2019-11-26T17:04:52.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内容回顾"><a href="#内容回顾" class="headerlink" title="内容回顾"></a>内容回顾</h2><p>1.flask和django的区别？</p><p>2.flask请求的声明周期？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wsgi</span><br><span class="line">before</span><br><span class="line">视图</span><br><span class="line">after</span><br></pre></td></tr></table></figure><p>3.wsgi的本质</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket服务端</span><br></pre></td></tr></table></figure><p>4.flask的蓝图的作用？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">默认flask通过一个脚本就可以实现，但由于项目业务可能会比较多，为了方便业务的拆分，我们会创建多个文件（蓝图）进行管理。</span><br></pre></td></tr></table></figure><p>5.flask的蓝图和django的app有什么区别？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">相同点：都是用于做业务拆分 / 需要注册才能使用 / 都可以在自己内部定义模板和静态文件。</span><br><span class="line">不同点：注册位置不同 、flask before/after_request和django中间件他的应用粒度更细 、 django的app内置了很多，flask蓝图没有内置。</span><br></pre></td></tr></table></figure><a id="more"></a><p>6.在app=Flask()对象中可以传入 静态文件、模板的配置。 </p><p>7.通过app.config读取配置文件（localsettings.py）。</p><p>8.特殊装饰器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">before_first_reqeust</span><br><span class="line">before_request</span><br><span class="line">after_request</span><br><span class="line">route</span><br><span class="line">template_global</span><br><span class="line">template_filter</span><br></pre></td></tr></table></figure><p>9.为flask的视图设置装饰器时，需要</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 位置</span><br><span class="line">- functools.wraps</span><br><span class="line">- functools.partial</span><br></pre></td></tr></table></figure><p>10.Flask可以定义FBV和CBV</p><p>11.flask中内置了session，session的数据以加密的形式放入cookie中。</p><p>12.flask自己没有模板，而是用的第三方的jinja2模板。 </p><p>13.threading.local</p><p>14.自定义threading.local，内部维护了一个字典，以 线程/协程 ID为键。</p><p>15.栈的特点：后进先出。 </p><p>16.LocalStack的类，在Local中维护了一个栈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">111:&#123;stack:[ctx, ]&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>17.单利模式（基于文件导入实现）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在flask程序中，只会创建两个LocalStack对象。</span><br><span class="line"></span><br><span class="line">_request_ctx_stack = LocalStack()</span><br><span class="line">_app_ctx_stack = LocalStack()</span><br></pre></td></tr></table></figure><p>18.flask的请求流程</p><ul><li>请求准备阶段</li><li>请求到来<ul><li>创建两个ctx=RequestContext对象； app_ctx = AppContext对象，将对象放入local中。 </li><li>before/视图/after</li><li>销毁ctx / app_ctx</li></ul></li></ul><p>19.g是什么？</p><p>20.数据库链接池：DBUtils</p><p>21.面向对象的with上下文：enter/exit</p><h2 id="内容补充"><a href="#内容补充" class="headerlink" title="内容补充"></a>内容补充</h2><p>1.从看flask源码你学到了什么？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- 新的编程思路。</span><br><span class="line">- django、drf数据是通过传递。</span><br><span class="line">- flask，存储在某个地方，以后用的时候去拿。 </span><br><span class="line">哪种好？两个不同的实现机制，没有好坏之分。</span><br><span class="line">django好，疑问如果是一个初学者对于django的机制比较好理解，flask学习代价比较大（了解上下文管理职机制之后才能更好的理解）。</span><br><span class="line">    </span><br><span class="line">- 技术点</span><br><span class="line">- 单利模式的应用场景</span><br><span class="line">- LocalProxy</span><br><span class="line">- 装饰器不注意functools</span><br></pre></td></tr></table></figure><p>2.在flask的Local对象中为什么要通过线程ID进行区分？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">因为在flask中可以开启多线程的模式，当开启多线程模式进行处理用户请求时，需要将线程之间的数据进行隔离，以防止数据混乱。</span><br></pre></td></tr></table></figure><p>3.在flask的Local对象中为什么要维持成一个栈？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">111:&#123;stack:[ctx, ]&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在web runtime 时，栈永远只有1个对象。</span><br><span class="line">    &#123;</span><br><span class="line">        111:&#123;stack:[ctx, ]&#125;</span><br><span class="line">        112:&#123;stack:[ctx, ]&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        111:&#123;stack:[app_ctx, ]&#125;</span><br><span class="line">        112:&#123;stack:[app_ctx, ]&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">在写离线脚本时，才会用在栈中放多个对象。 （创建一个py文件本地运行）</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> current_app,g</span><br><span class="line"><span class="keyword">from</span> pro_excel <span class="keyword">import</span> create_app</span><br><span class="line"></span><br><span class="line">app1 = create_app()</span><br><span class="line"><span class="keyword">with</span> app1.app_context():  <span class="comment"># AppContext对象(app,g) -&gt; local对象</span></span><br><span class="line">    print(current_app.config) <span class="comment"># -1 top app1 </span></span><br><span class="line">    app2 = create_app()</span><br><span class="line">    <span class="keyword">with</span> app2.app_context():  <span class="comment"># AppContext对象(app,g) -&gt; local对象</span></span><br><span class="line">        print(current_app.config) <span class="comment"># top -1 app2 </span></span><br><span class="line">    print(current_app.config) <span class="comment"># top -1 app1</span></span><br><span class="line"></span><br><span class="line">写离线脚本且多个上下文嵌套时，才会在栈中添加多个对象。</span><br></pre></td></tr></table></figure><p>注意：在flask中很少出现嵌套的脚本。</p><h2 id="今日概要"><a href="#今日概要" class="headerlink" title="今日概要"></a>今日概要</h2><ul><li>信号</li><li>flask-script组件</li><li>蓝图</li></ul><h2 id="今日详细"><a href="#今日详细" class="headerlink" title="今日详细"></a>今日详细</h2><h3 id="1-信号（源码）"><a href="#1-信号（源码）" class="headerlink" title="1. 信号（源码）"></a>1. 信号（源码）</h3><p>信号，是在flask框架中为我们预留的钩子，让我们可以进行一些自定义操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install blinker</span><br></pre></td></tr></table></figure><p>根据flask项目的请求流程来进行设置扩展点</p><ul><li><p>中间件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,old_app)</span>:</span></span><br><span class="line">        self.wsgi_app = old_app.wsgi_app</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'123'</span>)</span><br><span class="line">        result = self.wsgi_app(*args, **kwargs)</span><br><span class="line">        print(<span class="string">'456'</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">app.wsgi_app = MyMiddleware(app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li><li><p>当app_ctx被push到local中栈之后，会触发appcontext_pushed信号，之前注册在这个信号中的方法，就会被执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> signals</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@signals.appcontext_pushed.connect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(arg)</span>:</span></span><br><span class="line">    print(<span class="string">'appcontext_pushed信号f1被触发'</span>,arg)</span><br><span class="line"></span><br><span class="line"><span class="meta">@signals.appcontext_pushed.connect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(arg)</span>:</span></span><br><span class="line">    print(<span class="string">'appcontext_pushed信号f2被触发'</span>,arg)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br><span class="line">    <span class="comment"># app.__call__</span></span><br></pre></td></tr></table></figure></li><li><p>执行before_first_request扩展</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'before_first_requestf2被触发'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li><li><p>request_started信号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> signals</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@signals.request_started.connect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">(arg)</span>:</span></span><br><span class="line">    print(<span class="string">'request_started信号被触发'</span>,arg)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li><li><p>url_value_processor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,g</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> signals</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.url_value_preprocessor</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f5</span><span class="params">(endpoint,args)</span>:</span></span><br><span class="line">    print(<span class="string">'f5'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'index'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'order'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li><li><p>before_reuqest</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,g</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> signals</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f6</span><span class="params">()</span>:</span></span><br><span class="line">    g.xx = <span class="number">123</span></span><br><span class="line">    print(<span class="string">'f6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'index'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'order'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li><li><p>视图函数</p></li><li><p>before_render_template / rendered_template</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,g</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> signals</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@signals.before_render_template.connect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f7</span><span class="params">(app, template, context)</span>:</span></span><br><span class="line">    print(<span class="string">'f7'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@signals.template_rendered.connect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f8</span><span class="params">(app, template, context)</span>:</span></span><br><span class="line">    print(<span class="string">'f8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'order'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li><li><p>after_request</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,g</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> signals</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f9</span><span class="params">(response)</span>:</span></span><br><span class="line">    print(<span class="string">'f9'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'order'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li><li><p>request_finished</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,g</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> signals</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@signals.request_finished.connect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f10</span><span class="params">(app,response)</span>:</span></span><br><span class="line">    print(<span class="string">'f10'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'order'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li><li><p>got_request_exception</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,g</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> signals</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    int(<span class="string">'asdf'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@signals.got_request_exception.connect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f11</span><span class="params">(app,exception)</span>:</span></span><br><span class="line">    print(<span class="string">'f11'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'order'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li><li><p>teardown_request</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,g</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> signals</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.teardown_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f12</span><span class="params">(exc)</span>:</span></span><br><span class="line">    print(<span class="string">'f12'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'order'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li><li><p>request_tearing_down</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,g</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> signals</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@signals.request_tearing_down.connect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f13</span><span class="params">(app,exc)</span>:</span></span><br><span class="line">    print(<span class="string">'f13'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'order'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li><li><p>appcontext_popped</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,g</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> signals</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@signals.appcontext_popped.connect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f14</span><span class="params">(app)</span>:</span></span><br><span class="line">    print(<span class="string">'f14'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'order'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li></ul><p>总结：关于flask内部共有14+个扩展点用于我们对flask框架内部进行定制，其中有：9个是信号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">template_rendered = _signals.signal(<span class="string">"template-rendered"</span>)</span><br><span class="line">before_render_template = _signals.signal(<span class="string">"before-render-template"</span>)</span><br><span class="line">request_started = _signals.signal(<span class="string">"request-started"</span>)</span><br><span class="line">request_finished = _signals.signal(<span class="string">"request-finished"</span>)</span><br><span class="line">request_tearing_down = _signals.signal(<span class="string">"request-tearing-down"</span>)</span><br><span class="line">got_request_exception = _signals.signal(<span class="string">"got-request-exception"</span>)</span><br><span class="line">appcontext_tearing_down = _signals.signal(<span class="string">"appcontext-tearing-down"</span>)</span><br><span class="line">appcontext_pushed = _signals.signal(<span class="string">"appcontext-pushed"</span>)</span><br><span class="line">appcontext_popped = _signals.signal(<span class="string">"appcontext-popped"</span>)</span><br><span class="line"></span><br><span class="line">message_flashed = _signals.signal(<span class="string">"messageflashed"</span>)</span><br></pre></td></tr></table></figure><h4 id="扩展-flash"><a href="#扩展-flash" class="headerlink" title="扩展:flash"></a>扩展:flash</h4><p>flash存值之后只能取一次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,flash,get_flashed_messages,session</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> signals</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">'iuknsoiuwknlskjdf'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># flash('123')</span></span><br><span class="line">    session[<span class="string">'k1'</span>] = <span class="number">123</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># messages = get_flashed_messages()</span></span><br><span class="line">    <span class="comment"># print(messages)</span></span><br><span class="line">    val = session[<span class="string">'k1'</span>]</span><br><span class="line">    <span class="keyword">del</span> session[<span class="string">'k1'</span>]</span><br><span class="line">    print(val)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h3 id="2-flask-script"><a href="#2-flask-script" class="headerlink" title="2.flask-script"></a>2.flask-script</h3><p>flask的组件，用于运行flask程序。 </p><ul><li><p>安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install flask-script</span><br></pre></td></tr></table></figure></li><li><p>使用<br><img src="C:%5CUsers%5CAdministrator%5CDesktop%5C1574752970224.png" alt="1574752970224"></p></li><li><p>其他执行命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> s24day95 <span class="keyword">import</span> create_app</span><br><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"></span><br><span class="line">app = create_app()</span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">custom</span><span class="params">(arg)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    自定义命令</span></span><br><span class="line"><span class="string">    python manage.py custom 123</span></span><br><span class="line"><span class="string">    :param arg:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(arg)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.option('-n', '--name', dest='name')</span></span><br><span class="line"><span class="meta">@manager.option('-u', '--url', dest='url')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(name, url)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    自定义命令</span></span><br><span class="line"><span class="string">    执行： python manage.py  cmd -n wupeiqi -u http://www.oldboyedu.com</span></span><br><span class="line"><span class="string">    :param name:</span></span><br><span class="line"><span class="string">    :param url:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(name, url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure></li><li><p>其他</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">结合：flask-migrate / flask-sqlalchemy</span><br><span class="line"></span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-蓝图"><a href="#3-蓝图" class="headerlink" title="3.蓝图"></a>3.蓝图</h3><p>目录结构的划分</p><ul><li>分功能蓝图：s24day95</li><li>分结构蓝图：bigblue</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;内容回顾&quot;&gt;&lt;a href=&quot;#内容回顾&quot; class=&quot;headerlink&quot; title=&quot;内容回顾&quot;&gt;&lt;/a&gt;内容回顾&lt;/h2&gt;&lt;p&gt;1.flask和django的区别？&lt;/p&gt;
&lt;p&gt;2.flask请求的声明周期？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wsgi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;before&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;视图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;after&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;3.wsgi的本质&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;socket服务端&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;4.flask的蓝图的作用？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;默认flask通过一个脚本就可以实现，但由于项目业务可能会比较多，为了方便业务的拆分，我们会创建多个文件（蓝图）进行管理。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;5.flask的蓝图和django的app有什么区别？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;相同点：都是用于做业务拆分 / 需要注册才能使用 / 都可以在自己内部定义模板和静态文件。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不同点：注册位置不同 、flask before/after_request和django中间件他的应用粒度更细 、 django的app内置了很多，flask蓝图没有内置。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="flask" scheme="https://pl1649947109.github.io/pl1649947109/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>第四讲——flask上下文管理源码剖析</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/24/%E4%B9%A6/flask/%E7%AC%AC%E5%9B%9B%E8%AE%B2%E2%80%94%E2%80%94flask%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/24/书/flask/第四讲——flask上下文管理源码剖析/</id>
    <published>2019-11-24T12:00:00.000Z</published>
    <updated>2019-11-26T09:02:55.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内容回顾"><a href="#内容回顾" class="headerlink" title="内容回顾"></a>内容回顾</h2><p>1.django和flask的区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 概括的区别</span><br><span class="line">- django中提供功能列举</span><br><span class="line">- 请求处理机制不同，django是通过传参的形式，flask是通过上下文管理的方式实现。</span><br></pre></td></tr></table></figure><p>2.wsgi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">django和flask内部都没有实现socket，而是wsgi实现。</span><br><span class="line">wsgi是web服务网管接口，他是一个协议，实现它的协议的有：wsgiref/werkzurg/uwsgi</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django之前</span></span><br><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/html'</span>)])</span><br><span class="line">    <span class="keyword">return</span> [bytes(<span class="string">'&lt;h1&gt;Hello, web!&lt;/h1&gt;'</span>, encoding=<span class="string">'utf-8'</span>), ]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    httpd = make_server(<span class="string">'127.0.0.1'</span>, <span class="number">8000</span>, run)</span><br><span class="line">    httpd.serve_forever()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flask之前</span></span><br><span class="line"><span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line"><span class="keyword">from</span> werkzeug.wrappers <span class="keyword">import</span> BaseResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    print(<span class="string">'请求来了'</span>)</span><br><span class="line">    response = BaseResponse(<span class="string">'你好'</span>)</span><br><span class="line">    <span class="keyword">return</span> response(environ, start_response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run_simple(<span class="string">'127.0.0.1'</span>, <span class="number">5000</span>, func)</span><br></pre></td></tr></table></figure><a id="more"></a><p>3.web框架都有的功能：路由、视图、模板</p><p>4.before_request/after_request</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">相当于django的中间件，对所有的请求定制功能。</span><br></pre></td></tr></table></figure><p>5.tempalte_global / template_filter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定制在所有模板中都可以使用函数</span><br></pre></td></tr></table></figure><p>6.路由系统处理本质 @app.route</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将url和函数打包成rule，添加到map对象，map再放到app中。</span><br></pre></td></tr></table></figure><p>7.路由</p><ul><li>装饰器实现 / add_url_rule</li><li>endpoint</li><li>动态路由</li><li>如果给视图加装饰器：放route下面 、 functools</li></ul><p>8.视图</p><ul><li>FBV</li><li>CBV（返回一个view函数，闭包的应用场景）</li><li>应用到的功能都是通过导入方式：request/session</li></ul><p>9.flask中支持session</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">默认将session加密，然后保存在浏览器的cookie中。</span><br></pre></td></tr></table></figure><p>10.模板比django方便一点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">支持python原生的语法</span><br></pre></td></tr></table></figure><p>11.蓝图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">帮助我们可以对很多的业务功能做拆分，创建多个py文件，把各个功能放置到各个蓝图，最后再将蓝图注册到flask对象中。 </span><br><span class="line"></span><br><span class="line">帮助我们做目录结构的拆分。</span><br></pre></td></tr></table></figure><p>12.threading.local对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自动为每个线程开辟空间，让你进行存取值。</span><br></pre></td></tr></table></figure><p>13.数据库链接池 DBUtils （SQLHelper）</p><p>14.面向对象上下文管理（with)</p><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><ul><li>flask上下文源码</li><li>flask的扩展</li></ul><h2 id="内容详细"><a href="#内容详细" class="headerlink" title="内容详细"></a>内容详细</h2><h3 id="1-栈"><a href="#1-栈" class="headerlink" title="1. 栈"></a>1. 栈</h3><p>后进先出，通过列表可以实现一个栈。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line">v.append(<span class="number">44</span>)</span><br><span class="line">v.pop()</span><br></pre></td></tr></table></figure><p>应用场景：</p><ul><li>节流</li></ul><h3 id="2-面向对象"><a href="#2-面向对象" class="headerlink" title="2. 面向对象"></a>2. 面向对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        print(key,value)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        print(item)</span><br><span class="line"></span><br><span class="line">obj = Foo()  <span class="comment">#触发__setattr__</span></span><br><span class="line">obj.x = <span class="number">123</span> </span><br><span class="line">obj.x    <span class="comment">#触发__getattr__</span></span><br></pre></td></tr></table></figure><ul><li>drf中request</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">request.data</span><br><span class="line">request.query_params</span><br><span class="line">request._request</span><br><span class="line">request._request.POST</span><br><span class="line">request._request.GET</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># self.storage = &#123;&#125;</span></span><br><span class="line">        object.__setattr__(self,<span class="string">"storage"</span>,&#123;&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        self.storage[key] = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span>    <span class="comment">#一直在这循环</span></span><br><span class="line">        <span class="keyword">return</span> self.storage.get(item)</span><br><span class="line"></span><br><span class="line">local = Local()</span><br><span class="line">local.x1 = <span class="number">123</span></span><br><span class="line">print(local.x1)</span><br></pre></td></tr></table></figure><h3 id="3-线程唯一标识"><a href="#3-线程唯一标识" class="headerlink" title="3.线程唯一标识"></a>3.线程唯一标识</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> get_ident</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">()</span>:</span></span><br><span class="line">    ident = get_ident()  <span class="comment">#获取线程ID</span></span><br><span class="line">    print(ident)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    t = threading.Thread(target=task)</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><h3 id="4-自定义threading-local"><a href="#4-自定义threading-local" class="headerlink" title="4.自定义threading.local"></a>4.自定义threading.local</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">storage = &#123;</span></span><br><span class="line"><span class="string">    1111:&#123;'x1':[0,1,2,3]&#125;,  #每一个线程，里面键是固定名称，值是一个列表（这就是那个神奇的地方）</span></span><br><span class="line"><span class="string">    1112:&#123;'x1':1&#125;</span></span><br><span class="line"><span class="string">    1113:&#123;'x1':2&#125;</span></span><br><span class="line"><span class="string">    1114:&#123;'x1':3&#125;</span></span><br><span class="line"><span class="string">    1115:&#123;'x1':4&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#程序就来触发它的执行</span></span><br><span class="line">        object.__setattr__(self,<span class="string">'storage'</span>,&#123;&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        <span class="comment">#ident是线程ID</span></span><br><span class="line">        ident = threading.get_ident()</span><br><span class="line">        <span class="comment">#判断线程该线程是否在storage字典里面，有就把传来的值存里面，没有就新建一条数据</span></span><br><span class="line">        <span class="keyword">if</span> ident <span class="keyword">in</span> self.storage:</span><br><span class="line">            self.storage[ident][key] = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.storage[ident] = &#123;key:value&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="comment">#取对象值得时候触发，获取线程ID</span></span><br><span class="line">        ident = threading.get_ident()</span><br><span class="line">        <span class="comment">#有就返回值没有就返回None</span></span><br><span class="line">        <span class="keyword">if</span> ident <span class="keyword">not</span> <span class="keyword">in</span> self.storage:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">return</span> self.storage[ident].get(item)</span><br><span class="line"></span><br><span class="line">local = Local()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(arg)</span>:</span></span><br><span class="line">    local.x1 = arg</span><br><span class="line">    print(local.x1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    t = threading.Thread(target=task,args=(i,))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><h3 id="5-加强版threading-local"><a href="#5-加强版threading-local" class="headerlink" title="5.加强版threading.local"></a>5.加强版threading.local</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">storage = &#123;</span></span><br><span class="line"><span class="string">    1111:&#123;'x1':[]&#125;,</span></span><br><span class="line"><span class="string">    1112:&#123;'x1':[]&#125;</span></span><br><span class="line"><span class="string">    1113:&#123;'x1':[]&#125;</span></span><br><span class="line"><span class="string">    1114:&#123;'x1':[]&#125;</span></span><br><span class="line"><span class="string">    1115:&#123;'x1':[]&#125;,</span></span><br><span class="line"><span class="string">    1116:&#123;'x1':[]&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        object.__setattr__(self,<span class="string">'storage'</span>,&#123;&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        ident = threading.get_ident()</span><br><span class="line">        <span class="comment">#这里使用了栈的功能，把值添加到列表的尾部</span></span><br><span class="line">        <span class="keyword">if</span> ident <span class="keyword">in</span> self.storage:</span><br><span class="line">            self.storage[ident][key].append(value)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.storage[ident] = &#123;key:[value,]&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        ident = threading.get_ident()</span><br><span class="line">        <span class="comment">#取值得时候取最后进入列表额的</span></span><br><span class="line">        <span class="keyword">if</span> ident <span class="keyword">not</span> <span class="keyword">in</span> self.storage:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">return</span> self.storage[ident][item][<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">local = Local()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(arg)</span>:</span></span><br><span class="line">    local.x1 = arg</span><br><span class="line">    print(local.x1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    t = threading.Thread(target=task,args=(i,))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><h3 id="6-flask源码关于local的实现"><a href="#6-flask源码关于local的实现" class="headerlink" title="6.flask源码关于local的实现"></a>6.flask源码关于local的实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 协程</span></span><br><span class="line">    <span class="keyword">from</span> greenlet <span class="keyword">import</span> getcurrent <span class="keyword">as</span> get_ident</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">from</span> thread <span class="keyword">import</span> get_ident</span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        <span class="keyword">from</span> _thread <span class="keyword">import</span> get_ident</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">__storage__ = &#123;</span></span><br><span class="line"><span class="string">    1111:&#123;"stack":[pl] &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># self.__storage__ = &#123;&#125;</span></span><br><span class="line">        <span class="comment"># self.__ident_func__ = get_ident</span></span><br><span class="line">        object.__setattr__(self, <span class="string">"__storage__"</span>, &#123;&#125;)</span><br><span class="line">        object.__setattr__(self, <span class="string">"__ident_func__"</span>, get_ident)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> iter(self.__storage__.items())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__release_local__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__storage__.pop(self.__ident_func__(), <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self.__storage__[self.__ident_func__()][name]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span></span><br><span class="line">        ident = self.__ident_func__() <span class="comment"># 1111</span></span><br><span class="line">        storage = self.__storage__</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            storage[ident][name] = value</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            storage[ident] = &#123;name: value&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">del</span> self.__storage__[self.__ident_func__()][name]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(name)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalStack</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._local = Local()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        <span class="string">"""Pushes a new item to the stack"""</span></span><br><span class="line">        <span class="comment"># self._local.stack == getattr</span></span><br><span class="line">        <span class="comment"># rv = None</span></span><br><span class="line">        rv = getattr(self._local, <span class="string">"stack"</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self._local.stack = rv = []</span><br><span class="line">        rv.append(obj)</span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        stack = getattr(self._local, <span class="string">"stack"</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> stack <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">elif</span> len(stack) == <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># release_local(self._local)</span></span><br><span class="line">            <span class="comment"># del __storage__[1111]</span></span><br><span class="line">            <span class="keyword">return</span> stack[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> stack.pop()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self._local.stack[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">except</span> (AttributeError, IndexError):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">obj = LocalStack()</span><br><span class="line">obj.push(<span class="string">'汪洋'</span>)</span><br><span class="line">obj.push(<span class="string">'成说'</span>)</span><br><span class="line"></span><br><span class="line">print(obj.top)</span><br><span class="line"></span><br><span class="line">obj.pop()</span><br><span class="line">obj.pop()</span><br></pre></td></tr></table></figure><p>总结：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">在flask中有个local类，他和threading.local的功能一样，为每个线程开辟空间进行存取数据，他们两个的内部实现机制，内部维护一个字典，以线程(协程)ID为key，进行数据隔离，如：</span><br><span class="line">    __storage__ = &#123;</span><br><span class="line"><span class="number">1211</span>:&#123;<span class="string">'k1'</span>:<span class="number">123</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    obj = Local()</span><br><span class="line">    obj.k1 = <span class="number">123</span></span><br><span class="line">    </span><br><span class="line">在flask中还有一个LocalStack的类，他内部会依赖local对象，local对象负责存储数据，localstack对象用于将local中的值维护成一个栈。</span><br><span class="line">__storage__ = &#123;</span><br><span class="line"><span class="number">1211</span>:&#123;<span class="string">'stack'</span>:[<span class="string">'k1'</span>,]&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">obj= LocalStack()</span><br><span class="line">    obj.push(<span class="string">'k1'</span>)</span><br><span class="line">    obj.top</span><br><span class="line">    obj.pop()</span><br></pre></td></tr></table></figure><p>7.flask源码中总共有2个localstack对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># context locals</span></span><br><span class="line">__storage__ = &#123;</span><br><span class="line"><span class="number">1111</span>:&#123;<span class="string">'stack'</span>:[RequestContext(reqeust,session),]&#125;,</span><br><span class="line">    <span class="number">1123</span>:&#123;<span class="string">'stack'</span>:[RequestContext(reqeust,session),]&#125;,</span><br><span class="line">&#125;</span><br><span class="line">_request_ctx_stack = LocalStack()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__storage__ = &#123;</span><br><span class="line"><span class="number">1111</span>:&#123;<span class="string">'stack'</span>:[AppContenxt(app,g),]&#125;</span><br><span class="line">    <span class="number">1123</span>:&#123;<span class="string">'stack'</span>:[AppContenxt(app,g),]&#125;,</span><br><span class="line">&#125;</span><br><span class="line">_app_ctx_stack = LocalStack()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_request_ctx_stack.push(<span class="string">'小魔方'</span>)</span><br><span class="line">_app_ctx_stack.push(<span class="string">'大魔方'</span>)</span><br></pre></td></tr></table></figure><ul><li>上下文管理<ul><li>请求上下文管理</li><li>应用上下文管理</li></ul></li></ul><p><img src="http://9017499461.linshutu.top/%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86.JPG" alt></p><h3 id="7-源码初识"><a href="#7-源码初识" class="headerlink" title="7.源码初识"></a>7.源码初识</h3><h4 id="7-1-项目启动"><a href="#7-1-项目启动" class="headerlink" title="7.1 项目启动"></a>7.1 项目启动</h4><ul><li><p>实例化Flask对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 对app对象封装一些初始化的值。</span><br><span class="line">app.static_url_path</span><br><span class="line">app.static_folder</span><br><span class="line">app.template_folder</span><br><span class="line">app.view_functions = &#123;&#125;</span><br><span class="line"><span class="number">2.</span> 添加静态文件的路由</span><br><span class="line">    self.add_url_rule(</span><br><span class="line">        self.static_url_path + <span class="string">"/&lt;path:filename&gt;"</span>,</span><br><span class="line">        endpoint=<span class="string">"static"</span>,</span><br><span class="line">        host=static_host,</span><br><span class="line">        view_func=self.send_static_file,</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line"><span class="number">3.</span> 实例化了url_map的对象，以后在map对象中放 【/index/ 函数的对象别名】</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(object)</span>:</span></span><br><span class="line">        url_rule_class = Rule</span><br><span class="line">        url_map_class = Map</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self...)</span>:</span></span><br><span class="line">            self.static_url_path</span><br><span class="line">            self.static_folder</span><br><span class="line">            self.template_folder</span><br><span class="line">            self.view_functions = &#123;&#125;</span><br><span class="line">            self.url_map = self.url_map_class()</span><br><span class="line">    app = Flask()</span><br><span class="line">    app.view_functions</span><br><span class="line">app.url_rule_class</span><br></pre></td></tr></table></figure></li><li><p>加载配置文件（给app的config进行赋值）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,static_url_path=<span class="string">'/xx'</span>)</span><br><span class="line"></span><br><span class="line">app.config.from_object(<span class="string">'xx.xx'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 读取配置文件中的所有键值对，并将键值对全都放到Config对象。（Config是一个字典）</span><br><span class="line"><span class="number">2.</span> 把包含所有配置文件的Config对象，赋值给 app.config</span><br></pre></td></tr></table></figure></li><li><p>添加路由映射</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,static_url_path=<span class="string">'/xx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 将 url = /index  和  methods = [GET,POST]  和 endpoint = <span class="string">"index"</span>封装到Rule对象</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 将Rule对象添加到 app.url_map中。</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 把endpoint和函数的对应关系放到 app.view_functions中。</span><br></pre></td></tr></table></figure></li><li><p>截止目前</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.config</span><br><span class="line">app.url_map</span><br><span class="line">app.view_functions</span><br></pre></td></tr></table></figure></li><li><p>运行flask</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,static_url_path=<span class="string">'/xx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 内部调用werkzeug的run_simple，内部创建socket，监听IP和端口，等待用户请求到来。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 一旦有用户请求，执行app.__call__方法。</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(object)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self,envion,start_response)</span>:</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">run_simple(host, port, self, **options)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">        app.run()</span><br></pre></td></tr></table></figure></li></ul><h4 id="7-2-有用户请求到来"><a href="#7-2-有用户请求到来" class="headerlink" title="7.2 有用户请求到来"></a>7.2 有用户请求到来</h4><ul><li><p>创建ctx = RequestContext对象，其内部封装了 Request对象和session数据。 </p></li><li><p>创建app_ctx = AppContext对象，其内部封装了App和g。 </p></li><li><p>然后ctx.push触发将 ctx 和 app_ctx 分别通过自己的LocalStack对象将其放入到Local中，Local的本质是以线程ID为key，以{“stack”:[]}为value的字典。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">1111:&#123;“stack”:[ctx,]&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">1111:&#123;“stack”:[app_ctx,]&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：以后再想要获取 request/session / app / g时，都需要去local中获取。 </p></li><li><p>执行所有的before_request函数</p></li><li><p>执行视图函数</p></li><li><p>执行所有after_request函数（session加密放到cookie中）</p></li><li><p>销毁ctx和app_ctx</p></li></ul><h3 id="8-了解源码流程之后，使用：session、request、app、g"><a href="#8-了解源码流程之后，使用：session、request、app、g" class="headerlink" title="8.了解源码流程之后，使用：session、request、app、g"></a>8.了解源码流程之后，使用：session、request、app、g</h3><ul><li><p>偏函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 偏函数</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">def func(a1,a2):</span></span><br><span class="line"><span class="string">    print(a1,a2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">new_func = functools.partial(func,123)</span></span><br><span class="line"><span class="string">new_func(2)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></li><li><p>私有成员</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">'alex'</span></span><br><span class="line">        self.__age = <span class="number">123</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line"></span><br><span class="line">print(obj.name)</span><br><span class="line">print(obj._Foo__age)</span><br></pre></td></tr></table></figure></li><li><p>setattr</p></li><li><p>setitem</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># session, request, current_app, g 全部都是LocalProxy对象。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">session['x'] = 123     ctx.session['x'] = 123</span></span><br><span class="line"><span class="string">request.method         ctx.request.method</span></span><br><span class="line"><span class="string">current_app.config    app_ctx.app.config</span></span><br><span class="line"><span class="string">g.x1                  app_ctx.g.x1</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h3 id="9-g到底是个什么鬼？"><a href="#9-g到底是个什么鬼？" class="headerlink" title="9.g到底是个什么鬼？"></a>9.g到底是个什么鬼？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在一次请求请求的周期，可以在g中设置值，在本次的请求周期中都可以读取或复制。</span><br><span class="line">相当于是一次请求周期的全局变量。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,g</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,static_url_path=<span class="string">'/xx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    g.x1 = <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(g.x1)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>第一阶段：启动flask程序，加载特殊装饰器、路由，把他们封装  app= Flask对象中。 </li><li>第二阶段：请求到来<ul><li>创建上下文对象：应用上下文、请求上下文。</li><li>执行before / 视图 / after </li><li>销毁上下文对象 </li></ul></li></ul><h3 id="flask请求完整的生命周期"><a href="#flask请求完整的生命周期" class="headerlink" title="flask请求完整的生命周期"></a>flask请求完整的生命周期</h3><p><img src="http://9017499461.linshutu.top/flask%E5%AE%8C%E6%95%B4%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt></p><p>启动先执行manage.py 中的    app.run()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span>　　 </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, host=None, port=None, debug=None, **options)</span>:</span></span><br><span class="line">    　　<span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line">    　　<span class="keyword">try</span>:</span><br><span class="line">        　　<span class="comment">#run_simple 是werkzeug 提供的方法，会执行第三个参数 self()</span></span><br><span class="line">        　　run_simple(host, port, self, **options)</span><br></pre></td></tr></table></figure><p>执行app()，对象()表示调用对象的<code>__call__</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span>　　 </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.wsgi_app(environ, start_response)</span><br></pre></td></tr></table></figure><p>又调用了app.wsgi_app方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span>　　 </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wsgi_app</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        <span class="comment">#1.</span></span><br><span class="line">        ctx = self.request_context(environ)　　　　       </span><br><span class="line">        self.request_context</span><br><span class="line">        <span class="comment">#2.</span></span><br><span class="line">        ctx.push()　　 　　</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">try</span>:　　　　　　　　　 </span><br><span class="line">                <span class="comment">#3.执行视图函数</span></span><br><span class="line">                response = self.full_dispatch_request()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                error = e　　　　　　　　　 </span><br><span class="line">                <span class="comment">#4.</span></span><br><span class="line">                response = self.handle_exception(e)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                error = sys.exc_info()[<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">            <span class="keyword">return</span> response(environ, start_response)</span><br><span class="line">        <span class="keyword">finally</span>:　　　　　　　</span><br><span class="line">            <span class="comment">#5.</span></span><br><span class="line">            ctx.auto_pop(error)</span><br></pre></td></tr></table></figure><p>第1步：执行app.request_context方法，把请求的相关信息传进去了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span>　　 </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request_context</span><span class="params">(self, environ)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> RequestContext(self, environ)</span><br></pre></td></tr></table></figure><p>返回了一个RequestContext类的实例对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestContext</span><span class="params">(object)</span>:</span>　　 </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app, environ, request=None)</span>:</span></span><br><span class="line">        self.app = app</span><br><span class="line">        <span class="keyword">if</span> request <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            request = app.request_class(environ) 　　　　　　  </span><br><span class="line">            app.request_class = Request       </span><br><span class="line">        self.request = request</span><br><span class="line">        self.session = <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>在init构造方法中注意app又调用了request_class方法，也就是Request 实例一个对象，</p><p>那么第1步我们知道：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx是一个RequestContext对象，这个对象里面封装了两个主要的属性，一个是self.request = Request实例的对象，Request对象里面封装了请求进来的所有数据；另外一个是self.session = None就可以了</span><br></pre></td></tr></table></figure><p>第2步：执行ctx.push()方法</p><p>因为ctx是RequestContext类的对象，那我们就要去RequestContext类中找push方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestContext</span><span class="params">(object)</span>:</span>　　 </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self)</span>:</span></span><br><span class="line">　　　　 <span class="comment">#2.1.</span></span><br><span class="line">        app_ctx = _app_ctx_stack.top</span><br><span class="line">        <span class="keyword">if</span> app_ctx <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> app_ctx.app != self.app:</span><br><span class="line">            app_ctx = self.app.app_context()　　　　　　　　　　　　</span><br><span class="line">            <span class="comment"># self.app.app_context = app.app_context = AppContext(app)</span></span><br><span class="line">            app_ctx.push()　　　　　</span><br><span class="line">            <span class="comment">#2.2.　　　　  </span></span><br><span class="line">            _request_ctx_stack.push(self)　　　　　　　　</span><br><span class="line">            <span class="comment">#_request_ctx_stack = LocalStack()　　　　 </span></span><br><span class="line">            <span class="comment">#2.3.        </span></span><br><span class="line">            self.session = self.app.open_session(self.request)        </span><br><span class="line">            <span class="comment">#判断没有 secret_key时：        </span></span><br><span class="line">            <span class="keyword">if</span> self.session <span class="keyword">is</span> <span class="literal">None</span>:            </span><br><span class="line">                self.session = self.app.make_null_session()            </span><br><span class="line">                <span class="keyword">raise</span> RuntimeError(<span class="string">'The session is unavailable because no secret '</span><span class="string">'key was set.)</span></span><br></pre></td></tr></table></figure><p>第2.1步：到_app_ctx_stack这个栈中取最后一个数据，如果未取到或者取到的不是当前的app，就调用app.app_context()方法，就是新实例一个上下文app_ctx对象，再执行app_ctx.push()方法     （在这再次强调，因为app_ctx是AppContext对象，就要先去AppContext类中找push方法），</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppContext</span><span class="params">(object)</span>:</span>　　 </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self)</span>:</span></span><br><span class="line">        _app_ctx_stack.push(self)     <span class="comment">#把新创建的app_ctx上下文app对象添加到了_app_ctx_stack这个栈中</span></span><br><span class="line">        appcontext_pushed.send(self.app)   <span class="comment">#在这里遇到了第一个信号，请求app上下文push时执行</span></span><br></pre></td></tr></table></figure><p>第2.2步：LocalStack类的对象调用push方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalStack</span><span class="params">(object)</span>:</span>　　</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        rv = getattr(self._local, <span class="string">'stack'</span>, <span class="literal">None</span>)       <span class="comment">#self._local = Local()　　　　      #第一次的时候rv肯定是None</span></span><br><span class="line">        <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self._local.stack = rv = []      <span class="comment">#Local对象 .stack = rv = [] 就执行了对象的 __setattr__方法</span></span><br><span class="line">        rv.append(obj)                       <span class="comment">#把 ctx对象添加到Local类的列表中</span></span><br><span class="line">        <span class="keyword">return</span> rv</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> greenlet <span class="keyword">import</span> getcurrent <span class="keyword">as</span> get_ident</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">from</span> thread <span class="keyword">import</span> get_ident</span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        <span class="keyword">from</span> _thread <span class="keyword">import</span> get_ident</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span><span class="params">(object)</span>:</span>        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>        </span><br><span class="line">        object.__setattr__(self, <span class="string">'__storage__'</span>, &#123;&#125;)             <span class="comment">#这里为什么用object.__setattr__  而不是直接用self.__storage__=&#123;&#125;        </span></span><br><span class="line">        object.__setattr__(self, <span class="string">'__ident_func__'</span>, get_ident)   <span class="comment">#如果用self的方式设置属性，就会触发self的__setattr__方法，就会无限的循环　　</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span></span><br><span class="line">        ident = self.__ident_func__()</span><br><span class="line">        storage = self.__storage__</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            storage[ident][name] = value    <span class="comment"># &#123;"唯一标识1"：&#123;"stack":[]&#125;，"唯一标识2"：&#123;"stack":[]&#125;&#125;   和本地线程类似</span></span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            storage[ident] = &#123;name: value&#125;</span><br></pre></td></tr></table></figure><p> 第2.3步：给ctx.session赋值，执行app.open_session(ctx.request)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span>　　 </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_session</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.session_interface.open_session(self, request)　　　　　<span class="comment">#return SecureCookieSessionInterface().open_session(app, request)　　　　　#所以就要去SecureCookieSessionInterface类找open_session方法</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecureCookieSessionInterface</span><span class="params">(SessionInterface)</span>:</span>　　 </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_session</span><span class="params">(self, app, request)</span>:</span></span><br><span class="line">        <span class="comment"># 查看 是否有secret_key</span></span><br><span class="line">        s = self.get_signing_serializer(app)</span><br><span class="line">        <span class="keyword">if</span> s <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        val = request.cookies.get(app.session_cookie_name)</span><br><span class="line">        <span class="comment"># 请求第一次来的时候取不到值</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> val:</span><br><span class="line">            <span class="keyword">return</span> self.session_class()</span><br><span class="line">            <span class="comment">#返回了一个 类似字典</span></span><br><span class="line">        max_age = total_seconds(app.permanent_session_lifetime)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = s.loads(val, max_age=max_age)  <span class="comment">#loads 作用是： 反序列化+解析乱码</span></span><br><span class="line">            <span class="keyword">return</span> self.session_class(data)       <span class="comment">##返回了一个 类似字典对象，对象里面有data</span></span><br><span class="line">        <span class="keyword">except</span> BadSignature:</span><br><span class="line">            <span class="keyword">return</span> self.session_class()</span><br></pre></td></tr></table></figure><p>那么第2步我们知道：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.把app_ctx上下文对象添加到了_app_ctx_stack这个栈中2.把 ctx请求对象添加到Local类的列表中3.执行open_session方法，把session加载到内</span><br></pre></td></tr></table></figure><p> 第3步：app.full_dispatch_request()   执行视图函数 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">full_dispatch_request</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#3.1 </span></span><br><span class="line">        self.try_trigger_before_first_request_functions()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            request_started.send(self)     <span class="comment"># 信号 - 请求到来前执行</span></span><br><span class="line">            <span class="comment"># 3.2 </span></span><br><span class="line">            rv = self.preprocess_request()</span><br><span class="line">            <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="comment"># 3.3 如果所有的中间件都通过了， 执行视图函数</span></span><br><span class="line">                rv = self.dispatch_request()</span><br><span class="line">　　　　 <span class="comment">#3.4 </span></span><br><span class="line">        <span class="keyword">return</span> self.finalize_request(rv)</span><br></pre></td></tr></table></figure><p>第3.1步：找到所有的 执行一次的 伪中间件 执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">try_trigger_before_first_request_functions</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> self._before_request_lock:</span><br><span class="line">            <span class="keyword">for</span> func <span class="keyword">in</span> self.before_first_request_funcs:</span><br><span class="line">                func()</span><br></pre></td></tr></table></figure><p>第3.2步：找到所有的 伪中间件的执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preprocess_request</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        funcs = self.before_request_funcs.get(<span class="literal">None</span>, ())</span><br><span class="line">        <span class="keyword">for</span> func <span class="keyword">in</span> funcs:</span><br><span class="line">            rv = func()</span><br><span class="line">            <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> rv</span><br></pre></td></tr></table></figure><p>第3.3步：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch_request</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#获取请求的ctx对象中的request数据</span></span><br><span class="line">        req = _request_ctx_stack.top.request</span><br><span class="line">        <span class="comment">#获取请求的url</span></span><br><span class="line">        rule = req.url_rule</span><br><span class="line">        <span class="comment">#执行视图函数</span></span><br><span class="line">        <span class="keyword">return</span> self.view_functions[rule.endpoint](**req.view_args)</span><br></pre></td></tr></table></figure><p>第3.4步：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">finalize_request</span><span class="params">(self, rv, from_error_handler=False)</span>:</span></span><br><span class="line">        response = self.make_response(rv)   <span class="comment">#通过make_response方法后就可以对返回值进行设置响应头等数据了</span></span><br><span class="line">        <span class="keyword">try</span>:　　　　　　　<span class="comment">#3.4.1</span></span><br><span class="line">            response = self.process_response(response)</span><br><span class="line">            request_finished.send(self, response=response)  <span class="comment">#信号 -  请求结束后执行</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>第3.4.1步：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        ctx = _request_ctx_stack.top</span><br><span class="line">        <span class="comment">#找到所有的 after_request 伪中间件执行</span></span><br><span class="line">        funcs = ctx._after_request_functions</span><br><span class="line">        <span class="keyword">for</span> handler <span class="keyword">in</span> funcs:</span><br><span class="line">            response = handler(response)</span><br><span class="line">        <span class="comment"># 3.4.1.1 如果有session就执行self.save_session方法</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.session_interface.is_null_session(ctx.session):　　　　　     self.session_interface = SecureCookieSessionInterface() 　　　　　　   <span class="comment">#3.4.1.2　　　　 　　 </span></span><br><span class="line">        self.save_session(ctx.session, response) <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>第3.4.1.1步： 到SecureCookieSessionInterface类中找is_null_session方法，发现没有，就去它基类SessionInterface中找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SessionInterface</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_null_session</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        <span class="comment">#判断ctx.session 是不是 self.null_session_class = NullSession 类或者它派生类的对象</span></span><br><span class="line">        <span class="keyword">return</span> isinstance(obj, self.null_session_class)</span><br></pre></td></tr></table></figure><p>第3.4.1.2步：执行了SecureCookieSessionInterface类的save_session方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_session</span><span class="params">(self, session, response)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.session_interface.save_session(self, session, response)</span><br><span class="line">        <span class="comment"># return SecureCookieSessionInterface().save_session(self, session, response)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecureCookieSessionInterface</span><span class="params">(SessionInterface)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_session</span><span class="params">(self, app, session, response)</span>:</span></span><br><span class="line">        <span class="comment">#给响应设置cookie</span></span><br><span class="line">        response.set_cookie(app.session_cookie_name, val,</span><br><span class="line">                            expires=expires, httponly=httponly,</span><br><span class="line">                            domain=domain, path=path, secure=secure)</span><br></pre></td></tr></table></figure><p>补充：自定义session</p><p>第4步：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_exception</span><span class="params">(self, e)</span>:</span></span><br><span class="line">        got_request_exception.send(self, exception=e)    <span class="comment">#信号 - 请求执行出现异常时执行</span></span><br></pre></td></tr></table></figure><p>第5步： 执行了RequestContext 的 pop 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestContext</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">auto_pop</span><span class="params">(self, exc)</span>:</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.pop(exc)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestContext</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self, exc=_sentinel)</span>:</span></span><br><span class="line">　　　　 <span class="keyword">try</span>:</span><br><span class="line">        　　<span class="keyword">if</span> <span class="keyword">not</span> self._implicit_app_ctx_stack:</span><br><span class="line">　　　　　　　　  <span class="comment">#5.1</span></span><br><span class="line">            　　self.app.do_teardown_request(exc)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">　　　　　　  <span class="comment"># 请求结束时  request上下文的栈中就把请求pop掉</span></span><br><span class="line">            rv = _request_ctx_stack.pop()</span><br><span class="line">        　　 <span class="keyword">if</span> app_ctx <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">　　　　　　　　　　<span class="comment">#5.2</span></span><br><span class="line">        　　 　　 app_ctx.pop(exc)</span><br></pre></td></tr></table></figure><p>第5.1步： 执行  app.do_teardown_request方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_teardown_request</span><span class="params">(self, exc=_sentinel)</span>:</span></span><br><span class="line">　　　　 <span class="comment"># 信号 - 请求执行完毕后自动执行（无论成功与否）</span></span><br><span class="line">        request_tearing_down.send(self, exc=exc)</span><br></pre></td></tr></table></figure><p>第5.2步：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppContext</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self, exc=_sentinel)</span>:</span>        </span><br><span class="line">        <span class="keyword">try</span>:            </span><br><span class="line">            <span class="keyword">if</span> self._refcnt &lt;= <span class="number">0</span>:　　　　　　　　　 </span><br><span class="line">                <span class="comment">#5.2.1                </span></span><br><span class="line">                self.app.do_teardown_appcontext(exc)　　　　 </span><br><span class="line">                <span class="comment"># 信号 - 请求上下文pop时执行</span></span><br><span class="line">        appcontext_popped.send(self.app)</span><br></pre></td></tr></table></figure><p>第5.2.1步：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_teardown_appcontext</span><span class="params">(self, exc=_sentinel)</span>:</span></span><br><span class="line">        <span class="comment"># 信号 - 请求上下文执行完毕后自动执行（无论成功与否）</span></span><br><span class="line">        appcontext_tearing_down.send(self, exc=exc)</span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">     <span class="comment"># </span></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line">obj() <span class="comment"># __call__</span></span><br><span class="line"></span><br><span class="line">obj[x1] = <span class="number">123</span> <span class="comment"># __setitem__</span></span><br><span class="line">obj[x2]  <span class="comment"># __getitem__</span></span><br><span class="line"></span><br><span class="line">obj.x1 = <span class="number">123</span> <span class="comment"># __setattr__</span></span><br><span class="line">obj.x2  <span class="comment"># __getattr__</span></span><br></pre></td></tr></table></figure><p>SQLhelper</p><ul><li><p>方式一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">storage = &#123;</span></span><br><span class="line"><span class="string">    1111:&#123;'stack':[]&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlHelper</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.pool = PooledDB(</span><br><span class="line">            creator=pymysql,  <span class="comment"># 使用链接数据库的模块</span></span><br><span class="line">            maxconnections=<span class="number">6</span>,  <span class="comment"># 连接池允许的最大连接数，0和None表示不限制连接数</span></span><br><span class="line">            mincached=<span class="number">2</span>,  <span class="comment"># 初始化时，链接池中至少创建的链接，0表示不创建</span></span><br><span class="line">            blocking=<span class="literal">True</span>,  <span class="comment"># 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错</span></span><br><span class="line">            ping=<span class="number">0</span>,</span><br><span class="line">            <span class="comment"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class="line">            host=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">            port=<span class="number">3306</span>,</span><br><span class="line">            user=<span class="string">'root'</span>,</span><br><span class="line">            password=<span class="string">'222'</span>,</span><br><span class="line">            database=<span class="string">'cmdb'</span>,</span><br><span class="line">            charset=<span class="string">'utf8'</span></span><br><span class="line">        )</span><br><span class="line">        self.local = threading.local()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">        conn = self.pool.connection()</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        <span class="keyword">return</span> conn, cursor</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self, cursor, conn)</span>:</span></span><br><span class="line">        cursor.close()</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fetchall</span><span class="params">(self, sql, *args)</span>:</span></span><br><span class="line">        <span class="string">""" 获取所有数据 """</span></span><br><span class="line">        conn, cursor = self.open()</span><br><span class="line">        cursor.execute(sql, args)</span><br><span class="line">        result = cursor.fetchall()</span><br><span class="line">        self.close(conn, cursor)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fetchone</span><span class="params">(self, sql, *args)</span>:</span></span><br><span class="line">        <span class="string">""" 获取所有数据 """</span></span><br><span class="line">        conn, cursor = self.open()</span><br><span class="line">        cursor.execute(sql, args)</span><br><span class="line">        result = cursor.fetchone()</span><br><span class="line">        self.close(conn, cursor)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        conn,cursor = self.open()</span><br><span class="line">        rv = getattr(self.local,<span class="string">'stack'</span>,<span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> rv:</span><br><span class="line">            self.local.stack = [(conn,cursor),]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rv.append((conn,cursor))</span><br><span class="line">            self.local.stack = rv</span><br><span class="line">        <span class="keyword">return</span> cursor</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        rv = getattr(self.local,<span class="string">'stack'</span>,<span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> rv:</span><br><span class="line">            <span class="comment"># del self.local.stack</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        conn,cursor = self.local.stack.pop()</span><br><span class="line">        cursor.close()</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line">db = SqlHelper()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlhelper <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># db.fetchall(...)</span></span><br><span class="line"><span class="comment"># db.fetchone(...)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> db <span class="keyword">as</span> c1:</span><br><span class="line">    c1.execute(<span class="string">'select 1'</span>)</span><br><span class="line">    <span class="keyword">with</span> db <span class="keyword">as</span> c2:</span><br><span class="line">        c1.execute(<span class="string">'select 2'</span>)</span><br><span class="line">    print(<span class="number">123</span>)</span><br></pre></td></tr></table></figure></li><li><p>方式二</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB</span><br><span class="line"></span><br><span class="line">POOL = PooledDB(</span><br><span class="line">            creator=pymysql,  <span class="comment"># 使用链接数据库的模块</span></span><br><span class="line">            maxconnections=<span class="number">6</span>,  <span class="comment"># 连接池允许的最大连接数，0和None表示不限制连接数</span></span><br><span class="line">            mincached=<span class="number">2</span>,  <span class="comment"># 初始化时，链接池中至少创建的链接，0表示不创建</span></span><br><span class="line">            blocking=<span class="literal">True</span>,  <span class="comment"># 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错</span></span><br><span class="line">            ping=<span class="number">0</span>,</span><br><span class="line">            <span class="comment"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class="line">            host=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">            port=<span class="number">3306</span>,</span><br><span class="line">            user=<span class="string">'root'</span>,</span><br><span class="line">            password=<span class="string">'222'</span>,</span><br><span class="line">            database=<span class="string">'cmdb'</span>,</span><br><span class="line">            charset=<span class="string">'utf8'</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlHelper</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.conn = <span class="literal">None</span></span><br><span class="line">        self.cursor = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">        conn = POOL.connection()</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        <span class="keyword">return</span> conn, cursor</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cursor.close()</span><br><span class="line">        self.conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.conn,self.cursor = self.open()</span><br><span class="line">        <span class="keyword">return</span> self.cursor</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        self.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># ################## 使用 ##################</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> SqlHelper() <span class="keyword">as</span> c1:</span><br><span class="line">    c1.execute(<span class="string">'select 1'</span>)</span><br><span class="line">    <span class="keyword">with</span> SqlHelper() <span class="keyword">as</span> c2:</span><br><span class="line">        c2.execute(<span class="string">'select 2'</span>)</span><br><span class="line">    print(<span class="number">666</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> SqlHelper() <span class="keyword">as</span> cursor:</span><br><span class="line">    cursor.execute(<span class="string">'select 1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> SqlHelper() <span class="keyword">as</span> cursor:</span><br><span class="line">    cursor.execute(<span class="string">'select 1'</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-drf源码分析系列"><a href="#1-drf源码分析系列" class="headerlink" title="1.drf源码分析系列"></a>1.drf源码分析系列</h3><ul><li>01 restful规范</li><li>02 从cbv到drf的视图 / 快速了解drf</li><li>03 视图</li><li>04 版本</li><li>05 认证</li><li>06 权限</li><li>07 节流</li><li>08 jwt</li><li>持续更新中…</li></ul><h3 id="2-flask源码分析系列"><a href="#2-flask源码分析系列" class="headerlink" title="2.flask源码分析系列"></a>2.flask源码分析系列</h3><ul><li>01 werkzurg 了解wsgi</li><li>02 快速使用</li><li>03 threading.local和高级</li><li>04 LocalStack和Local对象实现栈的管理</li><li>05 Flask源码之：配置加载</li><li>06 Flask源码之：路由加载</li><li>持续更新中…</li></ul><p>印象笔记 、 有道云笔记</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;内容回顾&quot;&gt;&lt;a href=&quot;#内容回顾&quot; class=&quot;headerlink&quot; title=&quot;内容回顾&quot;&gt;&lt;/a&gt;内容回顾&lt;/h2&gt;&lt;p&gt;1.django和flask的区别&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- 概括的区别&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- django中提供功能列举&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 请求处理机制不同，django是通过传参的形式，flask是通过上下文管理的方式实现。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2.wsgi&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;django和flask内部都没有实现socket，而是wsgi实现。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wsgi是web服务网管接口，他是一个协议，实现它的协议的有：wsgiref/werkzurg/uwsgi&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# django之前&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; wsgiref.simple_server &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; make_server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(environ, start_response)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    start_response(&lt;span class=&quot;string&quot;&gt;&#39;200 OK&#39;&lt;/span&gt;, [(&lt;span class=&quot;string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;text/html&#39;&lt;/span&gt;)])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [bytes(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;h1&amp;gt;Hello, web!&amp;lt;/h1&amp;gt;&#39;&lt;/span&gt;, encoding=&lt;span class=&quot;string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;), ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    httpd = make_server(&lt;span class=&quot;string&quot;&gt;&#39;127.0.0.1&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8000&lt;/span&gt;, run)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    httpd.serve_forever()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# flask之前&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; werkzeug.serving &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; run_simple&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; werkzeug.wrappers &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; BaseResponse&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(environ, start_response)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;请求来了&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    response = BaseResponse(&lt;span class=&quot;string&quot;&gt;&#39;你好&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; response(environ, start_response)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    run_simple(&lt;span class=&quot;string&quot;&gt;&#39;127.0.0.1&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5000&lt;/span&gt;, func)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="flask" scheme="https://pl1649947109.github.io/pl1649947109/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>第八部分——drf、flask、爬虫、Git、linux、其他、项目</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/22/%E5%B0%8F%E7%BB%BF%E6%9C%AC/%E7%AC%AC%E5%85%AB%E9%83%A8%E5%88%86%E2%80%94%E2%80%94drf%E3%80%81flask%E3%80%81%E7%88%AC%E8%99%AB%E3%80%81Git%E3%80%81linux%E3%80%81%E5%85%B6%E4%BB%96%E3%80%81%E9%A1%B9%E7%9B%AE/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/22/小绿本/第八部分——drf、flask、爬虫、Git、linux、其他、项目/</id>
    <published>2019-11-22T12:00:00.000Z</published>
    <updated>2019-11-23T14:09:06.670Z</updated>
    
    <content type="html"><![CDATA[<h3 id="drf"><a href="#drf" class="headerlink" title="drf"></a>drf</h3><h4 id="1-接口的幂等性是什么意思？"><a href="#1-接口的幂等性是什么意思？" class="headerlink" title="1.接口的幂等性是什么意思？"></a>1.接口的幂等性是什么意思？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&apos;一个接口通过1次相同的访问，再对该接口进行N次相同的访问时，对资源不造影响就认为接口具有幂等性。&apos;</span><br><span class="line">    GET，  #第一次获取结果、第二次也是获取结果对资源都不会造成影响，幂等。</span><br><span class="line">    POST， #第一次新增数据，第二次也会再次新增，非幂等。</span><br><span class="line">    PUT，  #第一次更新数据，第二次不会再次更新，幂等。</span><br><span class="line">    PATCH，#第一次更新数据，第二次不会再次更新，幂等。</span><br><span class="line">    DELTE，#第一次删除数据，第二次不在再删除，幂等。</span><br></pre></td></tr></table></figure><h3 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h3><h4 id="1-Flask框架依赖组件"><a href="#1-Flask框架依赖组件" class="headerlink" title="1.Flask框架依赖组件"></a>1.Flask框架依赖组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 依赖jinja2模板引擎</span><br><span class="line"># 依赖werkzurg协议</span><br></pre></td></tr></table></figure><h4 id="2-Flask蓝图的作用"><a href="#2-Flask蓝图的作用" class="headerlink" title="2.Flask蓝图的作用"></a>2.Flask蓝图的作用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># blueprint把实现不同功能的module分开.也就是把一个大的App分割成各自实现不同功能的module.</span><br><span class="line"># 在一个blueprint中可以调用另一个blueprint的视图函数, 但要加相应的blueprint名.</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="3-列举使用的Flask第三方组件？"><a href="#3-列举使用的Flask第三方组件？" class="headerlink" title="3.列举使用的Flask第三方组件？"></a>3.列举使用的Flask第三方组件？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Flask组件</span><br><span class="line">    flask-session  session放在redis</span><br><span class="line">    flask-SQLAlchemy 如django里的ORM操作</span><br><span class="line">    flask-migrate  数据库迁移</span><br><span class="line">    flask-script  自定义命令</span><br><span class="line">    blinker  信号-触发信号</span><br><span class="line"># 第三方组件</span><br><span class="line">    Wtforms 快速创建前端标签、文本校验</span><br><span class="line">    dbutile     创建数据库连接池</span><br><span class="line">    gevnet-websocket 实现websocket</span><br><span class="line"># 自定义Flask组件</span><br><span class="line">    自定义auth认证 </span><br><span class="line">    参考flask-login组件</span><br></pre></td></tr></table></figure><h4 id="4-简述Flask上下文管理流程"><a href="#4-简述Flask上下文管理流程" class="headerlink" title="4.简述Flask上下文管理流程?"></a>4.简述Flask上下文管理流程?</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># a、简单来说，falsk上下文管理可以分为三个阶段：</span><br><span class="line">　　1、&apos;请求进来时&apos;：将请求相关的数据放入上下问管理中</span><br><span class="line">　　2、&apos;在视图函数中&apos;：要去上下文管理中取值</span><br><span class="line">　　3、&apos;请求响应&apos;：要将上下文管理中的数据清除</span><br><span class="line"># b、详细点来说：</span><br><span class="line">　　1、&apos;请求刚进来&apos;：</span><br><span class="line">        将request，session封装在RequestContext类中</span><br><span class="line">        app，g封装在AppContext类中</span><br><span class="line">        并通过LocalStack将requestcontext和appcontext放入Local类中</span><br><span class="line">　　2、&apos;视图函数中&apos;：</span><br><span class="line">        通过localproxy---&gt;偏函数---&gt;localstack---&gt;local取值</span><br><span class="line">　　3、&apos;请求响应时&apos;：</span><br><span class="line">        先执行save.session()再各自执行pop(),将local中的数据清除</span><br></pre></td></tr></table></figure><h4 id="5-Flask中的g的作用？"><a href="#5-Flask中的g的作用？" class="headerlink" title="5.Flask中的g的作用？"></a>5.Flask中的g的作用？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># g是贯穿于一次请求的全局变量，当请求进来将g和current_app封装为一个APPContext类，</span><br><span class="line"># 再通过LocalStack将Appcontext放入Local中，取值时通过偏函数在LocalStack、local中取值；</span><br><span class="line"># 响应时将local中的g数据删除：</span><br></pre></td></tr></table></figure><h4 id="6-Flask中上下文管理主要涉及到了那些相关的类？并描述类主要作用？"><a href="#6-Flask中上下文管理主要涉及到了那些相关的类？并描述类主要作用？" class="headerlink" title="6.Flask中上下文管理主要涉及到了那些相关的类？并描述类主要作用？"></a>6.Flask中上下文管理主要涉及到了那些相关的类？并描述类主要作用？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RequestContext  #封装进来的请求（赋值给ctx）</span><br><span class="line">AppContext      #封装app_ctx</span><br><span class="line">LocalStack      #将local对象中的数据维护成一个栈（先进后出）</span><br><span class="line">Local           #保存请求上下文对象和app上下文对象</span><br></pre></td></tr></table></figure><h4 id="7-为什么要Flask把Local对象中的的值stack-维护成一个列表？"><a href="#7-为什么要Flask把Local对象中的的值stack-维护成一个列表？" class="headerlink" title="7.为什么要Flask把Local对象中的的值stack 维护成一个列表？"></a>7.为什么要Flask把Local对象中的的值stack 维护成一个列表？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 因为通过维护成列表，可以实现一个栈的数据结构，进栈出栈时只取一个数据，巧妙的简化了问题。</span><br><span class="line"># 还有，在多app应用时，可以实现数据隔离；列表里不会加数据，而是会生成一个新的列表</span><br><span class="line"># local是一个字典，字典里key（stack）是唯一标识，value是一个列表</span><br></pre></td></tr></table></figure><h4 id="8-Flask中多app应用是怎么完成？"><a href="#8-Flask中多app应用是怎么完成？" class="headerlink" title="8.Flask中多app应用是怎么完成？"></a>8.Flask中多app应用是怎么完成？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">请求进来时，可以根据URL的不同，交给不同的APP处理。蓝图也可以实现。</span><br><span class="line">    #app1 = Flask(&apos;app01&apos;)</span><br><span class="line">    #app2 = Flask(&apos;app02&apos;)</span><br><span class="line">    #@app1.route(&apos;/index&apos;)</span><br><span class="line">    #@app2.route(&apos;/index2&apos;)</span><br><span class="line">源码中在DispatcherMiddleware类里调用app2.__call__，</span><br><span class="line">原理其实就是URL分割，然后将请求分发给指定的app。</span><br><span class="line">之后app也按单app的流程走。就是从app.__call__走。</span><br></pre></td></tr></table></figure><h4 id="9-解释Flask框架中的Local对象和threading-local对象的区别？"><a href="#9-解释Flask框架中的Local对象和threading-local对象的区别？" class="headerlink" title="9.解释Flask框架中的Local对象和threading.local对象的区别？"></a>9.解释Flask框架中的Local对象和threading.local对象的区别？</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># a.threading.local</span></span><br><span class="line">作用：为每个线程开辟一块空间进行数据存储(数据隔离)。</span><br><span class="line"></span><br><span class="line">问题：自己通过字典创建一个类似于threading.local的东西。</span><br><span class="line">storage = &#123;</span><br><span class="line">   <span class="number">4740</span>: &#123;val: <span class="number">0</span>&#125;,</span><br><span class="line">   <span class="number">4732</span>: &#123;val: <span class="number">1</span>&#125;,</span><br><span class="line">   <span class="number">4731</span>: &#123;val: <span class="number">3</span>&#125;,</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># b.自定义Local对象</span></span><br><span class="line">作用：为每个线程(协程)开辟一块空间进行数据存储(数据隔离)。</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span><span class="params">(object)</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">      object.__setattr__(self, <span class="string">'storage'</span>, &#123;&#125;)</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, k, v)</span>:</span></span><br><span class="line">      ident = get_ident()</span><br><span class="line">      <span class="keyword">if</span> ident <span class="keyword">in</span> self.storage:</span><br><span class="line">         self.storage[ident][k] = v</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">         self.storage[ident] = &#123;k: v&#125;</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, k)</span>:</span></span><br><span class="line">      ident = get_ident()</span><br><span class="line">      <span class="keyword">return</span> self.storage[ident][k]</span><br><span class="line">obj = Local()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(arg)</span>:</span></span><br><span class="line">   obj.val = arg</span><br><span class="line">   obj.xxx = arg</span><br><span class="line">   print(obj.val)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">   t = Thread(target=task, args=(i,))</span><br><span class="line">   t.start()</span><br></pre></td></tr></table></figure><h4 id="10-Flask中-blinker-是什么？"><a href="#10-Flask中-blinker-是什么？" class="headerlink" title="10.Flask中 blinker 是什么？"></a>10.Flask中 blinker 是什么？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># flask中的信号blinker</span><br><span class="line">信号主要是让开发者可是在flask请求过程中定制一些行为。</span><br><span class="line">或者说flask在列表里面预留了几个空列表，在里面存东西。</span><br><span class="line">简言之，信号允许某个&apos;发送者&apos;通知&apos;接收者&apos;有事情发生了</span><br><span class="line">@ before_request有返回值，blinker没有返回值</span><br><span class="line"></span><br><span class="line"># 10个信号</span><br><span class="line"></span><br><span class="line">request_started = _signals.signal(&apos;request-started&apos;) #请求到来前执行</span><br><span class="line"></span><br><span class="line">request_finished = _signals.signal(&apos;request-finished&apos;) #请求结束后执行</span><br><span class="line"></span><br><span class="line">before_render_template = _signals.signal(&apos;before-render-template&apos;)#模板渲染前执行</span><br><span class="line"></span><br><span class="line">template_rendered = _signals.signal(&apos;template-rendered&apos;)#模板渲染后执行</span><br><span class="line"></span><br><span class="line">got_request_exception = _signals.signal(&apos;got-request-exception&apos;) #请求执行出现异常时执行</span><br><span class="line"></span><br><span class="line">request_tearing_down = _signals.signal(&apos;request-tearing-down&apos;)#请求执行完毕后自动执行（无论成功与否）</span><br><span class="line"></span><br><span class="line">appcontext_tearing_down = _signals.signal(&apos;appcontext-tearing-down&apos;)# 请求上下文执行完毕后自动执行（无论成功与否）</span><br><span class="line"></span><br><span class="line">appcontext_pushed = _signals.signal(&apos;appcontext-pushed&apos;) #请求app上下文push时执行</span><br><span class="line"></span><br><span class="line">appcontext_popped = _signals.signal(&apos;appcontext-popped&apos;) #请求上下文pop时执行</span><br><span class="line"></span><br><span class="line">message_flashed = _signals.signal(&apos;message-flashed&apos;)#调用flask在其中添加数据时，自动触发</span><br></pre></td></tr></table></figure><h3 id="爬虫与celery"><a href="#爬虫与celery" class="headerlink" title="爬虫与celery"></a>爬虫与celery</h3><h4 id="1-爬虫中已经执行过的任务，如何不再执行？"><a href="#1-爬虫中已经执行过的任务，如何不再执行？" class="headerlink" title="1.爬虫中已经执行过的任务，如何不再执行？"></a>1.爬虫中已经执行过的任务，如何不再执行？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-防爬虫策略？"><a href="#2-防爬虫策略？" class="headerlink" title="2.防爬虫策略？"></a>2.防爬虫策略？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-爬虫并发量？"><a href="#3-爬虫并发量？" class="headerlink" title="3.爬虫并发量？"></a>3.爬虫并发量？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-爬虫去重-布隆过滤器？"><a href="#4-爬虫去重-布隆过滤器？" class="headerlink" title="4.爬虫去重 布隆过滤器？"></a>4.爬虫去重 布隆过滤器？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-简述-requests模块的作用及基本使用？"><a href="#5-简述-requests模块的作用及基本使用？" class="headerlink" title="5.简述 requests模块的作用及基本使用？"></a>5.简述 requests模块的作用及基本使用？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 作用：</span><br><span class="line">使用requests可以模拟浏览器的请求</span><br><span class="line"># 常用参数：</span><br><span class="line">   url、headers、cookies、data</span><br><span class="line">   json、params、proxy</span><br><span class="line"># 常用返回值：</span><br><span class="line">   content</span><br><span class="line">   iter_content</span><br><span class="line">   text </span><br><span class="line">   encoding=&quot;utf-8&quot;</span><br><span class="line">   cookie.get_dict()</span><br></pre></td></tr></table></figure><h4 id="6-简述-beautifulsoup模块的作用及基本使用？"><a href="#6-简述-beautifulsoup模块的作用及基本使用？" class="headerlink" title="6.简述 beautifulsoup模块的作用及基本使用？"></a>6.简述 beautifulsoup模块的作用及基本使用？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># BeautifulSoup</span><br><span class="line">用于从HTML或XML文件中提取、过滤想要的数据形式</span><br><span class="line">#常用方法</span><br><span class="line">解析：html.parser 或者 lxml（需要下载安装） </span><br><span class="line">   find、find_all、text、attrs、get</span><br></pre></td></tr></table></figure><h4 id="7-简述-seleninu模块的作用及基本使用"><a href="#7-简述-seleninu模块的作用及基本使用" class="headerlink" title="7.简述 seleninu模块的作用及基本使用?"></a>7.简述 seleninu模块的作用及基本使用?</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Selenium是一个用于Web应用程序测试的工具，</span><br><span class="line">他的测试直接运行在浏览器上，模拟真实用户，按照代码做出点击、输入、打开等操作</span><br><span class="line"></span><br><span class="line">爬虫中使用他是为了解决requests无法解决javascript动态问题</span><br></pre></td></tr></table></figure><h4 id="8-scrapy框架中各组件的工作流程？"><a href="#8-scrapy框架中各组件的工作流程？" class="headerlink" title="8.scrapy框架中各组件的工作流程？"></a>8.scrapy框架中各组件的工作流程？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#1、生成初始的Requests来爬取第一个URLS，并且标识一个回调函数</span><br><span class="line">第一个请求定义在start_requests()方法内默认从start_urls列表中获得url地址来生成Request请求，</span><br><span class="line">默认的回调函数是parse方法。回调函数在下载完成返回response时自动触发</span><br><span class="line">#2、在回调函数中，解析response并且返回值</span><br><span class="line">返回值可以4种：</span><br><span class="line">    a、包含解析数据的字典</span><br><span class="line">    b、Item对象</span><br><span class="line">    c、新的Request对象（新的Requests也需要指定一个回调函数）</span><br><span class="line">    d、或者是可迭代对象（包含Items或Request）</span><br><span class="line">#3、在回调函数中解析页面内容</span><br><span class="line">通常使用Scrapy自带的Selectors，但很明显你也可以使用Beutifulsoup，lxml或其他你爱用啥用啥。</span><br><span class="line">#4、最后，针对返回的Items对象将会被持久化到数据库</span><br><span class="line">    通过Item Pipeline组件存到数据库</span><br><span class="line">    或者导出到不同的文件（通过Feed exports）</span><br><span class="line">http://www.cnblogs.com/wupeiqi/articles/6229292.html</span><br></pre></td></tr></table></figure><h4 id="9-scrapy框架中如何实现大文件的下载？"><a href="#9-scrapy框架中如何实现大文件的下载？" class="headerlink" title="9.scrapy框架中如何实现大文件的下载？"></a>9.scrapy框架中如何实现大文件的下载？</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> twisted.web.client <span class="keyword">import</span> Agent, getPage, ResponseDone, PotentialDataLoss</span><br><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> defer, reactor, protocol</span><br><span class="line"><span class="keyword">from</span> twisted.web._newclient <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ResponseReader</span><span class="params">(protocol.Protocol)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, finished, txresponse, file_name)</span>:</span></span><br><span class="line">        self._finished = finished</span><br><span class="line">        self._txresponse = txresponse</span><br><span class="line">        self._bytes_received = <span class="number">0</span></span><br><span class="line">        self.f = open(file_name, mode=<span class="string">'wb'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dataReceived</span><span class="params">(self, bodyBytes)</span>:</span></span><br><span class="line">        self._bytes_received += len(bodyBytes)</span><br><span class="line">        <span class="comment"># 一点一点的下载</span></span><br><span class="line">        self.f.write(bodyBytes)</span><br><span class="line">        self.f.flush()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connectionLost</span><span class="params">(self, reason)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._finished.called:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> reason.check(ResponseDone):</span><br><span class="line">            <span class="comment"># 下载完成</span></span><br><span class="line">            self._finished.callback((self._txresponse, <span class="string">'success'</span>))</span><br><span class="line">        <span class="keyword">elif</span> reason.check(PotentialDataLoss):</span><br><span class="line">            <span class="comment"># 下载部分</span></span><br><span class="line">            self._finished.callback((self._txresponse, <span class="string">'partial'</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 下载异常</span></span><br><span class="line">            self._finished.errback(reason)</span><br><span class="line">        self.f.close()</span><br></pre></td></tr></table></figure><h4 id="10-scrapy中的pipelines工作原理？"><a href="#10-scrapy中的pipelines工作原理？" class="headerlink" title="10.scrapy中的pipelines工作原理？"></a>10.scrapy中的pipelines工作原理？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Scrapy 提供了 pipeline 模块来执行保存数据的操作。</span><br><span class="line">在创建的 Scrapy 项目中自动创建了一个 pipeline.py 文件，同时创建了一个默认的 Pipeline 类。</span><br><span class="line">我们可以根据需要自定义 Pipeline 类，然后在 settings.py 文件中进行配置即可</span><br></pre></td></tr></table></figure><h4 id="11-celery是什么以及应用场景？"><a href="#11-celery是什么以及应用场景？" class="headerlink" title="11.celery是什么以及应用场景？"></a>11.celery是什么以及应用场景？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Celery是由Python开发的一个简单、灵活、可靠的处理大量任务的分发系统，</span><br><span class="line"># 它不仅支持实时处理也支持任务调度。</span><br></pre></td></tr></table></figure><h4 id="12-celery如何实现定时任务？"><a href="#12-celery如何实现定时任务？" class="headerlink" title="12.celery如何实现定时任务？"></a>12.celery如何实现定时任务？</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># celery实现定时任务</span></span><br><span class="line">启用Celery的定时任务需要设置CELERYBEAT_SCHEDULE 。 </span><br><span class="line">CELERYBEAT_SCHEDULE=<span class="string">'djcelery.schedulers.DatabaseScheduler'</span><span class="comment">#定时任务</span></span><br><span class="line"><span class="string">'创建定时任务'</span></span><br><span class="line"><span class="comment"># 通过配置CELERYBEAT_SCHEDULE：</span></span><br><span class="line"><span class="comment">#每30秒调用task.add</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line">CELERYBEAT_SCHEDULE = &#123;</span><br><span class="line">    <span class="string">'add-every-30-seconds'</span>: &#123;</span><br><span class="line">        <span class="string">'task'</span>: <span class="string">'tasks.add'</span>,</span><br><span class="line">        <span class="string">'schedule'</span>: timedelta(seconds=<span class="number">30</span>),</span><br><span class="line">        <span class="string">'args'</span>: (<span class="number">16</span>, <span class="number">16</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13-简述-celery多任务结构目录"><a href="#13-简述-celery多任务结构目录" class="headerlink" title="13.简述 celery多任务结构目录"></a>13.简述 celery多任务结构目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pro_cel</span><br><span class="line">    ├── celery_tasks     # celery相关文件夹</span><br><span class="line">    │   ├── celery.py    # celery连接和配置相关文件</span><br><span class="line">    │   └── tasks.py     #  所有任务函数</span><br><span class="line">    ├── check_result.py  # 检查结果</span><br><span class="line">    └── send_task.py     # 触发任务</span><br></pre></td></tr></table></figure><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><h4 id="1-git如何解决冲突？"><a href="#1-git如何解决冲突？" class="headerlink" title="1.git如何解决冲突？"></a>1.git如何解决冲突？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-git如何做review？"><a href="#2-git如何做review？" class="headerlink" title="2.git如何做review？"></a>2.git如何做review？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、你们公司的代码review分支怎么做？谁来做？</span><br><span class="line">答：组长创建review分支，我们小功能开发完之后，合并到review分支交给老大（小组长）来看，</span><br><span class="line">1.1、你组长不开发代码吗？</span><br><span class="line">        他开发代码，但是它只开发核心的东西，任务比较少。</span><br><span class="line">        或者抽出时间，我们一起做这个事情</span><br><span class="line">2、你们公司协同开发是怎么协同开发的？</span><br><span class="line">每个人都有自己的分支，阶段性代码完成之后，合并到review，然后交给老大看</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/june_y/article/details/50817993" target="_blank" rel="noopener">https://blog.csdn.net/june_y/article/details/50817993</a></p><h4 id="3-git-reabase的作用？"><a href="#3-git-reabase的作用？" class="headerlink" title="3.git reabase的作用？"></a>3.git reabase的作用？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">merge：</span><br><span class="line">会将不同分支的提交合并成一个新的节点，之前的提交分开显示，</span><br><span class="line">注重历史信息、可以看出每个分支信息，基于时间点,遇到冲突,手动解决,再次提交</span><br><span class="line">rebase：</span><br><span class="line">将两个分支的提交结果融合成线性，不会产生新的节点;</span><br><span class="line">注重开发过程，遇到冲突，手动解决，继续操作</span><br></pre></td></tr></table></figure><h4 id="4-git常用的命令"><a href="#4-git常用的命令" class="headerlink" title="4.git常用的命令"></a>4.git常用的命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># git init</span><br><span class="line">    初始化，当前所在的文件夹可以被管理且以后版本相关的数据都会存储到.git文件中</span><br><span class="line"># git status</span><br><span class="line">    查看当前文件夹以及子目录中文件是否发生变化：</span><br><span class="line">    内容修改/新增文件/删除，已经变化的文件会变成红色，已经add的文件会变成绿色</span><br><span class="line"># git add .</span><br><span class="line">    给发生变化的文件（贴上一个标签）或 将发生变化的文件放到某个地方，</span><br><span class="line">    只写一个句点符就代表把git status中红色的文件全部打上标签</span><br><span class="line"># git commit -m</span><br><span class="line">    新增用户登录认证功能以及xxx功能将“绿色”文件添加到版本中</span><br><span class="line"># git log</span><br><span class="line">    查看所有版本提交记录，可以获取版本号</span><br><span class="line"># git reset --hard 版本号   </span><br><span class="line">    将最新的版本回退到更早的版本</span><br><span class="line"># git reflog   </span><br><span class="line">    回退到之前版本后悔了，再更新到最新或者最新之前的版本</span><br><span class="line"># git reset --hard 版本 回退</span><br></pre></td></tr></table></figure><h4 id="5-公司如何基于git做协同开发？"><a href="#5-公司如何基于git做协同开发？" class="headerlink" title="5.公司如何基于git做协同开发？"></a>5.公司如何基于git做协同开发？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 大致工作流程</span><br><span class="line">公司：</span><br><span class="line">    下载代码</span><br><span class="line">        git clone https://gitee.com/wupeiqi/xianglong.git</span><br><span class="line">        或创建目录 </span><br><span class="line">        cd 目录 </span><br><span class="line">        git init </span><br><span class="line">        git remote add origin https://gitee.com/wupeiqi/xianglong.git</span><br><span class="line">        git pull origin maste </span><br><span class="line">    创建dev分支</span><br><span class="line">        git checkout dev </span><br><span class="line">        git pull origin dev </span><br><span class="line">        继续写代码</span><br><span class="line">        git add . </span><br><span class="line">        git commit -m &apos;提交记录&apos;</span><br><span class="line">        git push origin dev </span><br><span class="line">回家： </span><br><span class="line">    拉代码：</span><br><span class="line">        git pull origin dev </span><br><span class="line">    继续写：</span><br><span class="line">        继续写代码</span><br><span class="line">        git add . </span><br><span class="line">        git commit -m &apos;提交记录&apos;</span><br><span class="line">        git push origin dev</span><br></pre></td></tr></table></figure><h4 id="6-如何为github开源代码贡献自己的代码"><a href="#6-如何为github开源代码贡献自己的代码" class="headerlink" title="6.如何为github开源代码贡献自己的代码"></a>6.如何为github开源代码贡献自己的代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、fork需要协作项目</span><br><span class="line">2、克隆/关联fork的项目到本地</span><br><span class="line">3、新建分支（branch）并检出（checkout）新分支</span><br><span class="line">4、在新分支上完成代码开发</span><br><span class="line">5、开发完成后将你的代码合并到master分支</span><br><span class="line">6、添加原作者的仓库地址作为一个新的仓库地址</span><br><span class="line">7、合并原作者的master分支到你自己的master分支,用于和作者仓库代码同步</span><br><span class="line">8、push你的本地仓库到GitHub</span><br><span class="line">9、在Github上提交 pull requests</span><br><span class="line">10、等待管理员（你需要贡献的开源项目管理员）处理</span><br></pre></td></tr></table></figure><h4 id="7-什么是敏捷开发"><a href="#7-什么是敏捷开发" class="headerlink" title="7.什么是敏捷开发"></a>7.什么是敏捷开发</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&apos;敏捷开发&apos;：是一种以人为核心、迭代、循序渐进的开发方式。</span><br><span class="line"></span><br><span class="line">它并不是一门技术，而是一种开发方式，也就是一种软件开发的流程。</span><br><span class="line">它会指导我们用规定的环节去一步一步完成项目的开发。</span><br><span class="line">因为它采用的是迭代式开发，所以这种开发方式的主要驱动核心是人</span><br></pre></td></tr></table></figure><h3 id="linux部分"><a href="#linux部分" class="headerlink" title="linux部分"></a>linux部分</h3><h4 id="1-讲讲储常用的linux-git的命令和作用？"><a href="#1-讲讲储常用的linux-git的命令和作用？" class="headerlink" title="1.讲讲储常用的linux/git的命令和作用？"></a>1.讲讲储常用的linux/git的命令和作用？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-什么是cdn？"><a href="#2-什么是cdn？" class="headerlink" title="2.什么是cdn？"></a>2.什么是cdn？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">目的是使用户可以就近到服务器取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度。</span><br><span class="line"></span><br><span class="line">cdn 即内容分发网络</span><br></pre></td></tr></table></figure><h4 id="3-LVS是什么及作用？"><a href="#3-LVS是什么及作用？" class="headerlink" title="3.LVS是什么及作用？"></a>3.LVS是什么及作用？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LVS ：Linux虚拟服务器</span><br><span class="line">作用：LVS主要用于多服务器的负载均衡。</span><br><span class="line">它工作在网络层，可以实现高性能，高可用的服务器集群技术。它廉价，可把许多低性能的服务器组合在一起形成一个超级服务器。它易用，配置非常简单，且有多种负载均衡的方法。它稳定可靠，即使在集群的服务器中某台服务器无法正常工作，也不影响整体效果。另外可扩展性也非常好。</span><br></pre></td></tr></table></figure><h4 id="4-Nginx是什么及作用？"><a href="#4-Nginx是什么及作用？" class="headerlink" title="4.Nginx是什么及作用？"></a>4.Nginx是什么及作用？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-keepalived是什么及作用"><a href="#5-keepalived是什么及作用" class="headerlink" title="5.keepalived是什么及作用?"></a>5.keepalived是什么及作用?</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-haproxy是什么以及作用？"><a href="#6-haproxy是什么以及作用？" class="headerlink" title="6.haproxy是什么以及作用？"></a>6.haproxy是什么以及作用？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="7-什么是负载均衡？"><a href="#7-什么是负载均衡？" class="headerlink" title="7.什么是负载均衡？"></a>7.什么是负载均衡？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-什么是rpc及应用场景？"><a href="#8-什么是rpc及应用场景？" class="headerlink" title="8.什么是rpc及应用场景？"></a>8.什么是rpc及应用场景？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="1-微服务的问题"><a href="#1-微服务的问题" class="headerlink" title="1.微服务的问题"></a>1.微服务的问题</h4><p>怎么理解微服务，服务如何划分，可以从哪几个方面去划分，为什么这样划分，微服务带来了哪些好处，哪些坏处，如何看待这个问题？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>你对devops的了解？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-如何理解网关，网关带来的好处和坏处，如何解决"><a href="#2-如何理解网关，网关带来的好处和坏处，如何解决" class="headerlink" title="2.如何理解网关，网关带来的好处和坏处，如何解决"></a>2.如何理解网关，网关带来的好处和坏处，如何解决</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-设计模式"><a href="#3-设计模式" class="headerlink" title="3.设计模式"></a>3.设计模式</h4><p><strong>掌握哪些设计模式，常用哪些，项目中如何使用的，为什么用这个，不用那个？手写一个线程安全的单例模式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-讲一讲对Redis-的了解，项目中如何使用的，哪个地方使用的，为什么要使用？"><a href="#4-讲一讲对Redis-的了解，项目中如何使用的，哪个地方使用的，为什么要使用？" class="headerlink" title="4.讲一讲对Redis 的了解，项目中如何使用的，哪个地方使用的，为什么要使用？"></a>4.讲一讲对Redis 的了解，项目中如何使用的，哪个地方使用的，为什么要使用？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-哨兵机制、Redis-两种备份方式的区别，项目中用的哪种，为什么？"><a href="#5-哨兵机制、Redis-两种备份方式的区别，项目中用的哪种，为什么？" class="headerlink" title="5.哨兵机制、Redis 两种备份方式的区别，项目中用的哪种，为什么？"></a>5.哨兵机制、Redis 两种备份方式的区别，项目中用的哪种，为什么？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-讲一讲对分布式锁的了解"><a href="#6-讲一讲对分布式锁的了解" class="headerlink" title="6.讲一讲对分布式锁的了解"></a>6.讲一讲对分布式锁的了解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="7-项目中系统监控怎么做的？"><a href="#7-项目中系统监控怎么做的？" class="headerlink" title="7.项目中系统监控怎么做的？"></a>7.项目中系统监控怎么做的？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-Kafka问题"><a href="#8-Kafka问题" class="headerlink" title="8.Kafka问题"></a>8.Kafka问题</h4><p>Kafka 如何保证消息顺序消费、在consumer group 中新增一个consumer 会提高消费消息的速度吗、那如果我想提高消息消费的速度，我要怎么办？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="9-你看过flask的源码吗？你是如何理解开源的？"><a href="#9-你看过flask的源码吗？你是如何理解开源的？" class="headerlink" title="9.你看过flask的源码吗？你是如何理解开源的？"></a>9.你看过flask的源码吗？你是如何理解开源的？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="10-B-Tree和B-Tree的区别？"><a href="#10-B-Tree和B-Tree的区别？" class="headerlink" title="10.B Tree和B+ Tree的区别？"></a>10.B Tree和B+ Tree的区别？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.B树中同一键值不会出现多次，并且有可能出现在叶结点，也有可能出现在非叶结点中。</span><br><span class="line"></span><br><span class="line">而B+树的键一定会出现在叶结点中，并有可能在非叶结点中重复出现，以维持B+树的平衡。</span><br><span class="line">2.因为B树键位置不定，且在整个树结构中只出现一次，</span><br></pre></td></tr></table></figure><h4 id="11-解释-PV、UV-的含义？"><a href="#11-解释-PV、UV-的含义？" class="headerlink" title="11.解释 PV、UV 的含义？"></a>11.解释 PV、UV 的含义？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PV访问量（Page View），即页面访问量，每打开一次页面PV计数+1，刷新页面也是。</span><br><span class="line">UV访问数（Unique Visitor）指独立访客访问数，一台电脑终端为一个访客。</span><br></pre></td></tr></table></figure><h4 id="12-解释-QPS的含义？"><a href="#12-解释-QPS的含义？" class="headerlink" title="12.解释 QPS的含义？"></a>12.解释 QPS的含义？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;QPS(Query Per Second)&apos;</span><br><span class="line">每秒查询率，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准</span><br></pre></td></tr></table></figure><h4 id="13-什么是反向代理？"><a href="#13-什么是反向代理？" class="headerlink" title="13.什么是反向代理？"></a>13.什么是反向代理？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">正向代理代理客户端(客户端找哟个代理去访问服务器，服务器不知道你的真实IP)</span><br><span class="line">反向代理代理服务器(服务器找一个代理给你响应，你不知道服务器的真实IP)</span><br></pre></td></tr></table></figure><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><h4 id="1-聊项目"><a href="#1-聊项目" class="headerlink" title="1.聊项目"></a>1.聊项目</h4><p>画项目架构图，画一个用户从发起请求到接收到响应，中间经过哪些服务，每个服务做什么事情的流程图，讲数据库设计具体到部分表中有哪些字段？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-crm中权限组件的实现流程？"><a href="#2-crm中权限组件的实现流程？" class="headerlink" title="2.crm中权限组件的实现流程？"></a>2.crm中权限组件的实现流程？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-权限组件的实现流程？"><a href="#3-权限组件的实现流程？" class="headerlink" title="3.权限组件的实现流程？"></a>3.权限组件的实现流程？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-如何实现粒度控制到按钮？"><a href="#4-如何实现粒度控制到按钮？" class="headerlink" title="4.如何实现粒度控制到按钮？"></a>4.如何实现粒度控制到按钮？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-权限信息为什么放在session中？有什么不好？"><a href="#5-权限信息为什么放在session中？有什么不好？" class="headerlink" title="5.权限信息为什么放在session中？有什么不好？"></a>5.权限信息为什么放在session中？有什么不好？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;drf&quot;&gt;&lt;a href=&quot;#drf&quot; class=&quot;headerlink&quot; title=&quot;drf&quot;&gt;&lt;/a&gt;drf&lt;/h3&gt;&lt;h4 id=&quot;1-接口的幂等性是什么意思？&quot;&gt;&lt;a href=&quot;#1-接口的幂等性是什么意思？&quot; class=&quot;headerlink&quot; title=&quot;1.接口的幂等性是什么意思？&quot;&gt;&lt;/a&gt;1.接口的幂等性是什么意思？&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;一个接口通过1次相同的访问，再对该接口进行N次相同的访问时，对资源不造影响就认为接口具有幂等性。&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    GET，  #第一次获取结果、第二次也是获取结果对资源都不会造成影响，幂等。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    POST， #第一次新增数据，第二次也会再次新增，非幂等。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PUT，  #第一次更新数据，第二次不会再次更新，幂等。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PATCH，#第一次更新数据，第二次不会再次更新，幂等。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DELTE，#第一次删除数据，第二次不在再删除，幂等。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;flask&quot;&gt;&lt;a href=&quot;#flask&quot; class=&quot;headerlink&quot; title=&quot;flask&quot;&gt;&lt;/a&gt;flask&lt;/h3&gt;&lt;h4 id=&quot;1-Flask框架依赖组件&quot;&gt;&lt;a href=&quot;#1-Flask框架依赖组件&quot; class=&quot;headerlink&quot; title=&quot;1.Flask框架依赖组件&quot;&gt;&lt;/a&gt;1.Flask框架依赖组件&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 依赖jinja2模板引擎&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 依赖werkzurg协议&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;2-Flask蓝图的作用&quot;&gt;&lt;a href=&quot;#2-Flask蓝图的作用&quot; class=&quot;headerlink&quot; title=&quot;2.Flask蓝图的作用&quot;&gt;&lt;/a&gt;2.Flask蓝图的作用&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# blueprint把实现不同功能的module分开.也就是把一个大的App分割成各自实现不同功能的module.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 在一个blueprint中可以调用另一个blueprint的视图函数, 但要加相应的blueprint名.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="面试题" scheme="https://pl1649947109.github.io/pl1649947109/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>第三讲——flask所有的基础知识</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/21/%E4%B9%A6/flask/%E7%AC%AC%E4%B8%89%E8%AE%B2%E2%80%94%E2%80%94flask%E6%89%80%E6%9C%89%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/21/书/flask/第三讲——flask所有的基础知识/</id>
    <published>2019-11-21T12:00:00.000Z</published>
    <updated>2019-11-22T03:37:37.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内容回顾"><a href="#内容回顾" class="headerlink" title="内容回顾"></a>内容回顾</h2><p>1.什么是接口？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#两个方面</span></span><br><span class="line">- interface类型，Python没有，Java/C<span class="comment">#语言才有。用于约束实现了该接口的类中必须有某些指定方法。</span></span><br><span class="line">- api也可以成为一个接口。</span><br></pre></td></tr></table></figure><p>2.抽象类和抽象方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">他既具有约束的功能又具有提供子类继承方法的功能，Python中通过abc实现。</span><br></pre></td></tr></table></figure><p>3.重载和重写？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">重载就是根据方法中参数的不同调用不同的方法，实现不同的功能。</span><br><span class="line">重写就是方法对父类方法的重写。</span><br></pre></td></tr></table></figure><a id="more"></a><p>4.flask和django的区别？</p><p>5.什么是数据库链接池？以及作用？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据库连接池是创建一些和数据库的连接，共我们去调用，我们使用完之后再把该连接放回到数据库连接池中。</span><br><span class="line">在没有数据库连接池的时候，我们每操作一次数据库就建立一个连接，这样就大大降低了效率。或者我们使用同一个连接，这又会造成数据库压力。数据连接池就很好的解决了上面的问题</span><br></pre></td></tr></table></figure><p>6.sqlhelper</p><p>7.面向对象的上下文管理</p><p>8.上下文管理和SQLHelper</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlHelper</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.pool = PooledDB(</span><br><span class="line">            creator=pymysql,  <span class="comment"># 使用链接数据库的模块</span></span><br><span class="line">            maxconnections=<span class="number">6</span>,  <span class="comment"># 连接池允许的最大连接数，0和None表示不限制连接数</span></span><br><span class="line">            mincached=<span class="number">2</span>,  <span class="comment"># 初始化时，链接池中至少创建的链接，0表示不创建</span></span><br><span class="line">            blocking=<span class="literal">True</span>,  <span class="comment"># 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错</span></span><br><span class="line">            ping=<span class="number">0</span>,</span><br><span class="line">            <span class="comment"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class="line">            host=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">            port=<span class="number">3306</span>,</span><br><span class="line">            user=<span class="string">'root'</span>,</span><br><span class="line">            password=<span class="string">'222'</span>,</span><br><span class="line">            database=<span class="string">'cmdb'</span>,</span><br><span class="line">            charset=<span class="string">'utf8'</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">        conn = self.pool.connection()</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        <span class="keyword">return</span> conn,cursor</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self,cursor,conn)</span>:</span></span><br><span class="line">        cursor.close()</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fetchall</span><span class="params">(self,sql, *args)</span>:</span></span><br><span class="line">        <span class="string">""" 获取所有数据 """</span></span><br><span class="line">        conn,cursor = self.open()</span><br><span class="line">        cursor.execute(sql, args)</span><br><span class="line">        result = cursor.fetchall()</span><br><span class="line">        self.close(conn,cursor)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fetchone</span><span class="params">(self,sql, *args)</span>:</span></span><br><span class="line">        <span class="string">""" 获取所有数据 """</span></span><br><span class="line">        conn, cursor = self.open()</span><br><span class="line">        cursor.execute(sql, args)</span><br><span class="line">        result = cursor.fetchone()</span><br><span class="line">        self.close(conn, cursor)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.open()[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        print(exc_type, exc_val, exc_tb)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db = SqlHelper()</span><br></pre></td></tr></table></figure><h2 id="今日概要"><a href="#今日概要" class="headerlink" title="今日概要"></a>今日概要</h2><ul><li>wsgi</li><li>创建flask对象<ul><li>模板</li><li>静态文件</li></ul></li><li>路由系统<ul><li>路由的应用：装饰器（推荐）、方法</li><li>动态路由</li></ul></li><li>视图<ul><li>FBV</li><li>CBV</li></ul></li><li>模板<ul><li>继承</li><li>include</li><li>自定义标签</li></ul></li><li>特殊装饰器<ul><li>before_request充当中间件角色</li></ul></li></ul><h2 id="今日详细"><a href="#今日详细" class="headerlink" title="今日详细"></a>今日详细</h2><h3 id="1-wsgi-找源码的流程"><a href="#1-wsgi-找源码的流程" class="headerlink" title="1.wsgi 找源码的流程"></a>1.wsgi 找源码的流程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line"><span class="keyword">from</span> werkzeug.wrappers <span class="keyword">import</span> BaseResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    print(<span class="string">'请求来了'</span>)</span><br><span class="line">    response = BaseResponse(<span class="string">'你好'</span>)</span><br><span class="line">    <span class="keyword">return</span> response(environ, start_response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run_simple(<span class="string">'127.0.0.1'</span>, <span class="number">5000</span>, func)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    1.程序启动，等待用户请求到来</span></span><br><span class="line"><span class="string">        app.run()</span></span><br><span class="line"><span class="string">    2.用户请求到来 app()    </span></span><br><span class="line"><span class="string">        app.__call__</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h3 id="2-flask对象"><a href="#2-flask对象" class="headerlink" title="2.flask对象"></a>2.flask对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,template_folder=<span class="string">'templates'</span>,static_folder=<span class="string">'static'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/static/xx/xx/mm.jpg"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 建议 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for('static',filename='xx/xx/mm.jpg')&#125;&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3.配置文件"></a>3.配置文件</h3><h4 id="3-1-基于全局变量"><a href="#3-1-基于全局变量" class="headerlink" title="3.1 基于全局变量"></a>3.1 基于全局变量</h4><p><img src="http://9017499461.linshutu.top/flask%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%85%A8%E5%B1%80.JPG" alt></p><h4 id="3-2-基于类的方式"><a href="#3-2-基于类的方式" class="headerlink" title="3.2 基于类的方式"></a>3.2 基于类的方式</h4><p><img src="http://9017499461.linshutu.top/flask%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%9F%BA%E4%BA%8E%E7%B1%BB.JPG" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">flask中的配置文件是一个flask.config.Config对象（继承字典）,默认配置为：</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'DEBUG'</span>:                                get_debug_flag(default=<span class="literal">False</span>),  是否开启Debug模式</span><br><span class="line">        <span class="string">'TESTING'</span>:                              <span class="literal">False</span>,                          是否开启测试模式</span><br><span class="line">        <span class="string">'PROPAGATE_EXCEPTIONS'</span>:                 <span class="literal">None</span>,                          </span><br><span class="line">        <span class="string">'PRESERVE_CONTEXT_ON_EXCEPTION'</span>:        <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'SECRET_KEY'</span>:                           <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'PERMANENT_SESSION_LIFETIME'</span>:           timedelta(days=<span class="number">31</span>),</span><br><span class="line">        <span class="string">'USE_X_SENDFILE'</span>:                       <span class="literal">False</span>,</span><br><span class="line">        <span class="string">'LOGGER_NAME'</span>:                          <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'LOGGER_HANDLER_POLICY'</span>:               <span class="string">'always'</span>,</span><br><span class="line">        <span class="string">'SERVER_NAME'</span>:                          <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'APPLICATION_ROOT'</span>:                     <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'SESSION_COOKIE_NAME'</span>:                  <span class="string">'session'</span>,</span><br><span class="line">        <span class="string">'SESSION_COOKIE_DOMAIN'</span>:                <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'SESSION_COOKIE_PATH'</span>:                  <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'SESSION_COOKIE_HTTPONLY'</span>:              <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'SESSION_COOKIE_SECURE'</span>:                <span class="literal">False</span>,</span><br><span class="line">        <span class="string">'SESSION_REFRESH_EACH_REQUEST'</span>:         <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'MAX_CONTENT_LENGTH'</span>:                   <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'SEND_FILE_MAX_AGE_DEFAULT'</span>:            timedelta(hours=<span class="number">12</span>),</span><br><span class="line">        <span class="string">'TRAP_BAD_REQUEST_ERRORS'</span>:              <span class="literal">False</span>,</span><br><span class="line">        <span class="string">'TRAP_HTTP_EXCEPTIONS'</span>:                 <span class="literal">False</span>,</span><br><span class="line">        <span class="string">'EXPLAIN_TEMPLATE_LOADING'</span>:             <span class="literal">False</span>,</span><br><span class="line">        <span class="string">'PREFERRED_URL_SCHEME'</span>:                 <span class="string">'http'</span>,</span><br><span class="line">        <span class="string">'JSON_AS_ASCII'</span>:                        <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'JSON_SORT_KEYS'</span>:                       <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'JSONIFY_PRETTYPRINT_REGULAR'</span>:          <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'JSONIFY_MIMETYPE'</span>:                     <span class="string">'application/json'</span>,</span><br><span class="line">        <span class="string">'TEMPLATES_AUTO_RELOAD'</span>:                <span class="literal">None</span>,</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">方式一：</span><br><span class="line">    app.config[<span class="string">'DEBUG'</span>] = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">    PS： 由于Config对象本质上是字典，所以还可以使用app.config.update(...)</span><br><span class="line"> </span><br><span class="line">方式二：</span><br><span class="line">    app.config.from_pyfile(<span class="string">"python文件名称"</span>)</span><br><span class="line">        如：</span><br><span class="line">            settings.py</span><br><span class="line">                DEBUG = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">            app.config.from_pyfile(<span class="string">"settings.py"</span>)</span><br><span class="line"> </span><br><span class="line">    app.config.from_envvar(<span class="string">"环境变量名称"</span>)</span><br><span class="line">        环境变量的值为python文件名称名称，内部调用from_pyfile方法</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    app.config.from_json(<span class="string">"json文件名称"</span>)</span><br><span class="line">        JSON文件名称，必须是json格式，因为内部会执行json.loads</span><br><span class="line"> </span><br><span class="line">    app.config.from_mapping(&#123;<span class="string">'DEBUG'</span>:<span class="literal">True</span>&#125;)</span><br><span class="line">        字典格式</span><br><span class="line"> </span><br><span class="line">    app.config.from_object(<span class="string">"python类或类的路径"</span>)</span><br><span class="line"> </span><br><span class="line">        app.config.from_object(<span class="string">'pro_flask.settings.TestingConfig'</span>)</span><br><span class="line"> </span><br><span class="line">        settings.py</span><br><span class="line"> </span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">Config</span><span class="params">(object)</span>:</span></span><br><span class="line">                DEBUG = <span class="literal">False</span></span><br><span class="line">                TESTING = <span class="literal">False</span></span><br><span class="line">                DATABASE_URI = <span class="string">'sqlite://:memory:'</span></span><br><span class="line"> </span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">ProductionConfig</span><span class="params">(Config)</span>:</span></span><br><span class="line">                DATABASE_URI = <span class="string">'mysql://user@localhost/foo'</span></span><br><span class="line"> </span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">DevelopmentConfig</span><span class="params">(Config)</span>:</span></span><br><span class="line">                DEBUG = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">TestingConfig</span><span class="params">(Config)</span>:</span></span><br><span class="line">                TESTING = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">        PS: 从sys.path中已经存在路径开始写</span><br><span class="line">     </span><br><span class="line"> </span><br><span class="line">    PS: settings.py文件默认路径要放在程序root_path目录，如果instance_relative_config为<span class="literal">True</span>，则就是instance_path目录</span><br></pre></td></tr></table></figure><h3 id="4-路由系统"><a href="#4-路由系统" class="headerlink" title="4.路由系统"></a>4.路由系统</h3><ul><li><p>路由的两种写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line">app.add_url_rule(<span class="string">'/index'</span>, <span class="string">'index'</span>, index)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 公司里一般用这种方式</span></span><br><span class="line"><span class="meta">@app.route('/login')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>)</span><br></pre></td></tr></table></figure></li><li><p>路由加载的源码流程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 将url和函数打包成为 rule 对象</span><br><span class="line">- 将rule对象添加到map对象中。</span><br><span class="line">- app.url_map = map对象</span><br></pre></td></tr></table></figure></li><li><p>动态路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/login')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route('/login/&lt;name&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(name)</span>:</span></span><br><span class="line">print(type(name))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route('/login/&lt;int:name&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(name)</span>:</span></span><br><span class="line">print(type(name))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>)</span><br></pre></td></tr></table></figure></li><li><p>支持正则表达式的路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> BaseConverter</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegConverter</span><span class="params">(BaseConverter)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, map, regex)</span>:</span></span><br><span class="line">        super().__init__(map)</span><br><span class="line">        self.regex = regex</span><br><span class="line">app.url_map.converters[<span class="string">'regex'</span>] = RegConverter</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index/&lt;regex("\d+"):x1&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(x1)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-视图"><a href="#5-视图" class="headerlink" title="5.视图"></a>5.视图</h3><h4 id="5-1-FBV"><a href="#5-1-FBV" class="headerlink" title="5.1 FBV"></a>5.1 FBV</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line">app.add_url_rule(<span class="string">'/index'</span>, <span class="string">'index'</span>, index)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 公司里一般用这种方式</span></span><br><span class="line"><span class="meta">@app.route('/login')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>)</span><br></pre></td></tr></table></figure><h4 id="5-2-CBV"><a href="#5-2-CBV" class="headerlink" title="5.2 CBV"></a>5.2 CBV</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,views</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'before1'</span>)</span><br><span class="line">        result = func(*args,**kwargs)</span><br><span class="line">        print(<span class="string">'after1'</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'before2'</span>)</span><br><span class="line">        result = func(*args,**kwargs)</span><br><span class="line">        print(<span class="string">'after2'</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span><span class="params">(views.MethodView)</span>:</span></span><br><span class="line">    methods = [<span class="string">'GET'</span>,<span class="string">"POST"</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#装饰器</span></span><br><span class="line">    decorators = [test1,test2]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'get'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'get'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'post'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'post'</span></span><br><span class="line"></span><br><span class="line">app.add_url_rule(<span class="string">'/user'</span>, view_func=UserView.as_view(<span class="string">'user'</span>)) <span class="comment"># endpoint</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br><span class="line">    </span><br><span class="line"><span class="comment">#注意：before1--&gt;before2--&gt;get--&gt;after2--&gt;after1</span></span><br></pre></td></tr></table></figure><h3 id="6-模板"><a href="#6-模板" class="headerlink" title="6.模板"></a>6.模板</h3><p>Flask使用的是Jinja2模板，所以其语法与Django无差别。</p><h4 id="6-1-基本用法"><a href="#6-1-基本用法" class="headerlink" title="6.1 基本用法"></a>6.1 基本用法</h4><p>flask比django更加接近Python。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(arg)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'你好'</span> + arg</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/md')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    nums = [<span class="number">11</span>,<span class="number">222</span>,<span class="number">33</span>]</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'md.html'</span>,nums=nums,f=func)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>头<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        &#123;% block content %&#125; &#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>底<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>模板继承</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'layout.html' %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>MD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    &#123;% include 'form.html' %&#125;</span><br><span class="line">    &#123;&#123; f("pl") &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-定义全局模板方法"><a href="#6-2-定义全局模板方法" class="headerlink" title="6.2 定义全局模板方法"></a>6.2 定义全局模板方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.template_global() #  &#123;&#123; func("pl") &#125;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(arg)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'pl'</span> + arg</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.template_filter() # &#123;&#123; "pl"|x1("pl1") &#125;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x1</span><span class="params">(arg,name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'pl'</span> + arg + name</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/md/hg')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'md_hg.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>注意：在蓝图中注册时候，应用返回只有本蓝图。</p><h3 id="7-特殊装饰器-中间件"><a href="#7-特殊装饰器-中间件" class="headerlink" title="7.特殊装饰器(中间件)"></a>7.特殊装饰器(中间件)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.path == <span class="string">'/login'</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    print(<span class="string">'f1'</span>)</span><br><span class="line">    <span class="comment"># return '123'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f10</span><span class="params">(response)</span>:</span></span><br><span class="line">    print(<span class="string">'f10'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'index'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>多个装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'f1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'f2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f10</span><span class="params">(response)</span>:</span></span><br><span class="line">    print(<span class="string">'f10'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f20</span><span class="params">(response)</span>:</span></span><br><span class="line">    print(<span class="string">'f20'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'index'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br><span class="line">    app.__call__</span><br><span class="line">    </span><br><span class="line"><span class="comment">#注意：f1--&gt;f2--&gt;index--&gt;f20--&gt;f10  请求按照顺序进来，回去的时候，将列表反转，所有顺序是反着回去</span></span><br></pre></td></tr></table></figure><p>注意：before_after/request可以在蓝图中定义，在蓝图中定义的话，作用域只在本蓝图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, flash, redirect, render_template, request</span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">'some_secret'</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route('/set')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index2</span><span class="params">()</span>:</span></span><br><span class="line">    v = request.args.get(<span class="string">'p'</span>)</span><br><span class="line">    flash(v)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'ok'</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiddleWare</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,wsgi_app)</span>:</span></span><br><span class="line">        self.wsgi_app = wsgi_app</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> self.wsgi_app(*args, **kwargs)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.wsgi_app = MiddleWare(app.wsgi_app)</span><br><span class="line">    app.run(port=<span class="number">9999</span>)</span><br></pre></td></tr></table></figure><h3 id="8-小细节"><a href="#8-小细节" class="headerlink" title="8.小细节"></a>8.小细节</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'xxx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'xxx'</span>)</span><br><span class="line">app.before_request(x1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h2 id="赠送：threading-local"><a href="#赠送：threading-local" class="headerlink" title="赠送：threading.local"></a>赠送：threading.local</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当每个线程在执行 val1.xx=1 ，在内部会为此线程开辟一个空间，来存储 xx=1</span></span><br><span class="line"><span class="comment"># val1.xx,找到此线程自己的内存地址去取自己存储 xx</span></span><br><span class="line">val1 = threading.local()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(i)</span>:</span></span><br><span class="line">    val1.num = i</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(val1.num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    t = threading.Thread(target=task,args=(i,))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h4 id="message"><a href="#message" class="headerlink" title="message"></a>message</h4><p>message是一个基于Session实现的用于保存数据的集合，其特点是：使用一次就删除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, flash, redirect, render_template, request, get_flashed_messages</span><br><span class="line"></span><br><span class="line">        app = Flask(__name__)</span><br><span class="line">        app.secret_key = <span class="string">'some_secret'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">        @app.route('/')</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">index1</span><span class="params">()</span>:</span></span><br><span class="line">            messages = get_flashed_messages()</span><br><span class="line">            print(messages)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Index1"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">        @app.route('/set')</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">index2</span><span class="params">()</span>:</span></span><br><span class="line">            v = request.args.get(<span class="string">'p'</span>)</span><br><span class="line">            flash(v)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'ok'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">            app.run()</span><br></pre></td></tr></table></figure><h4 id="请求扩展"><a href="#请求扩展" class="headerlink" title="请求扩展"></a>请求扩展</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Request, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__, template_folder=<span class="string">'templates'</span>)</span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_first_request1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'before_first_request1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_first_request2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'before_first_request2'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_request1</span><span class="params">()</span>:</span></span><br><span class="line">    Request.nnn = <span class="number">123</span></span><br><span class="line">    print(<span class="string">'before_request1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_request2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'before_request2'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_request1</span><span class="params">(response)</span>:</span></span><br><span class="line">    print(<span class="string">'before_request1'</span>, response)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_request2</span><span class="params">(response)</span>:</span></span><br><span class="line">    print(<span class="string">'before_request2'</span>, response)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span><span class="params">(error)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'This page does not exist'</span>, <span class="number">404</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.template_global()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sb</span><span class="params">(a1, a2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a1 + a2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.template_filter()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db</span><span class="params">(a1, a2, a3)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a1 + a2 + a3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'hello.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;内容回顾&quot;&gt;&lt;a href=&quot;#内容回顾&quot; class=&quot;headerlink&quot; title=&quot;内容回顾&quot;&gt;&lt;/a&gt;内容回顾&lt;/h2&gt;&lt;p&gt;1.什么是接口？&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#两个方面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- interface类型，Python没有，Java/C&lt;span class=&quot;comment&quot;&gt;#语言才有。用于约束实现了该接口的类中必须有某些指定方法。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- api也可以成为一个接口。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2.抽象类和抽象方法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;他既具有约束的功能又具有提供子类继承方法的功能，Python中通过abc实现。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;3.重载和重写？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;重载就是根据方法中参数的不同调用不同的方法，实现不同的功能。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;重写就是方法对父类方法的重写。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="flask" scheme="https://pl1649947109.github.io/pl1649947109/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>SaltStack的详细解读</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/20/%E7%9F%A5%E8%AF%86%E6%89%A9%E5%B1%95/SaltStack%E7%9A%84%E8%AF%A6%E7%BB%86%E8%A7%A3%E8%AF%BB/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/20/知识扩展/SaltStack的详细解读/</id>
    <published>2019-11-20T12:00:00.000Z</published>
    <updated>2019-11-19T08:14:36.613Z</updated>
    
    <content type="html"><![CDATA[<h3 id="salt简介"><a href="#salt简介" class="headerlink" title="salt简介"></a>salt简介</h3><blockquote><p>SaltStack是一个服务器基础架构集中化管理平台，具备配置管理、远程执行、监控等功能，基于Python语言实现，结合轻量级消息队列（ZeroMQ）与Python第三方模块（Pyzmq、PyCrypto、Pyjinjia2、python-msgpack和PyYAML等）构建。</p><p>通过部署SaltStack，我们可以在成千万台服务器上做到批量执行命令，根据不同业务进行配置集中化管理、分发文件、采集服务器数据、操作系统基础及软件包管理等，SaltStack是运维人员提高工作效率、规范业务配置与操作的利器。</p></blockquote><a id="more"></a><h3 id="salt基本原理"><a href="#salt基本原理" class="headerlink" title="salt基本原理"></a>salt基本原理</h3><blockquote><p>SaltStack 采用 C/S模式，server端就是salt的master，client端就是minion，minion与master之间通过ZeroMQ消息队列通信</p><p>minion上线后先与master端联系，把自己的pub key发过去，这时master端通过salt-key -L命令就会看到minion的key，接受该minion-key后，也就是master与minion已经互信</p><p>master可以发送任何指令让minion执行了，salt有很多可执行模块，比如说cmd模块，在安装minion的时候已经自带了，它们通常位于你的python库中，<code>locate salt | grep /usr/</code> 可以看到salt自带的所有东西。</p><p>这些模块是python写成的文件，里面会有好多函数，如cmd.run，当我们执行<code>salt &#39;*&#39; cmd.run &#39;uptime&#39;</code>的时候，master下发任务匹配到的minion上去，minion执行模块函数，并返回结果。master监听4505和4506端口，4505对应的是ZMQ的PUB system，用来发送消息，4506对应的是REP system是来接受消息的。</p></blockquote><p>具体步骤如下</p><ul><li>Salt stack的Master与Minion之间通过ZeroMq进行消息传递，使用了ZeroMq的发布-订阅模式，连接方式包括tcp，ipc</li><li>salt命令，将<code>cmd.run ls</code>命令从<code>salt.client.LocalClient.cmd_cli</code>发布到master，获取一个Jodid，根据jobid获取命令执行结果。</li><li>master接收到命令后，将要执行的命令发送给客户端minion。</li><li>minion从消息总线上接收到要处理的命令，交给<code>minion._handle_aes</code>处理</li><li><code>minion._handle_aes</code>发起一个本地线程调用cmdmod执行ls命令。线程执行完ls后，调用<code>minion._return_pub</code>方法，将执行结果通过消息总线返回给master</li><li>master接收到客户端返回的结果，调用<code>master._handle_aes</code>方法，将结果写的文件中</li><li><code>salt.client.LocalClient.cmd_cli</code>通过轮询获取Job执行结果，将结果输出到终端。</li></ul><h3 id="安装salt"><a href="#安装salt" class="headerlink" title="安装salt"></a>安装salt</h3><blockquote><p>导入salt</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">7版本</span><br><span class="line">rpm --import https://repo.saltstack.com/yum/redhat/7/x86_64/latest/SALTSTACK-GPG-KEY.pub</span><br><span class="line"></span><br><span class="line">6版本</span><br><span class="line">rpm --import https://repo.saltstack.com/yum/redhat/6/x86_64/latest/SALTSTACK-GPG-KEY.pub</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#新增文件 /etc/yum.repos.d/saltstack.repo</span></span><br><span class="line">7 &amp; 6版本</span><br><span class="line"></span><br><span class="line">[saltstack-repo]</span><br><span class="line">name=SaltStack repo <span class="keyword">for</span> RHEL/CentOS <span class="variable">$releasever</span></span><br><span class="line">baseurl=https://repo.saltstack.com/yum/redhat/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/latest</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://repo.saltstack.com/yum/redhat/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/latest/SALTSTACK-GPG-KEY.pub</span><br></pre></td></tr></table></figure><blockquote><p>安装 salt-minion, salt-master,或Salt components:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install salt-master</span><br><span class="line">yum install salt-minion</span><br><span class="line">yum install salt-ssh</span><br><span class="line">yum install salt-syndic</span><br><span class="line">yum install salt-cloud</span><br></pre></td></tr></table></figure><h3 id="配置salt"><a href="#配置salt" class="headerlink" title="配置salt"></a>配置salt</h3><h4 id="master"><a href="#master" class="headerlink" title="master"></a>master</h4><blockquote><p>一般使用默认就好   (/etc/salt/master)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定master，冒号后有一个空格</span></span><br><span class="line">master: 192.168.2.22</span><br><span class="line">user: root</span><br><span class="line"></span><br><span class="line"><span class="comment">#-------以下为可选--------------</span></span><br><span class="line"><span class="comment"># salt运行的用户，影响到salt的执行权限</span></span><br><span class="line">user: root</span><br><span class="line"><span class="comment">#s alt的运行线程，开的线程越多一般处理的速度越快，但一般不要超过CPU的个数</span></span><br><span class="line">worker_threads: 10</span><br><span class="line"><span class="comment"># master的管理端口</span></span><br><span class="line">publish_port : 4505</span><br><span class="line"><span class="comment"># master跟minion的通讯端口，用于文件服务，认证，接受返回结果等</span></span><br><span class="line">ret_port : 4506</span><br><span class="line"><span class="comment"># 如果这个master运行的salt-syndic连接到了一个更高层级的master,那么这个参数需要配置成连接到的这个高层级master的监听端口</span></span><br><span class="line">syndic_master_port : 4506</span><br><span class="line"><span class="comment"># 指定pid文件位置</span></span><br><span class="line">pidfile: /var/run/salt-master.pid</span><br><span class="line"><span class="comment"># saltstack 可以控制的文件系统的开始位置</span></span><br><span class="line">root_dir: /</span><br><span class="line"><span class="comment"># 日志文件地址</span></span><br><span class="line">log_file: /var/<span class="built_in">log</span>/salt_master.log</span><br><span class="line"><span class="comment"># 分组设置</span></span><br><span class="line">nodegroups:</span><br><span class="line">  group_all: <span class="string">'*'</span></span><br><span class="line"><span class="comment"># salt state执行时候的根目录</span></span><br><span class="line">file_roots:</span><br><span class="line">  base:</span><br><span class="line">    - /srv/salt/</span><br><span class="line"><span class="comment"># 设置pillar 的根目录</span></span><br><span class="line">pillar_roots:</span><br><span class="line">  base:</span><br><span class="line">    - /srv/pillar</span><br></pre></td></tr></table></figure><h5 id="启动master"><a href="#启动master" class="headerlink" title="启动master"></a>启动master</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start salt-master</span><br><span class="line">systemctl <span class="built_in">enable</span> salt-master</span><br></pre></td></tr></table></figure><h4 id="minion"><a href="#minion" class="headerlink" title="minion"></a>minion</h4><p>(/etc/salt/minion)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定master，冒号后有一个空格</span></span><br><span class="line">master: 192.168.2.22</span><br><span class="line">id: minion-01</span><br><span class="line">user: root</span><br><span class="line"></span><br><span class="line"><span class="comment">#-------以下为可选--------------</span></span><br><span class="line"><span class="comment"># minion的识别ID，可以是IP，域名，或是可以通过DNS解析的字符串</span></span><br><span class="line">id: 192.168.0.100</span><br><span class="line"><span class="comment"># salt运行的用户权限</span></span><br><span class="line">user: root</span><br><span class="line"><span class="comment"># master的识别ID，可以是IP，域名，或是可以通过DNS解析的字符串</span></span><br><span class="line">master : 192.168.0.100</span><br><span class="line"><span class="comment"># master通讯端口</span></span><br><span class="line">master_port: 4506</span><br><span class="line"><span class="comment"># 备份模式，minion是本地备份，当进行文件管理时的文件备份模式</span></span><br><span class="line">backup_mode: minion</span><br><span class="line"><span class="comment"># 执行salt-call时候的输出方式</span></span><br><span class="line">output: nested </span><br><span class="line"><span class="comment"># minion等待master接受认证的时间</span></span><br><span class="line">acceptance_wait_time: 10</span><br><span class="line"><span class="comment"># 失败重连次数，0表示无限次，非零会不断尝试到设置值后停止尝试</span></span><br><span class="line">acceptance_wait_time_max: 0</span><br><span class="line"><span class="comment"># 重新认证延迟时间，可以避免因为master的key改变导致minion需要重新认证的syn风暴</span></span><br><span class="line">random_reauth_delay: 60</span><br><span class="line"><span class="comment"># 日志文件位置</span></span><br><span class="line">log_file: /var/logs/salt_minion.log</span><br><span class="line"><span class="comment"># 文件路径基本位置</span></span><br><span class="line">file_roots:</span><br><span class="line">  base:</span><br><span class="line">    - /etc/salt/minion/file</span><br><span class="line"><span class="comment"># pillar基本位置</span></span><br><span class="line">pillar_roots:</span><br><span class="line">  base:</span><br><span class="line">    - /data/salt/minion/pillar</span><br></pre></td></tr></table></figure><h5 id="启动minion"><a href="#启动minion" class="headerlink" title="启动minion"></a>启动minion</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start salt-master</span><br><span class="line">systemctl <span class="built_in">enable</span> salt-master</span><br></pre></td></tr></table></figure><h4 id="添加key"><a href="#添加key" class="headerlink" title="添加key"></a>添加key</h4><blockquote><p>master 端查看key</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@master salt]<span class="comment"># salt-key </span></span><br><span class="line">Accepted Keys:</span><br><span class="line">Denied Keys:</span><br><span class="line">Unaccepted Keys:   <span class="comment">#可看到 minion已经检测到，没有认证key</span></span><br><span class="line">minion-01</span><br><span class="line">Rejected Keys:</span><br><span class="line"></span><br><span class="line">[root@master salt]<span class="comment"># salt-key -a minion-01</span></span><br><span class="line">The following keys are going to be accepted:</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">minion-01</span><br><span class="line">Proceed? [n/Y] y    <span class="comment">#Y确认添加</span></span><br><span class="line">Key <span class="keyword">for</span> minion minion-01 accepted.  <span class="comment">#添加成功</span></span><br><span class="line">[root@master salt]<span class="comment"># salt-key </span></span><br><span class="line">Accepted Keys:</span><br><span class="line">minion-01</span><br><span class="line">Denied Keys:</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">Rejected Keys:</span><br><span class="line">[root@master salt]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h5 id="salt-key常用参数"><a href="#salt-key常用参数" class="headerlink" title="salt-key常用参数"></a>salt-key常用参数</h5><table><thead><tr><th align="left">-a</th><th align="left">添加指定ID 的key</th></tr></thead><tbody><tr><td align="left">-A</td><td align="left">添加全部</td></tr><tr><td align="left">-R</td><td align="left">拒绝全部</td></tr><tr><td align="left">-d</td><td align="left">删除指定ID的</td></tr><tr><td align="left">-D</td><td align="left">删除全部</td></tr></tbody></table><h5 id="测试连通性"><a href="#测试连通性" class="headerlink" title="测试连通性"></a>测试连通性</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master salt]<span class="comment"># salt 'minion-01' test.ping</span></span><br><span class="line">minion-01:</span><br><span class="line">    True   <span class="comment">#返回结果表示成功</span></span><br><span class="line">[root@master salt]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h5 id="简单服务的安装"><a href="#简单服务的安装" class="headerlink" title="简单服务的安装"></a>简单服务的安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root/] ]<span class="variable">$salt</span> <span class="string">'minion-01'</span> pkg.install ftp  <span class="comment">#解释</span></span><br><span class="line">minion-01:</span><br><span class="line">    ----------</span><br><span class="line">    ftp:</span><br><span class="line">        ----------</span><br><span class="line">        new:</span><br><span class="line">            0.17-67.el7</span><br><span class="line">        old:</span><br><span class="line">[root/] ]$</span><br><span class="line"></span><br><span class="line"><span class="comment">#去minion查看</span></span><br><span class="line">[root@minion-01 tmp]<span class="comment"># rpm -qa ftp</span></span><br><span class="line">ftp-0.17-67.el7.x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment">#salt 'minion-01' pkg.install ftp</span></span><br><span class="line"><span class="comment">#1.'*' 代表的是target是指在那些minion上操作</span></span><br><span class="line"><span class="comment">#2. 'pkg' 是一个执行模块,就像'test' </span></span><br><span class="line"><span class="comment">#3.'install' 是执行模块下面的函数，像test下的ping</span></span><br><span class="line"><span class="comment">#4.'ftp' 是函数的参数(arg)，有的函数需要参数，有的不需要比如test.ping就不需要参数</span></span><br><span class="line"> <span class="comment">##查看所有执行模块的doc</span></span><br><span class="line"> salt <span class="string">'minion'</span> sys.doc</span><br><span class="line"> <span class="comment">##查看test模块的帮助</span></span><br><span class="line"> salt <span class="string">'minion'</span> sys.doc <span class="built_in">test</span>  </span><br><span class="line"> <span class="comment">##查看test.ping函数的帮助</span></span><br><span class="line"> salt <span class="string">'minion'</span> sys.doc test.ping</span><br></pre></td></tr></table></figure><h3 id="salt常用命令"><a href="#salt常用命令" class="headerlink" title="salt常用命令"></a>salt常用命令</h3><h4 id="salt"><a href="#salt" class="headerlink" title="salt"></a>salt</h4><blockquote><p>该命令执行salt的执行模块,通常在master端运行.常用命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">salt [option] <span class="string">'&lt;target&gt;'</span> &lt;<span class="keyword">function</span>&gt; [arguments]</span><br><span class="line"></span><br><span class="line"><span class="comment">#例如</span></span><br><span class="line">salt <span class="string">'minion-01'</span> cmd.run <span class="string">'ip addr'</span></span><br></pre></td></tr></table></figure><h4 id="salt-run"><a href="#salt-run" class="headerlink" title="salt-run"></a>salt-run</h4><blockquote><p>该命令执行runner(salt自带或者自定义的，)，通常在master端执行，比如经常用到的manage</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">salt-run [options] [runner.func]</span><br><span class="line"></span><br><span class="line"><span class="comment">#例如</span></span><br><span class="line">salt-run manage.status   <span class="comment">##查看所有minion状态</span></span><br><span class="line">salt-run manage.down     <span class="comment">##查看所有没在线minion</span></span><br><span class="line">salt-run manage.up       <span class="comment">##查看所有在线minion</span></span><br></pre></td></tr></table></figure><h4 id="salt-key"><a href="#salt-key" class="headerlink" title="salt-key"></a>salt-key</h4><blockquote><p>密钥管理，通常在master端执行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">salt-key [options]</span><br><span class="line">salt-key -L              <span class="comment">##查看所有minion-key</span></span><br><span class="line">salt-key -a &lt;key-name&gt;   <span class="comment">##接受某个minion-key</span></span><br><span class="line">salt-key -d &lt;key-name&gt;   <span class="comment">##删除某个minion-key</span></span><br><span class="line">salt-key -A              <span class="comment">##接受所有的minion-key</span></span><br><span class="line">salt-key -D              <span class="comment">##删除所有的minion-key</span></span><br></pre></td></tr></table></figure><h4 id="salt-call"><a href="#salt-call" class="headerlink" title="salt-call"></a>salt-call</h4><blockquote><p>该命令通常在minion上执行，minion自己执行可执行模块，不通过master下发job</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">salt-call [options] &lt;<span class="keyword">function</span>&gt; [arguments]</span><br><span class="line">salt-call test.ping           <span class="comment">##自己执行test.ping命令</span></span><br><span class="line">salt-call cmd.run <span class="string">'ifconfig'</span>  <span class="comment">##自己执行cmd.run函数</span></span><br></pre></td></tr></table></figure><h4 id="salt-cp"><a href="#salt-cp" class="headerlink" title="salt-cp"></a>salt-cp</h4><blockquote><p>分发文件到minion上,不支持目录分发.运行在master</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">salt-cp [options] <span class="string">'&lt;target&gt;'</span> SOURCE DEST</span><br><span class="line"><span class="comment">#例如</span></span><br><span class="line">salt-cp <span class="string">'*'</span> testfile.html /tmp</span><br><span class="line">salt-cp <span class="string">'test*'</span> index.html /tmp/a.html</span><br></pre></td></tr></table></figure><h4 id="salt-master"><a href="#salt-master" class="headerlink" title="salt-master"></a>salt-master</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">salt-master [options]</span><br><span class="line">salt-master            <span class="comment">##前台运行master</span></span><br><span class="line">salt-master -d         <span class="comment">##后台运行master</span></span><br><span class="line">salt-master -l debug   <span class="comment">##前台debug输出</span></span><br></pre></td></tr></table></figure><h4 id="salt-minion"><a href="#salt-minion" class="headerlink" title="salt-minion"></a>salt-minion</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">salt-minion [options]</span><br><span class="line">salt-minion            <span class="comment">##前台运行</span></span><br><span class="line">salt-minion -d         <span class="comment">##后台运行</span></span><br><span class="line">salt-minion -l debug   <span class="comment">##前台debug输出</span></span><br></pre></td></tr></table></figure><h3 id="普通用户执行salt"><a href="#普通用户执行salt" class="headerlink" title="普通用户执行salt"></a>普通用户执行salt</h3><p>两种方法</p><blockquote><p>1: ACL(修改master)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    client_acl:</span><br><span class="line">    monitor: <span class="comment">#uonghu</span></span><br><span class="line">     - <span class="built_in">test</span>*: <span class="comment">#权限</span></span><br><span class="line">    - <span class="built_in">test</span>.*</span><br><span class="line">    dev:</span><br><span class="line">     - service.*</span><br><span class="line">    sa:</span><br><span class="line">     - .*</span><br><span class="line"><span class="comment">#重启master</span></span><br><span class="line">     </span><br><span class="line"><span class="comment">#给予目录和文件权限</span></span><br><span class="line">chmod +r /etc/salt/master</span><br><span class="line">chmod +x /var/run/salt</span><br><span class="line">chmod +x /var/cache/salt</span><br></pre></td></tr></table></figure><blockquote><p>2 external_auth(修改master)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  pam:</span><br><span class="line">    fred:</span><br><span class="line">      - <span class="built_in">test</span>.*</span><br><span class="line"><span class="comment">#重启master</span></span><br><span class="line">     </span><br><span class="line"><span class="comment">#给予目录和文件权限</span></span><br><span class="line">chmod +r /etc/salt/master</span><br><span class="line">chmod +x /var/run/salt</span><br><span class="line">chmod +x /var/cache/salt</span><br></pre></td></tr></table></figure><p>使用Token不必每次都输入账号密码，使用external_auth每次都是需要密码的，这样多麻烦，这里引入了Token，它会保存一串字符到在当前用户家目录下.salt_token中，在有效时间内使用external_auth是不需要输入密码的，默认时间12hour，可以通过master配置文件修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt -T -a pam <span class="string">'*'</span> test.ping</span><br></pre></td></tr></table></figure><h3 id="target"><a href="#target" class="headerlink" title="target"></a>target</h3><blockquote><p>target也就是目标,目的.指定master命令应该对谁执行</p></blockquote><ul><li>正则匹配</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master /]<span class="comment"># salt -E  'mini*' test.ping</span></span><br><span class="line">minion-02:</span><br><span class="line">    True</span><br><span class="line">minion-01:</span><br><span class="line">    True</span><br></pre></td></tr></table></figure><ul><li>列表匹配</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># salt -L minion-01,minion-02 test.ping</span></span><br><span class="line">minion-02:</span><br><span class="line">    True</span><br><span class="line">minion-01:</span><br><span class="line">    True</span><br></pre></td></tr></table></figure><ul><li>grains匹配</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># salt -G 'os:CentOs' test.ping</span></span><br><span class="line">minion-02:</span><br><span class="line">    True</span><br><span class="line">minion-01:</span><br><span class="line">    True</span><br></pre></td></tr></table></figure><ul><li>组匹配</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启master 的default_include</span></span><br><span class="line">vim /etc/salt/master.d/nodegroup.conf </span><br><span class="line"><span class="comment">#写到master中也是这个格式</span></span><br><span class="line">nodegroups:</span><br><span class="line"> test1: <span class="string">'L@test1,test2 or test3*'</span></span><br><span class="line"> test2: <span class="string">'G@os:CenOS or test2'</span></span><br><span class="line"></span><br><span class="line">salt -N test1 test.ping   <span class="comment">#-N指定groupname</span></span><br><span class="line"></span><br><span class="line">在top file中使用nodegroups</span><br><span class="line"></span><br><span class="line"><span class="string">'test1'</span>:</span><br><span class="line"> - match: nodegroup     <span class="comment">##没s,匹配的是文件</span></span><br><span class="line"> - webserver</span><br><span class="line">[root@master ~]<span class="comment"># salt -N nodegroups test.ping</span></span><br><span class="line">minion-02:</span><br><span class="line">    True</span><br><span class="line">minion-01:</span><br><span class="line">    True</span><br><span class="line"><span class="comment">#组需要在master中预先定义</span></span><br></pre></td></tr></table></figure><ul><li>复合匹配  <code>salt -C &#39;G@os:MacOS or L@Minion1&#39;</code> </li><li>Pillar匹配 <code>salt -I &#39;key:value&#39; test.ping</code> </li><li>CIDR匹配 <code>salt -S &#39;192.168.1.0/24&#39; test.ping</code> </li></ul><blockquote><p>在top文件中匹配 grains</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'node_type:web'</span>:</span><br><span class="line">  - match: grain         <span class="comment">#没有s</span></span><br><span class="line">  - webserver</span><br></pre></td></tr></table></figure><blockquote><p>top文件中使用jinja</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> self = grains[<span class="string">'node_type'</span>] %&#125;</span><br><span class="line">    - match: grain</span><br><span class="line">- &#123;&#123; self &#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>一次在n个minion上执行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-b n</span><br><span class="line">--batch-size n</span><br><span class="line"><span class="comment">#例：</span></span><br><span class="line">salt <span class="string">'*'</span> -b 5 test.ping</span><br><span class="line"><span class="comment">#5个5个的ping</span></span><br></pre></td></tr></table></figure><h3 id="多master"><a href="#多master" class="headerlink" title="多master"></a>多master</h3><blockquote><blockquote><p>2个master并不会共享Minion keys，一个master删除了一个key不会影响另一个</p></blockquote><blockquote><p>不会自动同步File_roots,所以需要手动去维护，如果用git就没问题了</p></blockquote><blockquote><p>不会自动同步Pillar_Roots，所以需要手工去维护，也可以用git</p></blockquote><blockquote><p>Master的配置文件也是独立的</p></blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装 salt-master</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#原master的密钥cp一份到新的master</span></span><br><span class="line">scp /etc/salt/pki/master/master* newmaster:/etc/salt/pki/master/</span><br><span class="line"><span class="comment">#启动新的Master</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置minion的配置</span></span><br><span class="line">master:</span><br><span class="line">  - master1</span><br><span class="line">  - master2</span><br><span class="line"><span class="comment">#重启minion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#新master接受所有的key</span></span><br><span class="line">salt-key -L</span><br><span class="line">salt-key -A</span><br></pre></td></tr></table></figure><h3 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h3><blockquote><p>语法风格</p></blockquote><ul><li><p>空格和TAB</p><p>yaml两个空格为缩进, TAB不要使用!</p></li><li><p>冒号: 和减号-</p><p>: 和- 后面要跟上一个空格在写</p></li><li><p>数字解析</p><p>mode: 0644 会解析成为mode: 644 最好使用mode: (0644)</p></li><li><p>简写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim:</span><br><span class="line">  pkg.installed <span class="comment">#第一个简写</span></span><br><span class="line">  user.present <span class="comment">#第二个简写.不被支持,因为不支持双简写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#建议规范书写</span></span><br><span class="line">vim:</span><br><span class="line">  pkg:</span><br><span class="line">    - installed</span><br><span class="line">  user:</span><br><span class="line">    - present</span><br></pre></td></tr></table></figure></li></ul><h3 id="Jinja"><a href="#Jinja" class="headerlink" title="Jinja"></a>Jinja</h3><blockquote><p>Jinja 基于Python模板引擎开发,saltstack默认使用yaml_jinja渲染器,渲染流程时先jinja在yaml解析.所以在开始解析yaml的时候可以使用jinja”偷个腥”</p></blockquote><ul><li>区分模板文件</li></ul><p>在salt中,files和templates都使用file这个state模块.那么如何区分模板是什么文件呢.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  - templates: jinja</span><br><span class="line">  </span><br><span class="line">file.managed:</span><br><span class="line">  - name: /tmp/<span class="built_in">test</span></span><br><span class="line">  - <span class="built_in">source</span>: salt://tmp/<span class="built_in">test</span></span><br><span class="line">  - template: jinja</span><br><span class="line">  - defaults:</span><br><span class="line">    Server: &#123;&#123; pillar[<span class="string">'.....'</span>] &#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>jinja中使用grains</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; grains[<span class="string">'os'</span>] &#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>jinja中使用执行模块</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; salt[&apos;network.hw_addr&apos;](&apos;eth0&apos;) &#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>jinja中使用Pillar</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pillar[<span class="string">'apache'</span>][<span class="string">'PORT'</span>] &#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>Jinja的逻辑关系</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> grains[<span class="string">'os'</span>] == <span class="string">'RedHat'</span> %&#125;</span><br><span class="line">apache: httpd</span><br><span class="line">&#123;% <span class="keyword">elif</span> grains[<span class="string">'os'</span>] == <span class="string">'Debian'</span> %&#125;</span><br><span class="line">apache: apache2</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p><strong>更多使用自行研究</strong></p><h3 id="salt常用模块和API"><a href="#salt常用模块和API" class="headerlink" title="salt常用模块和API"></a>salt常用模块和API</h3><h4 id="查看支持的所有modules"><a href="#查看支持的所有modules" class="headerlink" title="查看支持的所有modules"></a>查看支持的所有modules</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root/] ]<span class="variable">$salt</span> <span class="string">'minion-01'</span> sys.list_modules</span><br><span class="line">minion-01:</span><br><span class="line">    - acl</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="salt-client调用API举例"><a href="#salt-client调用API举例" class="headerlink" title="salt.client调用API举例"></a>salt.client调用API举例</h4><p><strong>[root/] ]$cd /usr/lib/python2.7/site-packages/salt/modules/</strong> 模块path</p><p><strong>API调用示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root/] ]$cat test.py </span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> salt.client</span><br><span class="line">client = salt.client.LocalClient()</span><br><span class="line"></span><br><span class="line">res = client.cmd(<span class="string">'*'</span>,<span class="string">'test.ping'</span>)</span><br><span class="line"><span class="keyword">print</span> res</span><br><span class="line">[root/] ]$./test.py </span><br><span class="line">&#123;<span class="string">'minion-02'</span>: <span class="literal">True</span>, <span class="string">'minion-01'</span>: <span class="literal">True</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">##解释一下</span></span><br><span class="line"><span class="comment">#当我们调用salt.client.LocalClient的时候,其实就等于我们执行了 salt '*' test.ping</span></span><br></pre></td></tr></table></figure><p><strong>API调用：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.cmd(<span class="string">'*'</span>,<span class="string">'file.remove'</span>,[<span class="string">'/tmp/foo'</span>])</span><br></pre></td></tr></table></figure><blockquote><p>salt  <target> sys.doc  module</target></p><p>可以查看模块支持那些命令</p></blockquote><h4 id="Archive"><a href="#Archive" class="headerlink" title="Archive"></a>Archive</h4><blockquote><p>实现对系统曾经的压缩包调用支持gzip,gunzip.rar,tar,unrar,unzip等</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#采用gunzip解压sourcefile.txt.gz包</span></span><br><span class="line">salt <span class="string">'*'</span> archive.gunzip sourcefile.txt.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#采用gzip压缩sourcefile.txt文件</span></span><br><span class="line">salt <span class="string">'*'</span> archive.gzip sourcefile.txt</span><br></pre></td></tr></table></figure><p><strong>API调用：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.cmd(<span class="string">'*'</span>,<span class="string">'archive.gunzip'</span>,[<span class="string">'sourcefile.txt.gz'</span>])</span><br></pre></td></tr></table></figure><h4 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h4><blockquote><p>实现对远程命令的调用执行,(默认具备root权限!谨慎使用)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取所欲被控主机的内存使用情况</span></span><br><span class="line">salt <span class="string">'*'</span> cmd.run <span class="string">'free -m'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在wx主机上运行test.py脚本，其中script/test.py存放在file_roots指定的目录（默认是在/srv/salt,自定义在/etc/salt/master文件中定义），</span></span><br><span class="line"><span class="comment">#该命令会做2个动作：首先同步test.py到minion的cache目录；起床运行该脚本</span></span><br><span class="line">salt <span class="string">'minion-01'</span> cmd.script salt://script/test.py</span><br></pre></td></tr></table></figure><p><strong>API调用：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.cmd(<span class="string">'*'</span>,<span class="string">'cmd.run'</span>,[<span class="string">'free -m'</span>])</span><br></pre></td></tr></table></figure><h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h4><blockquote><p>实现远程文件目录的复制,以及下载URL文件等操作</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将被控主机的/etc/hosts文件复制到被控主机本地的salt cache目录（/var/cache/salt/minion/localfiles/）</span></span><br><span class="line">salt <span class="string">'*'</span> cp.cache_local_file /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment">#将主控端file_roots指定位置下的目录复制到被控主机/minion/目录下</span></span><br><span class="line">salt <span class="string">'*'</span> cp.get_dir salt://script/ /minion/</span><br><span class="line"></span><br><span class="line"><span class="comment">#将主控端file_roots指定位置下的文件复制到被控主机/minion/test.py文件(file为文件名)</span></span><br><span class="line">salt <span class="string">'*'</span> cp.get_dir salt://script/test.py /minion/test.py</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载URL内容到被控主机指定位置(/tmp/index.html)</span></span><br><span class="line">salt <span class="string">'*'</span> cp.get_url http://www.slashdot.ort /tmp/index.html</span><br></pre></td></tr></table></figure><p><strong>API调用：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.cmd(<span class="string">'*'</span>,<span class="string">'cp.get_file'</span>,[<span class="string">'salt://script/test.py'</span>,<span class="string">'/minion/test.py'</span>])</span><br></pre></td></tr></table></figure><h4 id="cron"><a href="#cron" class="headerlink" title="cron"></a>cron</h4><blockquote><p>实现对minion的crontab控制</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看指定被控主机、root用户的crontab操作</span></span><br><span class="line">salt <span class="string">'minion-01'</span> cron.raw_cron root</span><br><span class="line"></span><br><span class="line"><span class="comment">#为指定被控主机、root用户添加/usr/local/weekly任务zuoye</span></span><br><span class="line">salt <span class="string">'minion-01'</span> cron.set_job root <span class="string">'*'</span> <span class="string">'*'</span> <span class="string">'*'</span> <span class="string">'*'</span> 1 /usr/<span class="built_in">local</span>/weekly </span><br><span class="line"></span><br><span class="line"><span class="comment">#删除指定被控主机、root用户crontab的/usr/local/weekly任务zuoye</span></span><br><span class="line">salt <span class="string">'minion-01'</span> cron.rm_job root /usr/<span class="built_in">local</span>/weekly</span><br></pre></td></tr></table></figure><p><strong>API调用：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.cmd(<span class="string">'wx'</span>,<span class="string">'cron.set_job'</span>,[<span class="string">'root'</span>,<span class="string">'*'</span>,<span class="string">'*'</span>,<span class="string">'*'</span>,<span class="string">'*'</span>,1,<span class="string">'/usr/local/weekly'</span>])</span><br></pre></td></tr></table></figure><h4 id="file"><a href="#file" class="headerlink" title="file"></a>file</h4><blockquote><p>对minion的文件操作,包括文件读写,权限,查找校验</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#校验所有被控主机/etc/fstab文件的md5值是否为xxxxxxxxxxxxx,一致则返回True值</span></span><br><span class="line">salt <span class="string">'*'</span> file.check_hash /etc/fstab md5=xxxxxxxxxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line"><span class="comment">#校验所有被控主机文件的加密信息，支持md5、sha1、sha224、shs256、sha384、sha512加密算法</span></span><br><span class="line">salt <span class="string">'*'</span> file.get_sum /etc/passwd md5</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改所有被控主机/etc/passwd文件的属组、用户权限、等价于chown root:root /etc/passwd</span></span><br><span class="line">salt <span class="string">'*'</span> file.chown /etc/passwd root root</span><br><span class="line"></span><br><span class="line"><span class="comment">#复制所有被控主机/path/to/src文件到本地的/path/to/dst文件</span></span><br><span class="line">salt <span class="string">'*'</span> file.copy /path/to/src /path/to/dst</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查所有被控主机/etc目录是否存在，存在则返回True,检查文件是否存在使用file.file_exists方法</span></span><br><span class="line">salt <span class="string">'*'</span> file.directory_exists /etc</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取所有被控主机/etc/passwd的stats信息</span></span><br><span class="line">salt <span class="string">'*'</span> file.stats /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取所有被控主机/etc/passwd的权限mode，如755，644</span></span><br><span class="line">salt <span class="string">'*'</span> file.get_mode /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改所有被控主机/etc/passwd的权限mode为0644</span></span><br><span class="line">salt <span class="string">'*'</span> file.set_mode /etc/passwd 0644</span><br><span class="line"></span><br><span class="line"><span class="comment">#在所有被控主机创建/opt/test目录</span></span><br><span class="line">salt <span class="string">'*'</span> file.mkdir /opt/<span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将所有被控主机/etc/httpd/httpd.conf文件的LogLevel参数的warn值修改为info</span></span><br><span class="line">salt <span class="string">'*'</span> file.sed /etc/httpd/httpd.conf <span class="string">'LogLevel warn'</span> <span class="string">'LogLevel info'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#给所有被控主机的/tmp/test/test.conf文件追加内容‘maxclient 100’</span></span><br><span class="line">salt <span class="string">'*'</span> file.append /tmp/<span class="built_in">test</span>/test.conf <span class="string">'maxclient 100'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除所有被控主机的/tmp/foo文件</span></span><br><span class="line">salt <span class="string">'*'</span> file.remove /tmp/foo</span><br></pre></td></tr></table></figure><h4 id="network"><a href="#network" class="headerlink" title="network"></a>network</h4><blockquote><p>返回minion的主机信息</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在指定被控主机获取dig、ping、traceroute目录域名信息</span></span><br><span class="line">salt <span class="string">'minion-01'</span> network.dig www.qq.com</span><br><span class="line">salt <span class="string">'minion-01'</span> network.ping www.qq.com</span><br><span class="line">salt <span class="string">'minion-01'</span> network.traceroute www.qq.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取指定被控主机的mac地址</span></span><br><span class="line">salt <span class="string">'minion-01'</span> network.hwaddr eth0</span><br><span class="line"></span><br><span class="line"><span class="comment">#检测指定被控主机是否属于10.0.0.0/16子网范围，属于则返回True</span></span><br><span class="line">salt <span class="string">'minion-01'</span> network.in_subnet 10.0.0.0/16</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取指定被控主机的网卡配置信息</span></span><br><span class="line">salt <span class="string">'minion-01'</span> network.interfaces</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取指定被控主机的IP地址配置信息</span></span><br><span class="line">salt <span class="string">'minion-01'</span> network.ip_addrs</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取指定被控主机的子网信息</span></span><br><span class="line">salt <span class="string">'minion-01'</span> network.subnets</span><br></pre></td></tr></table></figure><p><strong>API调用：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.cmd(<span class="string">'minion-01'</span>,<span class="string">'network.ip_addrs'</span>)</span><br></pre></td></tr></table></figure><h4 id="pkg"><a href="#pkg" class="headerlink" title="pkg"></a>pkg</h4><blockquote><p>minion的程序包管理,如yum, apt-get等</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为所有被控主机安装PHP环境，根据不同系统发行版调用不同安装工具进行部署，如redhat平台的yum，等价于yum -y install php</span></span><br><span class="line">salt <span class="string">'*'</span> pkg.install php</span><br><span class="line"></span><br><span class="line"><span class="comment">#卸载所有被控主机的PHP环境</span></span><br><span class="line">salt <span class="string">'*'</span> pkg.remove php</span><br><span class="line"></span><br><span class="line"><span class="comment">#升级所有被控主机的软件包</span></span><br><span class="line">salt <span class="string">'*'</span> pkg.upgrade</span><br></pre></td></tr></table></figure><p><strong>API调用：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.cmd(<span class="string">'*'</span>,<span class="string">'pkg.remove'</span>,[<span class="string">'php'</span>])</span><br></pre></td></tr></table></figure><h4 id="status"><a href="#status" class="headerlink" title="status"></a>status</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> status.version</span><br></pre></td></tr></table></figure><p>API</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> salt.client</span><br><span class="line">client = salt.client.LocalClient()</span><br><span class="line">client.cmd(<span class="string">'*'</span>,<span class="string">'status.uptime'</span>)</span><br></pre></td></tr></table></figure><h4 id="system"><a href="#system" class="headerlink" title="system"></a>system</h4><blockquote><p>用来日常操作计算机</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">system.halt        <span class="comment">#停止正在运行的系统</span></span><br><span class="line">system.init 3      <span class="comment">#切换到字符界面，5是图形界面</span></span><br><span class="line">system.poweroff</span><br><span class="line">system.reboot</span><br><span class="line">system.shutdown</span><br></pre></td></tr></table></figure><h4 id="systemd-service"><a href="#systemd-service" class="headerlink" title="systemd(service)"></a>systemd(service)</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">service</span><span class="selector-class">.available</span> <span class="selector-tag">sshd</span>            #查看服务是否可用</span><br><span class="line"><span class="selector-tag">service</span><span class="selector-class">.disable</span> &lt;<span class="selector-tag">service</span> <span class="selector-tag">name</span>&gt;    #设置开机启动的服务</span><br><span class="line"><span class="selector-tag">service</span><span class="selector-class">.enable</span> &lt;<span class="selector-tag">service</span> <span class="selector-tag">name</span>&gt;</span><br><span class="line"><span class="selector-tag">service</span><span class="selector-class">.disabled</span> &lt;<span class="selector-tag">service</span> <span class="selector-tag">name</span>&gt;   #查看服务是不是开机启动</span><br><span class="line"><span class="selector-tag">service</span><span class="selector-class">.enabled</span> &lt;<span class="selector-tag">service</span> <span class="selector-tag">name</span>&gt;</span><br><span class="line"><span class="selector-tag">service</span><span class="selector-class">.get_disabled</span>              #返回所有关闭的服务</span><br><span class="line"><span class="selector-tag">service</span><span class="selector-class">.get_enabled</span>               #返回所有开启的服务</span><br><span class="line"><span class="selector-tag">service</span><span class="selector-class">.get_all</span>                   #返回所有服务</span><br><span class="line"><span class="selector-tag">service</span><span class="selector-class">.reload</span> &lt;<span class="selector-tag">service</span> <span class="selector-tag">name</span>&gt;     #重新载入指定的服务</span><br><span class="line"><span class="selector-tag">service</span><span class="selector-class">.restart</span> &lt;<span class="selector-tag">service</span> <span class="selector-tag">name</span>&gt;    #重启服务</span><br><span class="line"><span class="selector-tag">service</span><span class="selector-class">.start</span> &lt;<span class="selector-tag">service</span> <span class="selector-tag">name</span>&gt;</span><br><span class="line"><span class="selector-tag">service</span><span class="selector-class">.stop</span> &lt;<span class="selector-tag">service</span> <span class="selector-tag">name</span>&gt;</span><br><span class="line"><span class="selector-tag">service</span><span class="selector-class">.status</span> &lt;<span class="selector-tag">service</span> <span class="selector-tag">name</span>&gt;</span><br><span class="line"><span class="selector-tag">service</span><span class="selector-class">.force_reload</span> &lt;<span class="selector-tag">service</span> <span class="selector-tag">name</span>&gt;  #强制载入指定的服务</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@mail python]<span class="comment"># salt '*' service.available sshdmonitor:    True</span></span><br><span class="line"></span><br><span class="line">api调用:</span><br><span class="line">&gt;&gt;&gt; client.cmd(<span class="string">'*'</span>,<span class="string">'service.available'</span>,[<span class="string">'sshd'</span>])&#123;<span class="string">'monitor'</span>: True&#125;</span><br></pre></td></tr></table></figure><h3 id="grains"><a href="#grains" class="headerlink" title="grains"></a>grains</h3><blockquote><p>服务器的一些静态信息，强调的是静态，就是不会变的东西，比如说os是centos，不会变化，除非重新安装系统</p></blockquote><h4 id="grains的使用"><a href="#grains的使用" class="headerlink" title="grains的使用"></a>grains的使用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询所有grains信息</span></span><br><span class="line">[root@master salt]<span class="comment"># salt 'minion-01' grains.items </span></span><br><span class="line">minion-01:</span><br><span class="line">    ----------</span><br><span class="line">    SSDs:</span><br><span class="line">    biosreleasedate:</span><br><span class="line">        09/21/2015</span><br><span class="line">    biosversion:</span><br><span class="line">        6.00</span><br><span class="line">    cpu_flags:</span><br><span class="line">        - fpu</span><br><span class="line">        - vme</span><br><span class="line">        - de</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询grains指定项</span></span><br><span class="line">[root@master salt]<span class="comment"># salt '*' grains.item os</span></span><br><span class="line">minion-02:</span><br><span class="line">    ----------</span><br><span class="line">    os:</span><br><span class="line">        CentOS</span><br><span class="line">minion-01:</span><br><span class="line">    ----------</span><br><span class="line">    os:</span><br><span class="line">        CentOS</span><br><span class="line">[root@master salt]<span class="comment"># </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@master salt]<span class="comment"># salt -G 'os:CentOS' test.ping</span></span><br><span class="line">minion-01:</span><br><span class="line">    True</span><br><span class="line"></span><br><span class="line"><span class="comment">#对系统是CentOS的服务器进行ping测试操作</span></span><br><span class="line"><span class="comment">#os:CentOS ; 就是对应上面grains.items显示出来的os值是CentOs的对象进行匹配 </span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">#对cpu架构是x86_64的服务器显示CPU的个数</span></span><br><span class="line">salt -G <span class="string">'cpuarch:x86_64'</span> grains.item num_cpus</span><br><span class="line"> </span><br><span class="line"><span class="comment">#对字典值的对象进行匹配</span></span><br><span class="line">salt -G <span class="string">'ip_interfaces:eno16777728:192.168.2.*'</span> test.ping</span><br></pre></td></tr></table></figure><p><strong>在SLS中用grains</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在xxx.sls中使用grains</span></span><br><span class="line"><span class="string">'os:CentOS'</span>:</span><br><span class="line">    - match: grain</span><br><span class="line">    - webserver</span><br></pre></td></tr></table></figure><h4 id="自定义grains-两种方法"><a href="#自定义grains-两种方法" class="headerlink" title="自定义grains(两种方法)"></a>自定义grains(两种方法)</h4><p><strong>1 . minion端修改</strong>  重启生效</p><blockquote><p>修改配置文件 /etc/salt/minion  或者写在/etc/salt/grains中</p><p>打开 default_include: minion.d/*.conf   或者直接添加此命令</p><p>在minion端的/etc/salt/minion.d/ 目录下新建并编辑.conf后缀文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">grains: <span class="comment">#如果是/etc/salt/grains中,不需此行</span></span><br><span class="line">  roles:</span><br><span class="line">    - webserver</span><br><span class="line">  sex: boy  <span class="comment">#名字：值</span></span><br><span class="line">  age:      <span class="comment">#名字：多个值</span></span><br><span class="line">    - 33</span><br><span class="line">    - 44</span><br><span class="line"> <span class="comment"># 重启生效</span></span><br><span class="line">[root@master ~]<span class="comment"># salt 'minion-01' grains.item age</span></span><br><span class="line">minion-01:</span><br><span class="line">    ----------</span><br><span class="line">    age:</span><br><span class="line">        - 33</span><br><span class="line">        - 44</span><br><span class="line">[root@master ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>*<em>2 . minion端修改 *</em> 同步之后生效</p><blockquote><p>base目录（在/etc/salt/master中配置的file_roots项，默认在/srv/salt）下生成<strong>_grains</strong> 目录,新建文件,用python来写</p></blockquote><p>编写文件,需要返回一个字典</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> vim test1.py</span><br><span class="line">def hello(): <span class="comment">##函数名字无所谓，应该是所有函数都会运行</span></span><br><span class="line">    agrain = &#123;&#125;</span><br><span class="line">    agrain[<span class="string">'hello'</span>] = <span class="string">'lzl'</span> </span><br><span class="line">    <span class="built_in">return</span> agrain   <span class="comment">##返回这个字典</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">========================</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">import os</span><br><span class="line">def file():</span><br><span class="line">    grains=&#123;&#125;<span class="comment">#初始化一个字典，</span></span><br><span class="line">    file = os.popen(<span class="string">'ulimit -n'</span>).<span class="built_in">read</span>()</span><br><span class="line">    grains[<span class="string">'my_file'</span>]=file</span><br><span class="line">    <span class="built_in">return</span> grains</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意文件赋予权限</span></span><br><span class="line">chmod a+x .py</span><br><span class="line"><span class="comment">#同步到各个minion中去</span></span><br><span class="line">salt <span class="string">'*'</span> saltutil.sync_all</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">[root/srv/salt/_grains] ]<span class="variable">$salt</span> <span class="string">'minion-01'</span> grains.item hello</span><br><span class="line">minion-01:</span><br><span class="line">    ----------</span><br><span class="line">    hello:</span><br><span class="line">        lzl</span><br></pre></td></tr></table></figure><h3 id="pillar"><a href="#pillar" class="headerlink" title="pillar"></a>pillar</h3><blockquote><p>Pillar在salt中是非常重要的组成部分，利用它可以完成很强大的功能，它可以指定一些信息到指定的minion上，不像grains一样是分发到所有Minion上的，它保存的数据可以是动态的,Pillar以sls来写的，格式是键值</p><p>适用</p><p>1.比较敏感的数据，比如密码，key等</p><p>2.特殊数据到特定Minion上</p><p>3.动态的内容</p><p>4.其他数据类型</p></blockquote><h4 id="pillar基本使用"><a href="#pillar基本使用" class="headerlink" title="pillar基本使用"></a>pillar基本使用</h4><p><strong>查看所有</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> pillar.items</span><br></pre></td></tr></table></figure><p><strong>查看某个</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> pillar.item KEY</span><br><span class="line"><span class="comment">#可以取到更小粒度的</span></span><br><span class="line">salt <span class="string">'*'</span> pillar.get &lt;key&gt;:&lt;key&gt;</span><br></pre></td></tr></table></figure><h4 id="编写pillar"><a href="#编写pillar" class="headerlink" title="编写pillar"></a>编写pillar</h4><blockquote><p>指定pillar_roots</p><p>默认是/srv/pillar/(可通过修改master配置文件修改),建立目录</p></blockquote><p><strong>top.sls</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">base:           <span class="comment">#指定环境</span></span><br><span class="line">  <span class="string">'*'</span>:          <span class="comment">#target</span></span><br><span class="line">    - test1     <span class="comment">#引用test1.sls 或者test1/init.sls</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#通过分组名匹配，</span></span><br><span class="line">base:</span><br><span class="line">  group1:</span><br><span class="line">    - match: nodegroup    <span class="comment">#必须要有 - match: nodegroup  </span></span><br><span class="line">    - webserver  </span><br><span class="line"></span><br><span class="line"><span class="comment">#通过grain模块匹配的示例</span></span><br><span class="line">base:</span><br><span class="line">  <span class="string">'os:CentOS'</span>:</span><br><span class="line">    - match: grain   <span class="comment">#必须要有- match: grain</span></span><br><span class="line">    - webserver</span><br></pre></td></tr></table></figure><p><strong>test1.sls</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name: test1</span><br><span class="line">user: lzl</span><br></pre></td></tr></table></figure><p><strong>刷新</strong>  pillar数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> saltutil.refresh_pillar</span><br></pre></td></tr></table></figure><p><strong>查看结果</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root/srv/pillar] ]<span class="variable">$salt</span> <span class="string">'minion-01'</span> pillar.items</span><br><span class="line">minion-01:</span><br><span class="line">    ----------</span><br><span class="line">    name:</span><br><span class="line">        test1</span><br><span class="line">    user:</span><br><span class="line">        lzl</span><br><span class="line">[root/srv/pillar] ]$</span><br></pre></td></tr></table></figure><h4 id="在state中通过jinja使用pillar"><a href="#在state中通过jinja使用pillar" class="headerlink" title="在state中通过jinja使用pillar"></a>在state中通过jinja使用pillar</h4><p>默认state文件位置/src/salt/</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">user.sls</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> user, uid <span class="keyword">in</span> pillar.get(<span class="string">'users'</span>, &#123;&#125;).items() %&#125;  </span><br><span class="line"> <span class="comment">##pillar.get('users',&#123;&#125;)可用pillar['users']代替，前者在没有得到值的情况下，赋默认值</span></span><br><span class="line">&#123;&#123;user&#125;&#125;:</span><br><span class="line">  user.present:</span><br><span class="line">    - uid: &#123;&#123;uid&#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h4 id="jinja配合grains-指定pillar数据"><a href="#jinja配合grains-指定pillar数据" class="headerlink" title="jinja配合grains 指定pillar数据"></a>jinja配合grains 指定pillar数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> grains[<span class="string">'os_family'</span>] == <span class="string">'RedHat'</span> %&#125;</span><br><span class="line">apache: httpd</span><br><span class="line">&#123;% <span class="keyword">elif</span> grains[<span class="string">'os'</span>] == <span class="string">'CentOS'</span> %&#125;</span><br><span class="line">apache: httpd</span><br><span class="line">vim: vim</span><br><span class="line">&#123;% <span class="keyword">elif</span> grains[<span class="string">'os'</span>] == <span class="string">'Arch'</span> %&#125;</span><br><span class="line">apache: apache</span><br><span class="line">vim: vim</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h3 id="使用salt-state"><a href="#使用salt-state" class="headerlink" title="使用salt state"></a>使用salt state</h3><blockquote><p>它的核心是写sls(SaLt State file)文件,sls文件默认格式是YAML格式，并默认使用jinja模板，jinja是根据django的模板语言发展而来的语言，简单并强大，支持for if 等循环判断。salt state主要用来描述系统，软性，服务，配置文件的状态，常常被称为配置管理！</p></blockquote><blockquote><p>通常state，pillar,top file会用sls文件来编写。state文件默认是放在/srv/salt中，它与你的master配置文件中的file_roots设置有关</p></blockquote><h4 id="简单的state文件配置-amp-介绍"><a href="#简单的state文件配置-amp-介绍" class="headerlink" title="简单的state文件配置&amp;介绍"></a>简单的state文件配置&amp;介绍</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/srv/salt/apahce.sls</span></span><br><span class="line"></span><br><span class="line">apache:           <span class="comment">##state ID，全文件唯一,如果模块没跟-name默认用的ID作为-name</span></span><br><span class="line"> pkg:             <span class="comment">##模块</span></span><br><span class="line">   <span class="comment">#- name: apache ##函数参数，可以省略</span></span><br><span class="line">   - installed    <span class="comment">##函数</span></span><br><span class="line"> service:         <span class="comment">##模块</span></span><br><span class="line">   - running      <span class="comment">##函数</span></span><br><span class="line">  <span class="comment">#- name: apache ##函数参数，这个是省略的，也可以写上</span></span><br><span class="line">   - require:     <span class="comment">##依赖系统</span></span><br><span class="line">     - pkg: apache  <span class="comment">##表示依赖id为apache的pkg状态</span></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line"><span class="comment">#声明一个叫apache的状态id,该id可以随意，最好能表示一定意思</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pkg代表的是pkg模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#installed是pkg模块下的一个函数，描述的是状态，该函数表示apache是否部署，返回值为True或者False，为真时，表示状态OK，否则会去满足该状态(下载安装apache)，如果满足不了会提示error,在该模块上面省略了参数-name: apache,因为ID为apache,这些参数是模块函数需要的（可以去查看源码）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#service是指的service模块</span></span><br><span class="line"><span class="comment">#这个模块下主要是描述service状态的函数，running状态函数表示apache在运行，省略-name不在表述，-require表示依赖系统，依赖系统是state system的重要组成部分，在该处描述了apache服务的运行需要依赖apache软件的部署，这里就要牵涉到sls文件的执行，sls文件在salt中执行时无序(如果没有指定顺序，后面会讲到order)，假如先执行了service这个状态，它发现依赖pkg包的安装，会去先验证pkg的状态有没有满足，如果没有依赖关系的话，我们可以想象，如果没有安装apache，apache 的service肯定运行会失败的，我们来看看怎么执行这个sls文件:</span></span><br><span class="line">     </span><br><span class="line">salt <span class="string">'*'</span> state.sls apache  </span><br><span class="line"></span><br><span class="line"><span class="comment">#在命令行里这样执行，.sls不写，如果在目录下，将目录与文件用’.’隔开，</span></span><br><span class="line"><span class="comment">#如： httpd/apache.sls –&gt; httpd.apache</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">salt <span class="string">'*'</span> state.highstate </span><br><span class="line"><span class="comment">#前提是存在top.sls 去指定minion运行的是哪个文件</span></span><br><span class="line"><span class="comment">#top.sls</span></span><br><span class="line">base:</span><br><span class="line">  <span class="string">'*'</span>:</span><br><span class="line">    - webserver</span><br></pre></td></tr></table></figure><blockquote><p>state.sls默认的运行环境是base环境，但是它并不读取top.sls（top.sls定义了运行环境以及需要运行的sls）</p><p>state.sls也可以指定读取哪个环境：state.sls  salt_env=’prod’ xxxx.sls，这个xxxx.sls可以不在top.sls中记录。</p><p>state.highstate: 这个是全局的所有环境，以及所有状态都生效。它会读取每一个环境的top.sls，并且对所有sls都生效。不在top.sls文件里面记录的sls则不会被执行；</p></blockquote><p>阅读后写的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">webserver:</span><br><span class="line">  pkg:</span><br><span class="line">    - name: httpd</span><br><span class="line">    - installed</span><br><span class="line">  service:</span><br><span class="line">    - name: httpd</span><br><span class="line">    - running</span><br><span class="line">    - reqire:</span><br><span class="line">      -pkg: httpd</span><br><span class="line"></span><br><span class="line">[root/srv/salt] ]<span class="variable">$salt</span> <span class="string">'minion-02'</span> state.sls webserver</span><br><span class="line">minion-02:</span><br><span class="line">----------</span><br><span class="line">          ID: webserver</span><br><span class="line">    Function: pkg.installed</span><br><span class="line">        Name: httpd</span><br><span class="line">      Result: True</span><br><span class="line">     Comment: The following packages were installed/updated: httpd</span><br><span class="line">     Started: 18:24:07.033564</span><br><span class="line">    Duration: 65091.443 ms</span><br><span class="line">     Changes:   </span><br><span class="line">              ----------</span><br><span class="line">              httpd:</span><br><span class="line">                  ----------</span><br><span class="line">                  new:</span><br><span class="line">                      2.4.6-45.el7.centos</span><br><span class="line">                  old:</span><br><span class="line">              httpd-tools:</span><br><span class="line">                  ----------</span><br><span class="line">                  new:</span><br><span class="line">                      2.4.6-45.el7.centos</span><br><span class="line">                  old:</span><br><span class="line">              mailcap:</span><br><span class="line">                  ----------</span><br><span class="line">                  new:</span><br><span class="line">                      2.1.41-2.el7</span><br><span class="line">                  old:</span><br><span class="line">----------</span><br><span class="line">          ID: webserver</span><br><span class="line">    Function: service.running</span><br><span class="line">        Name: httpd</span><br><span class="line">      Result: True</span><br><span class="line">     Comment: Started Service httpd</span><br><span class="line">     Started: 18:25:12.142495</span><br><span class="line">    Duration: 5599.171 ms</span><br><span class="line">     Changes:   </span><br><span class="line">              ----------</span><br><span class="line">              httpd:</span><br><span class="line">                  True</span><br><span class="line"></span><br><span class="line">Summary</span><br><span class="line">------------</span><br><span class="line">Succeeded: 2 (changed=2)</span><br><span class="line">Failed:    0</span><br><span class="line">------------</span><br><span class="line">Total states run:     2</span><br><span class="line">[root/srv/salt] ]$</span><br></pre></td></tr></table></figure><h4 id="较复杂的state"><a href="#较复杂的state" class="headerlink" title="较复杂的state"></a>较复杂的state</h4><p><strong>/srv/salt/ssh/init.sls</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">openssh-client:</span><br><span class="line">  pkg.installed</span><br><span class="line">/etc/ssh/ssh_config:</span><br><span class="line">  file.managed:</span><br><span class="line">    - user: root</span><br><span class="line">    - group: root</span><br><span class="line">    - mode: 644</span><br><span class="line">    - <span class="built_in">source</span>: salt://ssh/ssh_config</span><br><span class="line">    - require:</span><br><span class="line">      - pkg: openssh-client</span><br><span class="line"><span class="comment">#ssh/init.sls 意思是当执行 salt '*' state.sls ssh的时候其实就是执行init.sls</span></span><br><span class="line"><span class="comment">#第一行:文件名,全文件唯一,如果pkg等模块没跟- name 包名, 默认用的ID作为-name</span></span><br><span class="line"><span class="comment">#第二行: 简写,意思pkg下的installed函数</span></span><br><span class="line"><span class="comment">#第三行: ID 告诉minion下载的文件应该放哪里!</span></span><br><span class="line"><span class="comment">#第四行:简写</span></span><br><span class="line"><span class="comment">#第八行:source是告诉minion从哪里下载源文件!</span></span><br><span class="line"><span class="comment">#salt://ssh/ssh_config其实就是/srv/salt/ssh/ssh_config 前面/srv/salt这个路径和file_roots的配置有关</span></span><br></pre></td></tr></table></figure><p><strong>/srv/salt/ssh/server.sls</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">include:</span><br><span class="line">  - ssh</span><br><span class="line"><span class="comment">#include表示包含意思，就是把ssh/init.sls直接包含进来</span></span><br><span class="line"></span><br><span class="line">openssh-server:</span><br><span class="line"> pkg.installed</span><br><span class="line"></span><br><span class="line">sshd:</span><br><span class="line">  service.running:</span><br><span class="line">    - require:</span><br><span class="line">      - pkg: openssh-client</span><br><span class="line">      - pkg: openssh-server</span><br><span class="line">      - file: /etc/ssh/banner</span><br><span class="line">      - file: /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">/etc/ssh/sshd_config:</span><br><span class="line">  file.managed:</span><br><span class="line">    - user: root</span><br><span class="line">    - group: root</span><br><span class="line">    - mode: 644</span><br><span class="line">    - <span class="built_in">source</span>: salt://ssh/sshd_config</span><br><span class="line">    - require:</span><br><span class="line">      - pkg: openssh-server</span><br><span class="line">/etc/ssh/banner:</span><br><span class="line">  file:</span><br><span class="line">    - managed</span><br><span class="line">    - user: root</span><br><span class="line">    - group: root</span><br><span class="line">    - mode: 644</span><br><span class="line">    - <span class="built_in">source</span>: salt://ssh/banner</span><br><span class="line">    - require:</span><br><span class="line">      - pkg: openssh-server</span><br></pre></td></tr></table></figure><blockquote><p>此时的目录结构应该是</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├── <span class="selector-tag">ssh</span></span><br><span class="line">│   ├── <span class="selector-tag">banner</span></span><br><span class="line">│   ├── <span class="selector-tag">init</span><span class="selector-class">.sls</span></span><br><span class="line">│   ├── <span class="selector-tag">server</span><span class="selector-class">.sls</span></span><br><span class="line">│   ├── <span class="selector-tag">ssh_config</span></span><br><span class="line">│   └── <span class="selector-tag">sshd_config</span></span><br></pre></td></tr></table></figure><p><strong>关于include</strong>古官网的demo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">include:</span><br><span class="line">  - ssh.server</span><br><span class="line">extend:</span><br><span class="line">  /etc/ssh/banner:</span><br><span class="line">    file:</span><br><span class="line">      - <span class="built_in">source</span>: salt://ssh/custom-banner</span><br><span class="line"> </span><br><span class="line"><span class="comment">#包含ssh/server.sls,扩展/etc/ssh/banner，重新其source而其它的如user,group等不变，与include一致。</span></span><br><span class="line"></span><br><span class="line">include:</span><br><span class="line">  - apache</span><br><span class="line">extend:</span><br><span class="line">  apache:</span><br><span class="line">  service:</span><br><span class="line">    - watch:</span><br><span class="line">      - pkg: mod_python</span><br><span class="line"><span class="comment">#把apache.sls包含进来，想apache-service是追加了依赖关系(watch也是依赖系统的函数).</span></span><br></pre></td></tr></table></figure><h3 id="关于渲染器-render-system"><a href="#关于渲染器-render-system" class="headerlink" title="关于渲染器 render system"></a>关于渲染器 render system</h3><blockquote><p>salt默认是用的yaml_jinja渲染器处理ss文件,会优先使用jinjia处理,然后传给yaml处理然后生成salt需要的python数据类型.</p></blockquote><p><strong>apache/init.sls</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">apache:</span><br><span class="line">  pkg:installed:</span><br><span class="line">    &#123;% <span class="keyword">if</span> grains[<span class="string">'os'</span>] == <span class="string">'CentoOS'</span> %&#125;</span><br><span class="line">    - name: httpd</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  service.running:</span><br><span class="line">    &#123;% <span class="keyword">if</span> grains[<span class="string">'os'</span>] == <span class="string">'CentoOS'</span> %&#125;</span><br><span class="line">    - name: httpd</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    - watch:</span><br><span class="line">      - pkg: apache</span><br><span class="line">      </span><br><span class="line"><span class="comment">#简单的例子,使用jinja结合grains进行判断</span></span><br></pre></td></tr></table></figure><p><strong>user/init.sls</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> users = [<span class="string">'jerry'</span>,<span class="string">'tom'</span>,<span class="string">'gaga'</span>] %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> user <span class="keyword">in</span> users %&#125;</span><br><span class="line">&#123;&#123; user &#125;&#125;:</span><br><span class="line"> user.present:</span><br><span class="line">   - shell: /bin/bash</span><br><span class="line">   - home: /home/&#123;&#123; user &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">---------------------------</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">if</span> salt[<span class="string">'cmd.run'</span>](<span class="string">'uname -i'</span>) == <span class="string">'x86_64'</span> %&#125;</span><br><span class="line">hadoop:</span><br><span class="line"> user.present:</span><br><span class="line">   - shell: /bin/bash</span><br><span class="line">   - home: /home/hadoop</span><br><span class="line">&#123;% <span class="keyword">elif</span> salt[<span class="string">'cmd.run'</span>](<span class="string">'uname -i'</span>) == <span class="string">'i386'</span> %&#125;</span><br><span class="line">openstack:</span><br><span class="line"> user.present:</span><br><span class="line">   - shell: /bin/bash</span><br><span class="line">- home: /home/openstack</span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">django:</span><br><span class="line"> user.present:</span><br><span class="line">   - shell: /sbin/nologin</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h4 id="py渲染器"><a href="#py渲染器" class="headerlink" title="py渲染器"></a>py渲染器</h4><blockquote><p>纯python写的sls文件.如果使用其他的渲染器,需要在文件开头声明,!py就是声明用的py渲染器,</p><p>py中可用的变量有<strong>salt</strong>,<strong>grains</strong>,<strong>pillar</strong>,<strong>opts</strong>,<strong>env</strong>,<strong>sls</strong>,前三个分别对应jinja里的salt,grains,pillar,<strong>opts</strong>是minion的配置文件的字典，<strong>env</strong>对应的是环境如base,<strong>sls</strong>对应的是sls的文件名</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">   <span class="string">'''add user hadoop'''</span></span><br><span class="line">platform = os.popen(<span class="string">'uname -a'</span>).read().strip()</span><br><span class="line"><span class="keyword">if</span> platform == <span class="string">'x86_64'</span>:</span><br><span class="line">   <span class="keyword">return</span> &#123;<span class="string">'hadoop'</span>: &#123;<span class="string">'user'</span>: [<span class="string">'present'</span>,&#123;<span class="string">'shell'</span>: <span class="string">'/bin/bash'</span>&#125;, &#123;<span class="string">'home'</span>: <span class="string">'/home/hadoop'</span>&#125;]&#125;&#125;</span><br><span class="line"><span class="keyword">elif</span> platform == <span class="string">'i386'</span>:</span><br><span class="line">       <span class="keyword">return</span> &#123;<span class="string">'openstack'</span>: &#123;<span class="string">'user'</span>: [<span class="string">'present'</span>, &#123;<span class="string">'shell'</span>: <span class="string">'/bin/bash'</span>&#125;, &#123;<span class="string">'home'</span>: <span class="string">'/home/openstack'</span>&#125;]&#125;&#125;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">return</span> &#123;<span class="string">'django'</span>: &#123;<span class="string">'user'</span>: [<span class="string">'present'</span>, &#123;<span class="string">'shell'</span>: <span class="string">'/sbin/nologin'</span>&#125;]&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意的是return的数据结构&#123;ID: &#123;module: [func, arg1,arg2,...,]&#125;&#125; 或 &#123;ID: &#123;module.func: [arg1,arg2,..,]&#125;&#125; 。表示的内容与“示例；salt字典”表达的相同</span></span><br></pre></td></tr></table></figure><h3 id="state的执行顺序"><a href="#state的执行顺序" class="headerlink" title="state的执行顺序"></a>state的执行顺序</h3><blockquote><p>stata执行,也就是.sls文件的执行是无序的.为了保证每次的顺序是一致的,就加入了state order ,</p><p>先了解下高级数据(High Data)和低级数据(Low Data).</p><p>高级数据就是指编写的sls文件的数据</p><p>低级数据就是经过render和parser编译过的数据</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">[root~] ]<span class="variable">$salt</span> <span class="string">'minion-01'</span> state.show_highstate</span><br><span class="line">minion-01:</span><br><span class="line">    ----------</span><br><span class="line">    webserver:</span><br><span class="line">        ----------</span><br><span class="line">        __env__:</span><br><span class="line">            base</span><br><span class="line">        __sls__:</span><br><span class="line">            webserver</span><br><span class="line">        pkg:</span><br><span class="line">            |_</span><br><span class="line">              ----------</span><br><span class="line">              name:</span><br><span class="line">                  httpd</span><br><span class="line">            - installed</span><br><span class="line">            |_</span><br><span class="line">              ----------</span><br><span class="line">              order:</span><br><span class="line">                  10000</span><br><span class="line">        service:</span><br><span class="line">            |_</span><br><span class="line">              ----------</span><br><span class="line">              name:</span><br><span class="line">                  httpd</span><br><span class="line">            - running</span><br><span class="line">            |_</span><br><span class="line">              ----------</span><br><span class="line">              -pkg:</span><br><span class="line">                  httpd</span><br><span class="line">              reqire:</span><br><span class="line">                  None</span><br><span class="line">            |_</span><br><span class="line">              ----------</span><br><span class="line">              order:</span><br><span class="line">                  10001</span><br><span class="line">[root~] ]<span class="variable">$salt</span> <span class="string">'minion-01'</span> state.show_lowstate</span><br><span class="line">minion-01:</span><br><span class="line">    |_</span><br><span class="line">      ----------</span><br><span class="line">      __env__:</span><br><span class="line">          base</span><br><span class="line">      __id__:</span><br><span class="line">          webserver</span><br><span class="line">      __sls__:</span><br><span class="line">          webserver</span><br><span class="line">      fun:</span><br><span class="line">          installed</span><br><span class="line">      name:</span><br><span class="line">          httpd</span><br><span class="line">      order:</span><br><span class="line">          10000</span><br><span class="line">      state:</span><br><span class="line">          pkg</span><br><span class="line">    |_</span><br><span class="line">      ----------</span><br><span class="line">      -pkg:</span><br><span class="line">          httpd</span><br><span class="line">      __env__:</span><br><span class="line">          base</span><br><span class="line">      __id__:</span><br><span class="line">          webserver</span><br><span class="line">      __sls__:</span><br><span class="line">          webserver</span><br><span class="line">      fun:</span><br><span class="line">          running</span><br><span class="line">      name:</span><br><span class="line">          httpd</span><br><span class="line">      order:</span><br><span class="line">          10001</span><br><span class="line">      reqire:</span><br><span class="line">          None</span><br><span class="line">      state:</span><br><span class="line">          service</span><br><span class="line">[root~] ]$</span><br></pre></td></tr></table></figure><blockquote><p>查看可知,里面有个order,这个是默认salt 会自动设置,从10000开始.可通过修改master <code>state_auto_order: False</code>来关闭</p></blockquote><h4 id="order的设定"><a href="#order的设定" class="headerlink" title="order的设定"></a>order的设定</h4><ul><li>include</li></ul><blockquote><p>被include的文件Order靠前,先执行</p></blockquote><ul><li>手动定义order</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">httpd:</span><br><span class="line">  pkg:</span><br><span class="line">    - installed</span><br><span class="line">    - order: 1</span><br><span class="line"><span class="comment">#order的值越小,优先级越高.但是-1 是最后!</span></span><br></pre></td></tr></table></figure><ul><li>依赖关系系统</li></ul><p>就是前面使用过的 - require</p><h3 id="依赖关系系统-requisite-system"><a href="#依赖关系系统-requisite-system" class="headerlink" title="依赖关系系统 requisite system"></a>依赖关系系统 requisite system</h3><blockquote><p>我们已经使用过依赖关系系统了,就是定义状态和状态之间的依赖关系,常用的函数有 <code>require</code>和<code>watch</code> 以及他们的变种<code>require_in</code>和<code>watch-in</code></p><p>四者有何区别?</p><p>require,watch是指依赖，require_in,watch_in是指被依赖</p></blockquote><blockquote><p>watch 常用于service,而且当依赖条件发生变化的时候会执行一些动作</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/etc/httpd/httpd.conf:</span><br><span class="line">  file:</span><br><span class="line">    - managed</span><br><span class="line">    - <span class="built_in">source</span>: salt://httpd/httpd.conf</span><br><span class="line">  pkg.installed</span><br><span class="line">  service:</span><br><span class="line">    - running</span><br><span class="line">    - require:</span><br><span class="line">      - pkg: httpd</span><br><span class="line">    - watch:</span><br><span class="line">      - file://etc/httpd/httpd.conf <span class="comment">#当httpd.conf改变时，重启httpd服务</span></span><br><span class="line">    </span><br><span class="line">============================    </span><br><span class="line"></span><br><span class="line">/etc/httpd/httpd.conf:</span><br><span class="line">  file:</span><br><span class="line">    - managed</span><br><span class="line">    - <span class="built_in">source</span>: salt://httpd/httpd.conf   </span><br><span class="line">    - watch_in:</span><br><span class="line">      - service: httpd</span><br><span class="line">  httpd:</span><br><span class="line">    pkg:</span><br><span class="line">      - installed</span><br><span class="line">      - require_in:</span><br><span class="line">        - service: httpd</span><br><span class="line">    service:</span><br><span class="line">      - running</span><br></pre></td></tr></table></figure><h3 id="salt-state多环境"><a href="#salt-state多环境" class="headerlink" title="salt state多环境"></a>salt state多环境</h3><blockquote><p>针对不同的环境,应用不同state的file,比如开发,测试,生产等.</p><p>通过修改master对不同的环境应用不通过的目录</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#官方demo</span></span><br><span class="line">Example:</span><br><span class="line">  file_roots:</span><br><span class="line">    base:</span><br><span class="line">      - /srv/salt/</span><br><span class="line">    dev:</span><br><span class="line">      - /srv/salt/dev/services</span><br><span class="line">      - /srv/salt/dev/states</span><br><span class="line">    prod:</span><br><span class="line">      - /srv/salt/prod/services</span><br><span class="line">      - /srv/salt/prod/states</span><br><span class="line"><span class="comment">#file_roots 配置salt配置的存放目录, 其中base环境是必要的, 指定top.sls存放的位置.</span></span><br><span class="line"><span class="comment">#默认没指定环境时则从base目录获取文件</span></span><br><span class="line"><span class="comment">#其它则是一些自定义的, 可以通过环境变量指定.</span></span><br><span class="line"><span class="comment">#这样可以逻辑上隔离一些环境配置.</span></span><br><span class="line"><span class="comment">#每一个环境都可以定义多个目录, 优先级关系由定义目录的顺序决定.</span></span><br><span class="line">file_roots:</span><br><span class="line">  base:</span><br><span class="line">    - /srv/salt/foo</span><br><span class="line">    - /srv/salt/bar</span><br><span class="line"><span class="comment">#如果寻找 salt://file.sls, 如果都存在/srv/salt/foo/file.sls和/srv/salt/bar/file.sls, 则使用第一个找到的.</span></span><br></pre></td></tr></table></figure><p>另一个例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">file_roots:</span><br><span class="line">  base:</span><br><span class="line">    - /srv/salt/prod</span><br><span class="line">  qa:</span><br><span class="line">    - /srv/salt/qa</span><br><span class="line">    - /srv/salt/prod</span><br><span class="line">  dev:</span><br><span class="line">    - /srv/salt/dev</span><br><span class="line">    - /srv/salt/qa</span><br><span class="line">    - /srv/salt/prod</span><br><span class="line"><span class="comment">#/srv/salt/prod 里的配置是在三种环境下都可以, /srv/salt/qa 只在qa和dev环境下可用, /srv/salt/dev则只在dev环境下可用.</span></span><br></pre></td></tr></table></figure><p>简答你的实施案例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#master配置</span></span><br><span class="line">file_roots:</span><br><span class="line">  base:</span><br><span class="line">    - /home/base/</span><br><span class="line">  dev:</span><br><span class="line">    - /home/dev/</span><br><span class="line">    - /home/base/</span><br><span class="line">    </span><br><span class="line"><span class="comment">#base环境   </span></span><br><span class="line"><span class="comment">#/home/base</span></span><br><span class="line">├── envtest.sls</span><br><span class="line">└── top.sls</span><br><span class="line"></span><br><span class="line"><span class="comment">#cat /home/base/envtest.sls</span></span><br><span class="line">envtest:</span><br><span class="line">  cmd.run:</span><br><span class="line">    - name: <span class="string">"echo '[base] env'"</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment">#dev环境</span></span><br><span class="line"><span class="comment">#/home/dev/</span></span><br><span class="line">├── mytest.sls</span><br><span class="line">└── top.sls</span><br><span class="line"></span><br><span class="line"><span class="comment">#cat /home/dev/mytest.sls</span></span><br><span class="line">envtest:</span><br><span class="line">  cmd.run:</span><br><span class="line">    - name: <span class="string">"echo '[dev] env'"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##执行效果如下,如果不添加环境变量,则提示找不到文件</span></span><br><span class="line">[root/srv/salt/dev] ]<span class="variable">$salt</span> <span class="string">'minion-01'</span> state.sls mytest  <span class="built_in">test</span>=True</span><br><span class="line">minion-01:</span><br><span class="line">    Data failed to compile:</span><br><span class="line">----------</span><br><span class="line">    No matching sls found <span class="keyword">for</span> <span class="string">'mytest'</span> <span class="keyword">in</span> env <span class="string">'base'</span></span><br><span class="line">ERROR: Minions returned with non-zero <span class="built_in">exit</span> code</span><br><span class="line"></span><br><span class="line"><span class="comment">#加上环境变量执行</span></span><br><span class="line">[root/srv/salt/dev] ]<span class="variable">$salt</span> <span class="string">'minion-01'</span> state.sls mytest saltenv=<span class="string">'dev'</span> <span class="built_in">test</span>=True</span><br><span class="line">minion-01:</span><br><span class="line">----------</span><br><span class="line">          ID: mytest</span><br><span class="line">    Function: cmd.run</span><br><span class="line">        Name: <span class="built_in">echo</span> dev-env</span><br><span class="line">      Result: None</span><br><span class="line">     Comment: Command <span class="string">"echo dev-env"</span> would have been executed</span><br><span class="line">     Started: 23:54:46.298421</span><br><span class="line">    Duration: 0.422 ms</span><br><span class="line">     Changes:   </span><br><span class="line"></span><br><span class="line">Summary</span><br><span class="line">------------</span><br><span class="line">Succeeded: 1 (unchanged=1)</span><br><span class="line">Failed:    0</span><br><span class="line">------------</span><br><span class="line">Total states run:     1</span><br><span class="line">[root/srv/salt/dev] ]$</span><br></pre></td></tr></table></figure><h3 id="salt-schedule-salt中的crontab"><a href="#salt-schedule-salt中的crontab" class="headerlink" title="salt schedule(salt中的crontab)"></a>salt schedule(salt中的crontab)</h3><blockquote><p>周期性的执行一些函数,需要注意的是: 在minion上执行salt可执行模块里的函数,在master执行的是runner模块的函数.</p><p>共有三种方式:master minion  pillar</p></blockquote><ul><li>master端</li><li>minion端</li><li>pillar</li></ul><blockquote><p>一般而言,尤其是在minion端配置,基本不会用到的,主要还是一pillar为主</p></blockquote><p><strong>修改top.sls</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加</span></span><br><span class="line">  - schedule</span><br></pre></td></tr></table></figure><p><strong>/srv/pillar/schedule.sls</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">schedule:</span><br><span class="line">  <span class="built_in">test</span>-job:</span><br><span class="line">    <span class="keyword">function</span>: cmd.run</span><br><span class="line">    seconds: 10</span><br><span class="line">    args:</span><br><span class="line">      - <span class="string">'date &gt;&gt; /date.log'</span></span><br><span class="line">      </span><br><span class="line"><span class="comment">#没隔10S 在/目录的date.log文件中记录一条时间</span></span><br><span class="line">salt <span class="string">"*"</span> saltutil.refresh_pillar</span><br><span class="line"><span class="comment">#刷新pillar到minion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#回到minion 可以查看到</span></span><br><span class="line">[root@minion-01 /]<span class="comment"># ls</span></span><br><span class="line">bin  boot  date.log  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@minion-01 /]<span class="comment"># cat date.log </span></span><br><span class="line">Fri Mar 24 02:27:40 CST 2017</span><br><span class="line">Fri Mar 24 02:27:50 CST 2017</span><br><span class="line">Fri Mar 24 02:28:00 CST 2017</span><br><span class="line">....</span><br></pre></td></tr></table></figure><h3 id="salt-ssh"><a href="#salt-ssh" class="headerlink" title="salt ssh"></a>salt ssh</h3><blockquote><p>salt-ssh 是 0.17.0 新出现的一个功能.对于有些不能安装minion的机器,ssh不失为一种好的选择但是SSH并不能取代minion,salt的有些功能不支持ssh.而且走的是SSH 并不是ZeroMQ,所以速度会有所影响</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先安装salt-ssh.</span></span><br><span class="line">yum -y install salt-ssh</span><br><span class="line">[root~] ]<span class="variable">$cat</span> /etc/salt/roster <span class="comment">#roster文件名和路径!</span></span><br><span class="line">minion-01:</span><br><span class="line">  host: 192.168.247.153</span><br><span class="line">  user: root</span><br><span class="line">  passwd: centos</span><br><span class="line">minion-02:</span><br><span class="line">  host: 192.168.247.154</span><br><span class="line">  user: root</span><br><span class="line">  passwd: centos</span><br><span class="line">  sudo: True</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果不给passwd的话,执行salt-ssh会提示输入密码</span></span><br><span class="line"><span class="comment">#普通用户给sudo权限</span></span><br><span class="line"><span class="comment">#第一次使用记得加参数 -i 否则报错如下</span></span><br><span class="line">[root~] ]<span class="variable">$salt</span>-ssh <span class="string">'minion-01'</span> test.ping</span><br><span class="line">minion-01:</span><br><span class="line">    ----------</span><br><span class="line">    retcode:</span><br><span class="line">        254</span><br><span class="line">    stderr:</span><br><span class="line">    stdout:</span><br><span class="line">        The host key needs to be accepted, to auto accept run salt-ssh with the -i flag:</span><br><span class="line">        The authenticity of host <span class="string">'192.168.247.153 (192.168.247.153)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">        ECDSA key fingerprint is 16:f6:f5:49:24:9c:91:da:d7:02:58:a2:14:08:e4:15.</span></span><br><span class="line"><span class="string">        Are you sure you want to continue connecting (yes/no)? </span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">#第一次运行 添加-i参数</span></span><br><span class="line"><span class="string">[root~] ]$salt-ssh '</span>minion-01<span class="string">' test.ping -i</span></span><br><span class="line"><span class="string">minion-01:</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">[root~] ]$salt-ssh '</span>minion-01<span class="string">' test.ping</span></span><br><span class="line"><span class="string">minion-01:</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">[root~] ]$</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;salt简介&quot;&gt;&lt;a href=&quot;#salt简介&quot; class=&quot;headerlink&quot; title=&quot;salt简介&quot;&gt;&lt;/a&gt;salt简介&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;SaltStack是一个服务器基础架构集中化管理平台，具备配置管理、远程执行、监控等功能，基于Python语言实现，结合轻量级消息队列（ZeroMQ）与Python第三方模块（Pyzmq、PyCrypto、Pyjinjia2、python-msgpack和PyYAML等）构建。&lt;/p&gt;
&lt;p&gt;通过部署SaltStack，我们可以在成千万台服务器上做到批量执行命令，根据不同业务进行配置集中化管理、分发文件、采集服务器数据、操作系统基础及软件包管理等，SaltStack是运维人员提高工作效率、规范业务配置与操作的利器。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="知识扩展" scheme="https://pl1649947109.github.io/pl1649947109/tags/%E7%9F%A5%E8%AF%86%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>第二讲——面试题、数据库连接池</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/20/%E4%B9%A6/flask/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E2%80%94%E2%80%94%E9%9D%A2%E8%AF%95%E9%A2%98%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E3%80%81%E9%85%8D%E7%BD%AE%E3%80%81%E8%B7%AF%E7%94%B1%E3%80%81%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/20/书/flask/第二讲——面试题、数据库连接池、配置、路由、中间件/</id>
    <published>2019-11-20T12:00:00.000Z</published>
    <updated>2019-11-21T13:41:02.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>1.编程语言及他们之间的区别？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C/C++ ,很多语言的底层实现都是与C，代码执行效率高，自己做内存管理，对代码要求比较高，很多功</span><br><span class="line">能需要手动试下。</span><br><span class="line">Java，比较好的编程语言，很多企业级应用都会选择java。</span><br><span class="line">C#，是微软开始的编程语言，部署时需要放在windown server 上，最大弊端是window系统花钱。</span><br><span class="line">PHP，一般用于快速搭建网站。</span><br><span class="line">Python，简洁且入门简单，很少的代码就可以做很多事情。</span><br><span class="line">Golang，语法和C比较接近，处理并发时比较有优势 + docker。</span><br></pre></td></tr></table></figure><p>2.构造函数和析构函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">构造函数，用于创建对象的函数。</span><br><span class="line">析构函数，用于销毁对象的函数。</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(self,*args,**kwargs)</span>:</span> <span class="comment"># 构造函数</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self,*args,**kwargs)</span>:</span> <span class="comment"># 析构函数</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">obj = Foo()</span><br><span class="line"><span class="keyword">del</span> obj</span><br></pre></td></tr></table></figure><a id="more"></a><p>3.重写和重载的区别?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(self,int a1)</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(self,string a1)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">重载，函数名相同而参数类型/个数/返回值不同。</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(self)</span>:</span></span><br><span class="line">print(<span class="number">123</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span><span class="params">(Foo)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(self)</span>:</span></span><br><span class="line">print(<span class="number">666</span>)</span><br><span class="line">重写，在子类中对父类中的方法进行重写。</span><br></pre></td></tr></table></figure><p>4.什么是接口？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Interface IPerson:</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(self,a1)</span></span></span><br><span class="line"><span class="function">    <span class="title">def</span> <span class="title">f2</span><span class="params">(self,a1)</span></span></span><br><span class="line">public interface Predator &#123;</span><br><span class="line">    boolean chasePrey(Prey p);</span><br><span class="line">    void eatPrey(Prey p);</span><br><span class="line">&#125;</span><br><span class="line">接口是以interface关键字开头，内部可以定义方法，但方法中不用写具体实现，他的作用：专门用于</span><br><span class="line">约束实现他的类，Python中没有接口类型。</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(IPerson)</span>:</span> <span class="comment"># UserInfo类实现了IPerson接口</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(self,a1)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(self,a1)</span>:</span></span><br><span class="line">        print(<span class="number">123123</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">666</span></span><br></pre></td></tr></table></figure><p>5.Python的类执行多继承/ 其他语言不支持多继承</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(Base,NewBase)</span>:</span> </span><br><span class="line"><span class="keyword">pass</span> </span><br><span class="line"><span class="comment"># 其他 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>:</span> </span><br><span class="line"><span class="keyword">pass</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewBase</span><span class="params">(Base)</span>:</span> </span><br><span class="line"><span class="keyword">pass</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(NewBase)</span>:</span> </span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>6.在其他语言中 可以实现多个接口 / 不可以继承多个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Java </span><br><span class="line">interface IBase: </span><br><span class="line"><span class="function">def <span class="title">f1</span><span class="params">(sef)</span> </span></span><br><span class="line"><span class="function">interface INewBase: </span></span><br><span class="line"><span class="function">def <span class="title">f2</span><span class="params">(sef)</span> </span></span><br><span class="line"><span class="function">class <span class="title">Foo</span><span class="params">(IBase,INewBase)</span>: </span></span><br><span class="line"><span class="function">def <span class="title">f1</span><span class="params">(self)</span>: </span></span><br><span class="line"><span class="function">pass </span></span><br><span class="line"><span class="function">def <span class="title">f2</span><span class="params">(self)</span>: </span></span><br><span class="line"><span class="function">pass</span></span><br></pre></td></tr></table></figure><p>7.抽象类和抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#java </span><br><span class="line"><span class="function">abstrac class <span class="title">Base</span><span class="params">(object)</span>: # 抽象类 </span></span><br><span class="line"><span class="function">def <span class="title">f1</span><span class="params">(self)</span>: # 普通方法 </span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="number">123</span>)</span> </span></span><br><span class="line"><span class="function">def <span class="keyword">abstract</span> <span class="title">f2</span><span class="params">(self)</span>: # 抽象方法，内部不能写任何代码 </span></span><br><span class="line"><span class="function">pass </span></span><br><span class="line"><span class="function">class <span class="title">Foo</span><span class="params">(Base)</span>: </span></span><br><span class="line"><span class="function">def <span class="title">f2</span><span class="params">(sef)</span>: </span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="number">123</span>)</span> </span></span><br><span class="line"><span class="function">obj </span>= Foo() </span><br><span class="line">obj.f2() </span><br><span class="line">obj.f1()</span><br></pre></td></tr></table></figure><p>8.总结</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- 重载 </span><br><span class="line">- 重写 </span><br><span class="line">- 构造函数 </span><br><span class="line">Python</span><br><span class="line">class Foo: </span><br><span class="line">def __new__(self): </span><br><span class="line">pass </span><br><span class="line">public class Foo&#123; </span><br><span class="line"># 函数和类名相同 </span><br><span class="line">public void Foo()&#123; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">- 析构函数 </span><br><span class="line">__del__ </span><br><span class="line">finalize </span><br><span class="line">- 接口 </span><br><span class="line">- 抽象类/抽象方法</span><br></pre></td></tr></table></figure><p>9.三元运算</p><p>10.lambda 表达式</p><p>11.yield关键字</p><p>12.进程和线程的区别?</p><p>13.数据库 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">数据库设计：博客系统 / 呼啦圈 </span><br><span class="line"></span><br><span class="line">SQL语句： </span><br><span class="line">select * from user left join depart on user.depart_id = depart.id </span><br><span class="line">select * from user left join depart on user.depart_id = depart.id order by id desc </span><br><span class="line">inner join 和 left join的区别？ </span><br><span class="line">select gender,count(1) from user group by gender </span><br><span class="line">select gender,count(1) from user group by gender having count(1) &gt; 2 </span><br><span class="line"></span><br><span class="line">视图：是一个虚拟的表。 </span><br><span class="line">为某个sql语句取名字： select * from user where id&lt;100 ====&gt; t1 </span><br><span class="line">select * from t1 where name = &apos;成说&apos;、 </span><br><span class="line"></span><br><span class="line">存储过程：是大堆存储在数据库中的SQL语句。 </span><br><span class="line">create producer pro(x1): </span><br><span class="line">update ... </span><br><span class="line">delete ... </span><br><span class="line">select ... </span><br><span class="line"></span><br><span class="line">触发器：存储在数据中的一个特殊的东西。</span><br><span class="line">create trigger x1 before insert 表: </span><br><span class="line">.... </span><br><span class="line">create trigger x1 after insert 表:</span><br></pre></td></tr></table></figure><p>14.在浏览器上输入 <a href="http://www.xxx.com" target="_blank" rel="noopener">www.xxx.com</a> 发生了什么？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- dns解析：www.xxx.com 解析成 IP </span><br><span class="line">- 本质通过socket进行通信 </span><br><span class="line">- 请求到达框架，以django框架为例：.....</span><br></pre></td></tr></table></figure><p>15.http和https的区别？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http,默认端口：80 </span><br><span class="line">https，默认端口：443 </span><br><span class="line"></span><br><span class="line">http的数据是基于明文传输。 </span><br><span class="line">https的数据是基于密文传输。</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/wupeiqi/articles/11647089.html" target="_blank" rel="noopener">https://www.cnblogs.com/wupeiqi/articles/11647089.html</a></p><p>16.cookie和session的区别？ </p><p>17.get和post的区别？</p><p>18.数据结构 </p><ul><li><p>链表 </p><ul><li><p>单项 </p></li><li><p>双向 </p></li></ul></li><li><p>树 </p><ul><li><p>二叉树前序遍历 </p></li><li><p>二叉树中序遍历 </p></li><li><p>二叉树后序遍历 </p></li></ul></li><li><p>面试题 </p><ul><li><p>伪代码实现一个链表 </p></li><li><p>对链表进行反转（逆置） </p></li><li><p>两个队列生成一个栈 </p></li><li><p>前序遍历 / 中序遍历 / 后序遍历 </p><p><a href="https://www.cnblogs.com/wupeiqi/p/11604077.html" target="_blank" rel="noopener">https://www.cnblogs.com/wupeiqi/p/11604077.html</a></p></li></ul></li></ul><p>19.算法 </p><ul><li>冒泡排序 </li><li>快速排序 </li><li>二分查找</li></ul><h2 id="数据库的连接池"><a href="#数据库的连接池" class="headerlink" title="数据库的连接池"></a>数据库的连接池</h2><p>解释：python编程中可以使用pymysql进行数据库连接及增删改查操作，但每次连接mysql请求时，都是独立的去请求访问，比较浪费资源，而且访问数量达到一定数量时，对mysql的性能会产生较大的影响。因此实际使用中，通常会使用数据库的连接池技术，来访问数据库达到资源复用。</p><p><strong>使用的工具</strong>：DBUtils</p><p>它提供两种外部接口：</p><ul><li>PersistentDB：提供线程专用的数据库连接，并自动管理连接。</li><li>PooledDB：提供线程间可共享的数据库连接，并自动管理连接。 </li></ul><p><strong>对比</strong></p><p>未使用连接池</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getconn</span><span class="params">(host, user, passwd, db, sql, port=<span class="number">3306</span>,charset=<span class="string">'utf8'</span>)</span>:</span></span><br><span class="line">    conn = pymysql.connect(host=host, user=user, passwd=passwd, port=port, db=db, charset=charset)  <span class="comment">#建立连接</span></span><br><span class="line">    cur = conn.cursor(cursor=pymysql.cursors.DictCursor)        <span class="comment">#建立游标并指定游标类型</span></span><br><span class="line">    cur.execute(sql)                                            <span class="comment">#执行sql</span></span><br><span class="line">    <span class="keyword">if</span> sql.startswith(<span class="string">'select'</span>):                                <span class="comment">#判断sql是否是select</span></span><br><span class="line">        res = cur.fetchone()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        conn.commit()                                           <span class="comment">#insert\delete\update语句执行完毕后需要进行commit</span></span><br><span class="line">        res = <span class="number">88</span></span><br><span class="line">    cur.close()                                                 <span class="comment">#关闭游标</span></span><br><span class="line">    conn.close()                                                <span class="comment">#关闭连接</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>使用数据池：两种模式</p><p>模式一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">POOL = PersistentDB(</span><br><span class="line">    creator=pymysql,  <span class="comment"># 使用链接数据库的模块</span></span><br><span class="line">    maxusage=<span class="literal">None</span>,  <span class="comment"># 一个链接最多被重复使用的次数，None表示无限制</span></span><br><span class="line">    setsession=[],  <span class="comment"># 开始会话前执行的命令列表。如：["set datestyle to ...", "set time zone ..."]</span></span><br><span class="line">    ping=<span class="number">0</span>,</span><br><span class="line">    <span class="comment"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class="line">    closeable=<span class="literal">False</span>,</span><br><span class="line">    <span class="comment"># 如果为False时， conn.close() 实际上被忽略，供下次使用，再线程关闭时，才会自动关闭链接。如果为True时， conn.close()则关闭链接，那么再次调用pool.connection时就会报错，因为已经真的关闭了连接（pool.steady_connection()可以获取一个新的链接）</span></span><br><span class="line">    threadlocal=<span class="literal">None</span>,  <span class="comment"># 本线程独享值得对象，用于保存链接对象，如果链接对象被重置</span></span><br><span class="line">    host=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port=<span class="number">3306</span>,</span><br><span class="line">    user=<span class="string">'root'</span>,</span><br><span class="line">    password=<span class="string">'123'</span>,</span><br><span class="line">    database=<span class="string">'pooldb'</span>,</span><br><span class="line">    charset=<span class="string">'utf8'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    conn = POOL.connection(shareable=<span class="literal">False</span>)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(<span class="string">'select * from tb1'</span>)</span><br><span class="line">    result = cursor.fetchall()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure><p>模式二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB, SharedDBConnection</span><br><span class="line">POOL = PooledDB(</span><br><span class="line">    creator=pymysql,  <span class="comment"># 使用链接数据库的模块</span></span><br><span class="line">    maxconnections=<span class="number">6</span>,  <span class="comment"># 连接池允许的最大连接数，0和None表示不限制连接数</span></span><br><span class="line">    mincached=<span class="number">2</span>,  <span class="comment"># 初始化时，链接池中至少创建的空闲的链接，0表示不创建</span></span><br><span class="line">    maxcached=<span class="number">5</span>,  <span class="comment"># 链接池中最多闲置的链接，0和None不限制</span></span><br><span class="line">    maxshared=<span class="number">3</span>,  <span class="comment"># 链接池中最多共享的链接数量，0和None表示全部共享。PS: 无用，因为pymysql和MySQLdb等模块的 threadsafety都为1，所有值无论设置为多少，_maxcached永远为0，所以永远是所有链接都共享。</span></span><br><span class="line">    blocking=<span class="literal">True</span>,  <span class="comment"># 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错</span></span><br><span class="line">    maxusage=<span class="literal">None</span>,  <span class="comment"># 一个链接最多被重复使用的次数，None表示无限制</span></span><br><span class="line">    setsession=[],  <span class="comment"># 开始会话前执行的命令列表。如：["set datestyle to ...", "set time zone ..."]</span></span><br><span class="line">    ping=<span class="number">0</span>,</span><br><span class="line">    <span class="comment"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class="line">    host=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port=<span class="number">3306</span>,</span><br><span class="line">    user=<span class="string">'root'</span>,</span><br><span class="line">    password=<span class="string">'123'</span>,</span><br><span class="line">    database=<span class="string">'pooldb'</span>,</span><br><span class="line">    charset=<span class="string">'utf8'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 检测当前正在运行连接数的是否小于最大链接数，如果不小于则：等待或报raise TooManyConnections异常</span></span><br><span class="line">    <span class="comment"># 否则</span></span><br><span class="line">    <span class="comment"># 则优先去初始化时创建的链接中获取链接 SteadyDBConnection。</span></span><br><span class="line">    <span class="comment"># 然后将SteadyDBConnection对象封装到PooledDedicatedDBConnection中并返回。</span></span><br><span class="line">    <span class="comment"># 如果最开始创建的链接没有链接，则去创建一个SteadyDBConnection对象，再封装到PooledDedicatedDBConnection中并返回。</span></span><br><span class="line">    <span class="comment"># 一旦关闭链接后，连接就返回到连接池让后续线程继续使用。</span></span><br><span class="line">    conn = POOL.connection()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(th, '链接被拿走了', conn1._con)</span></span><br><span class="line">    <span class="comment"># print(th, '池子里目前有', pool._idle_cache, '\r\n')</span></span><br><span class="line"></span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(<span class="string">'select * from tb1'</span>)</span><br><span class="line">    result = cursor.fetchall()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure><p>进阶：使用pymysql和DBUtils连接数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OPMysql</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    __pool = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 构造函数，创建数据库连接、游标</span></span><br><span class="line">        self.coon = OPMysql.getmysqlconn()</span><br><span class="line">        self.cur = self.coon.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据库连接池连接</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getmysqlconn</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">if</span> OPMysql.__pool <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            __pool = PooledDB(creator=pymysql, mincached=<span class="number">1</span>, maxcached=<span class="number">20</span>, host=mysqlInfo[<span class="string">'host'</span>], user=mysqlInfo[<span class="string">'user'</span>], passwd=mysqlInfo[<span class="string">'passwd'</span>], db=mysqlInfo[<span class="string">'db'</span>], port=mysqlInfo[<span class="string">'port'</span>], charset=mysqlInfo[<span class="string">'charset'</span>])</span><br><span class="line">            print(__pool)</span><br><span class="line">        <span class="keyword">return</span> __pool.connection()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 插入\更新\删除sql</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">op_insert</span><span class="params">(self, sql)</span>:</span></span><br><span class="line">        print(<span class="string">'op_insert'</span>, sql)</span><br><span class="line">        insert_num = self.cur.execute(sql)</span><br><span class="line">        print(<span class="string">'mysql sucess '</span>, insert_num)</span><br><span class="line">        self.coon.commit()</span><br><span class="line">        <span class="keyword">return</span> insert_num</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">op_select</span><span class="params">(self, sql)</span>:</span></span><br><span class="line">        print(<span class="string">'op_select'</span>, sql)</span><br><span class="line">        self.cur.execute(sql)  <span class="comment"># 执行sql</span></span><br><span class="line">        select_res = self.cur.fetchone()  <span class="comment"># 返回结果为字典</span></span><br><span class="line">        print(<span class="string">'op_select'</span>, select_res)</span><br><span class="line">        <span class="keyword">return</span> select_res</span><br><span class="line"></span><br><span class="line">    <span class="comment">#释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispose</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.coon.close()</span><br><span class="line">        self.cur.close()</span><br></pre></td></tr></table></figure><p>参数解释：</p><ul><li>mincached，最少的空闲连接数，如果空闲连接数小于这个数，pool会创建一个新的连接。</li><li>maxcached，最大的空闲连接数，如果空闲连接数大于这个数，pool会关闭空闲连接。</li><li>maxconnections，最大的连接数，进程中最大可创建的线程数。</li><li>blocking， 当连接数达到最大连接数时，再次请求时，如果这个值是True，请求连接的程序会一直等待，直到当前连接数小于最大连接数；如果这个值为False，会报错。</li><li>masxshared，当连接数达到这个数时，新请求的连接会分享已经分配出去的连接。</li></ul><p><strong>连接池对性能的提升</strong></p><ul><li>在程序创建连接的时候，可以从一个空闲的连接中获取，不需要重新初始化连接，提升获取连接的速度。</li><li>关闭连接的时候，把连接放回连接池，而不是真正的关闭，所以可以减少频繁的打开和关闭连接。</li></ul><p><strong>加锁</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> RLock</span><br><span class="line"></span><br><span class="line">LOCK = RLock()</span><br><span class="line">CONN = pymysql.connect(host=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">                       port=<span class="number">3306</span>,</span><br><span class="line">                       user=<span class="string">'root'</span>,</span><br><span class="line">                       password=<span class="string">'123'</span>,</span><br><span class="line">                       database=<span class="string">'pooldb'</span>,</span><br><span class="line">                       charset=<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(arg)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> LOCK:    <span class="comment">#没有锁就会报错</span></span><br><span class="line">        cursor = CONN.cursor()</span><br><span class="line">        cursor.execute(<span class="string">'select * from tb1'</span>)</span><br><span class="line">        result = cursor.fetchall()</span><br><span class="line">        cursor.close()</span><br><span class="line"></span><br><span class="line">        print(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    t = threading.Thread(target=task, args=(i,))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><p><strong>封装成函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB</span><br><span class="line"></span><br><span class="line">POOL = PooledDB(</span><br><span class="line">    creator=pymysql,  <span class="comment"># 使用链接数据库的模块</span></span><br><span class="line">    maxconnections=<span class="number">6</span>,  <span class="comment"># 连接池允许的最大连接数，0和None表示不限制连接数</span></span><br><span class="line">    mincached=<span class="number">2</span>,  <span class="comment"># 初始化时，链接池中至少创建的链接，0表示不创建</span></span><br><span class="line">    blocking=<span class="literal">True</span>,  <span class="comment"># 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错</span></span><br><span class="line">    ping=<span class="number">0</span>, <span class="comment"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class="line"></span><br><span class="line">    host=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port=<span class="number">3306</span>,</span><br><span class="line">    user=<span class="string">'root'</span>,</span><br><span class="line">    password=<span class="string">'222'</span>,</span><br><span class="line">    database=<span class="string">'cmdb'</span>,</span><br><span class="line">    charset=<span class="string">'utf8'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetchall</span><span class="params">(sql,*args)</span>:</span></span><br><span class="line">    <span class="string">""" 获取所有数据 """</span></span><br><span class="line">    conn = POOL.connection()</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(sql,args)</span><br><span class="line">    result = cursor.fetchall()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetchone</span><span class="params">(sql, *args)</span>:</span></span><br><span class="line">    <span class="string">""" 获取单挑数据 """</span></span><br><span class="line">    conn = POOL.connection()</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(sql, args)</span><br><span class="line">    result = cursor.fetchone()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p><strong>封装成类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlHelper</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.pool = PooledDB(</span><br><span class="line">            creator=pymysql,  <span class="comment"># 使用链接数据库的模块</span></span><br><span class="line">            maxconnections=<span class="number">6</span>,  <span class="comment"># 连接池允许的最大连接数，0和None表示不限制连接数</span></span><br><span class="line">            mincached=<span class="number">2</span>,  <span class="comment"># 初始化时，链接池中至少创建的链接，0表示不创建</span></span><br><span class="line">            blocking=<span class="literal">True</span>,  <span class="comment"># 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错</span></span><br><span class="line">            ping=<span class="number">0</span>,</span><br><span class="line">            <span class="comment"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class="line">            host=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">            port=<span class="number">3306</span>,</span><br><span class="line">            user=<span class="string">'root'</span>,</span><br><span class="line">            password=<span class="string">'222'</span>,</span><br><span class="line">            database=<span class="string">'cmdb'</span>,</span><br><span class="line">            charset=<span class="string">'utf8'</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">        conn = self.pool.connection()</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        <span class="keyword">return</span> conn,cursor</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self,cursor,conn)</span>:</span></span><br><span class="line">        cursor.close()</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fetchall</span><span class="params">(self,sql, *args)</span>:</span></span><br><span class="line">        <span class="string">""" 获取所有数据 """</span></span><br><span class="line">        conn,cursor = self.open()</span><br><span class="line">        cursor.execute(sql, args)</span><br><span class="line">        result = cursor.fetchall()</span><br><span class="line">        self.close(conn,cursor)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fetchone</span><span class="params">(self,sql, *args)</span>:</span></span><br><span class="line">        <span class="string">""" 获取所有数据 """</span></span><br><span class="line">        conn, cursor = self.open()</span><br><span class="line">        cursor.execute(sql, args)</span><br><span class="line">        result = cursor.fetchone()</span><br><span class="line">        self.close(conn, cursor)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db = SqlHelper()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;面试题&quot;&gt;&lt;a href=&quot;#面试题&quot; class=&quot;headerlink&quot; title=&quot;面试题&quot;&gt;&lt;/a&gt;面试题&lt;/h2&gt;&lt;p&gt;1.编程语言及他们之间的区别？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;C/C++ ,很多语言的底层实现都是与C，代码执行效率高，自己做内存管理，对代码要求比较高，很多功&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;能需要手动试下。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Java，比较好的编程语言，很多企业级应用都会选择java。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;C#，是微软开始的编程语言，部署时需要放在windown server 上，最大弊端是window系统花钱。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PHP，一般用于快速搭建网站。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Python，简洁且入门简单，很少的代码就可以做很多事情。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Golang，语法和C比较接近，处理并发时比较有优势 + docker。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2.构造函数和析构函数&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;构造函数，用于创建对象的函数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;析构函数，用于销毁对象的函数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self,*args,**kwargs)&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 构造函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__del__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self,*args,**kwargs)&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 析构函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj = Foo()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;del&lt;/span&gt; obj&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="flask" scheme="https://pl1649947109.github.io/pl1649947109/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>第七讲——扩展：drf中版本、认证、权限、频率限制源码分析</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/19/%E4%B9%A6/drf/%E7%AC%AC%E4%B8%83%E8%AE%B2%E2%80%94%E2%80%94%E6%89%A9%E5%B1%95%EF%BC%9Adrf%E4%B8%AD%E7%89%88%E6%9C%AC%E3%80%81%E8%AE%A4%E8%AF%81%E3%80%81%E6%9D%83%E9%99%90%E3%80%81%E9%A2%91%E7%8E%87%E9%99%90%E5%88%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/19/书/drf/第七讲——扩展：drf中版本、认证、权限、频率限制源码分析/</id>
    <published>2019-11-19T12:00:00.000Z</published>
    <updated>2019-11-19T08:39:06.505Z</updated>
    
    <content type="html"><![CDATA[<p>文章导读：在这里我们将分为两部分来讲解:第一部分，我们将随着程序执行的顺序一步步的去分析源码(看源码不可跳读，必须一步步的走)；第二部分，我们使用一个实例完整的把这个使用流程展示出来。</p><p>第一部分：源码的讲解</p><p>路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> account</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^login/$'</span>,account.LoginView.as_view()),</span><br></pre></td></tr></table></figure><p>视图类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginView</span><span class="params">(APIView)</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">CBV视图类</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>下面，我们将开始分析，<strong>login路由</strong>进入查找到我们的<strong>account.LoginView</strong>，接着执行LoginView视图类里面的<strong>as_view()</strong>视图类，在该类里面找不到，接着找他的父类，如后就到<strong>APIView</strong>父类里面查找，</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APIView</span><span class="params">(View)</span>:</span></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">as_view</span><span class="params">(cls, **initkwargs)</span>:</span></span><br><span class="line">        view = super().as_view(**initkwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> csrf_exempt(view)</span><br></pre></td></tr></table></figure><p>我们发现，在该视图类里面，它重构了<strong>父类View</strong>类的<strong>as_view()</strong>方法，我们接着找它父类的该方法，看看里面做了什么，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">View</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">@classonlymethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">as_view</span><span class="params">(cls, **initkwargs)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(request, *args, **kwargs)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> self.dispatch(request, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> view</span><br></pre></td></tr></table></figure><p>在View视图里面，我们发现它使用了开发过封闭原则执行了<strong>dispatch()</strong>方法，接着，我们开始从最开始的LoginView类往上找，最后我们在它的亲类APIView里面找到了，我们看看它里面都执行了什么</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    它里面的钩子用于启动、完成和异常处理。</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    self.args = args</span><br><span class="line">    self.kwargs = kwargs</span><br><span class="line">    request = self.initialize_request(request, *args, **kwargs)</span><br><span class="line">    self.request = request</span><br><span class="line">    self.headers = self.default_response_headers</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        self.initial(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Get the appropriate handler method</span></span><br><span class="line">        <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">            handler = getattr(self, request.method.lower(),</span><br><span class="line">                              self.http_method_not_allowed)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            handler = self.http_method_not_allowed</span><br><span class="line"></span><br><span class="line">        response = handler(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">        response = self.handle_exception(exc)</span><br><span class="line"></span><br><span class="line">    self.response = self.finalize_response(request, response, *args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> self.response</span><br></pre></td></tr></table></figure><p>执行上面的方法，首先是对<strong>request进行封装</strong>，执行<strong>initialize_request</strong>，在initialize_request里面做了什么，我们来看看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize_request</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line"></span><br><span class="line">    parser_context = self.get_parser_context(request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Request(</span><br><span class="line">        request,</span><br><span class="line">        parsers=self.get_parsers(),</span><br><span class="line">        <span class="comment">#按这个名字是不是和我们的认证有关系</span></span><br><span class="line">        authenticators=self.get_authenticators(),</span><br><span class="line">        negotiator=self.get_content_negotiator(),</span><br><span class="line">        parser_context=parser_context</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_authenticators</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [auth() <span class="keyword">for</span> auth <span class="keyword">in</span> self.authentication_classes]</span><br><span class="line"></span><br><span class="line"><span class="comment">#需要我们自己设置的，否则就使用默认的None值</span></span><br><span class="line">authentication_classes = api_settings.DEFAULT_AUTHENTICATION_CLASSES</span><br></pre></td></tr></table></figure><p>从上面的方法里面，我们发现了，新的request里面封装了更多的内容，其中一项就是我们的<strong>实例化认证类列表</strong>，我们后面会讲到，接下来，我们执行try里面的<strong>initial</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initial</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行版本相关的方法</span></span><br><span class="line">    version, scheme = self.determine_version(request, *args, **kwargs)</span><br><span class="line">    request.version, request.versioning_scheme = version, scheme</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 认证相关</span></span><br><span class="line">    self.perform_authentication(request)</span><br><span class="line">    <span class="comment"># 权限相关</span></span><br><span class="line">    self.check_permissions(request)</span><br><span class="line">    <span class="comment"># 频率限制相关</span></span><br><span class="line">    self.check_throttles(request)</span><br></pre></td></tr></table></figure><p>在这个函数里，就是我们真正需要关注的内容了，我在里面进行了简单的标注，下面，我们将一个个的分析它们：</p><p>版本：</p><p>执行<strong>determine_version</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">determine_version</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    If versioning is being used, then determine any API version for the</span></span><br><span class="line"><span class="string">    incoming request. Returns a two-tuple of (version, versioning_scheme)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> self.versioning_class <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> (<span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">    scheme = self.versioning_class()</span><br><span class="line">    <span class="keyword">return</span> (scheme.determine_version(request, *args, **kwargs), scheme)</span><br><span class="line"></span><br><span class="line"><span class="comment">#需要我们自己设置的，否则就使用默认的None值</span></span><br><span class="line">versioning_class = api_settings.DEFAULT_VERSIONING_CLASS</span><br></pre></td></tr></table></figure><p>如果我们的<strong>settings</strong>里面没有设置这个<strong>versioning_class</strong>的值，那么程序就会去<strong>api_settings</strong>里面找，返回的就是一个<strong>(None,None)</strong>的元组，否则就会把我们定义的实例化类赋值给<strong>scheme</strong>，并返回一个包含我们定义的实例化类的方法和该类<strong>(selfversioning_class().determine_version,self.versioning_class())</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.version, request.versioning_scheme = version, scheme</span><br></pre></td></tr></table></figure><p>最后，把版本的信息封装进了<strong>request</strong></p><p>认证：</p><p>执行<strong>perform_authentication</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">perform_authentication</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    request.user</span><br></pre></td></tr></table></figure><p>执行<strong>request</strong>里面封装的<strong>user</strong>（这个看着user是一个属性对不对，但是既然这里什么没有return，那么它就肯定不是一个属性，而是一个方法，只是伪装成了属性而已），</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'_user'</span>):</span><br><span class="line">        <span class="keyword">with</span> wrap_attributeerrors():</span><br><span class="line">            self._authenticate()</span><br><span class="line">    <span class="keyword">return</span> self._user</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_authenticate</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> authenticator <span class="keyword">in</span> self.authenticators:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            user_auth_tuple = authenticator.authenticate(self)</span><br><span class="line">        <span class="keyword">except</span> exceptions.APIException:</span><br><span class="line">            self._not_authenticated()</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line">        <span class="keyword">if</span> user_auth_tuple <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self._authenticator = authenticator</span><br><span class="line">            self.user, self.auth = user_auth_tuple</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    self._not_authenticated()</span><br></pre></td></tr></table></figure><p>这里的<strong>_authenticate()</strong>就是重点，它里面执行的就是我们之前在<strong>initialize_request</strong>里面封装的我们自定义的功能类，这里执行并返回一个元组，这里返回的是三种情况，抛出异常，认证失败，程序退出；返回None，接着执行下一个认证；返回一个包含用户信息和token值的元组，表示认证成功。</p><p>权限：</p><p>执行<strong>check_permissions</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_permissions</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> permission <span class="keyword">in</span> self.get_permissions():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> permission.has_permission(request, self):</span><br><span class="line">            self.permission_denied(</span><br><span class="line">                request, message=getattr(permission, <span class="string">'message'</span>, <span class="literal">None</span>)</span><br><span class="line">            )</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_permissions</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [permission() <span class="keyword">for</span> permission <span class="keyword">in</span> self.permission_classes]</span><br><span class="line"></span><br><span class="line"><span class="comment">#需要我们自己设置的，否则就使用默认的None值</span></span><br><span class="line">permission_classes = api_settings.DEFAULT_PERMISSION_CLASSES</span><br></pre></td></tr></table></figure><p>在权限里面，首先循环了<strong>get_permissions()</strong>方法，这个方法就去配置文件里面找我们自定义的<strong>实例化的权限类</strong>，并进行封装到一个列表里面，接着，循环我们自定义的实例化类，执行实例化里面的<strong>has_permission()</strong>方法，这就是我们需要在自定义类里面写的方法，他返回的是一个True（表示拥有访问的权限），该方法执行完成。</p><p>否则，执行<strong>permission_denied()</strong>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permission_denied</span><span class="params">(self, request, message=None)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.authenticators <span class="keyword">and</span> <span class="keyword">not</span> request.successful_authenticator:</span><br><span class="line">        <span class="keyword">raise</span> exceptions.NotAuthenticated()</span><br><span class="line">        <span class="keyword">raise</span> exceptions.PermissionDenied(detail=message)</span><br></pre></td></tr></table></figure><p>我们就可以很清楚的看出来，当权限不足，就是没有访问的权限的时候就会抛出异常。</p><p>频率限制：</p><p>在讲频率限制之前，我们先说一下它实现的原理，这样会帮助我们去理解源码，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">DRF中的频率控制基本原理是基于访问次数和时间的，当然我们可以通过自己定义的方法来实现。</span><br><span class="line"></span><br><span class="line">当我们请求进来，走到我们频率组件的时候，DRF内部会有一个字典来记录访问者的IP，或者是登录用户的相关信息</span><br><span class="line"></span><br><span class="line">这里，当匿名用户的IP为key，value为一个列表，存放访问者每次访问的时间，</span><br><span class="line"></span><br><span class="line">&#123;  IP1: [第三次访问时间，第二次访问时间，第一次访问时间]，&#125;</span><br><span class="line"></span><br><span class="line">把每次访问最新时间放入列表的最前面，记录这样一个数据结构后，通过什么方式限流呢~~</span><br><span class="line"></span><br><span class="line">如果我们设置的是10秒内只能访问5次，</span><br><span class="line"></span><br><span class="line">　　-- 1，判断访问者的IP是否在这个请求IP的字典里（如果是登录用户，我们可以根据用户名等信息）</span><br><span class="line"></span><br><span class="line">　　-- 2，保证这个列表里都是最近10秒内的访问的时间</span><br><span class="line"></span><br><span class="line">　　　　　　判断当前请求时间和列表里最早的(也就是最后的一个的)请求时间的差</span><br><span class="line"></span><br><span class="line">　　　　　　如果差大于10秒，说明请求已经不是最近10秒内的，删除掉，</span><br><span class="line"></span><br><span class="line">　　　　　　继续判断倒数第二个，直到差值小于10秒</span><br><span class="line"></span><br><span class="line">　　-- 3，判断列表的长度(即访问次数)，是否大于我们设置的5次，</span><br><span class="line"></span><br><span class="line">　　　　　　如果大于就限流，否则放行，并把时间放入列表的最前面。</span><br><span class="line">第二步：</span><br><span class="line">我们以一个列表来说明:</span><br><span class="line">s = &#123;&apos;IP&apos;:[1:20&apos;09&apos;&apos;,1:20&apos;08&apos;&apos;,1:20&apos;07&apos;&apos;,1:20&apos;06&apos;&apos;,1:20&apos;02&apos;&apos;,1:19&apos;50&apos;&apos;]&#125;</span><br><span class="line">现在，我们又这个IP又发来一次请求，时间为1:20&apos;10&apos;&apos;,</span><br><span class="line">我们使用1:20&apos;10&apos;&apos;- 1:19&apos;50&apos;&apos;&gt;10,发现，这个时间过期了，我们就s[&apos;IP&apos;].pop()</span><br><span class="line">现在s = &#123;&apos;IP&apos;:[1:20&apos;09&apos;&apos;,1:20&apos;08&apos;&apos;,1:20&apos;07&apos;&apos;,1:20&apos;06&apos;&apos;,1:20&apos;02&apos;&apos;]&#125;</span><br><span class="line">我们再比较1:20&apos;10&apos;&apos; - 1:20&apos;02&apos;&apos;&lt;10,说明这个时间没有过期，好我们就把1:20&apos;10&apos;&apos;这个时间插入到上面的这个列表里面</span><br><span class="line">于是s = &#123;&apos;IP&apos;:[1:20&apos;10&apos;&apos;,1:20&apos;09&apos;&apos;,1:20&apos;07&apos;&apos;,1:20&apos;02&apos;&apos;]&#125;</span><br><span class="line"></span><br><span class="line">第三步：</span><br><span class="line">现在，我们再来判断上面的列表的长度是不是&gt;5，满足表示需要限流了，就不让它访问，否则它就可以访问。最后发现它还可以访问，就是这样的原理流程</span><br></pre></td></tr></table></figure><p>执行<strong>check_throttles</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_throttles</span><span class="params">(self, request)</span>:</span></span><br><span class="line"></span><br><span class="line">    throttle_durations = []</span><br><span class="line">    <span class="keyword">for</span> throttle <span class="keyword">in</span> self.get_throttles():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> throttle.allow_request(request, self):</span><br><span class="line">            throttle_durations.append(throttle.wait())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> throttle_durations:</span><br><span class="line">                durations = [</span><br><span class="line">                    duration <span class="keyword">for</span> duration <span class="keyword">in</span> throttle_durations</span><br><span class="line">                    <span class="keyword">if</span> duration <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">                ]</span><br><span class="line"></span><br><span class="line">                duration = max(durations, default=<span class="literal">None</span>)</span><br><span class="line">                self.throttled(request, duration)</span><br><span class="line">                </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_throttles</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> [throttle() <span class="keyword">for</span> throttle <span class="keyword">in</span> self.throttle_classes]</span><br><span class="line"></span><br><span class="line"><span class="comment">#需要我们自己设置的，否则就使用默认的None值</span></span><br><span class="line">throttle_classes = api_settings.DEFAULT_THROTTLE_CLASSES</span><br></pre></td></tr></table></figure><p>和前面的几种情况一样，第一步都是去生成一个<strong>实例化限流类的列表</strong>，并循环执行，接着就执行实例化类里面的<strong>allow_request()</strong>方法，这里我们就拿<strong>SimpleRateThrottle</strong>里面的该方法来说明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allow_request</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#判断请求的方式是不是字符串的形式，确定频率限制定义的格式</span></span><br><span class="line">    <span class="keyword">if</span> self.rate <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#这里就是上面步骤的第一步</span></span><br><span class="line">    <span class="comment">#必须在我们自己定义类里面重写该方法，如果限制的话，判断用户请求（返回匿名用户IP，登录用户的user之类的）是否满足返回之，否则就不限制，直接返回Non（这里是None返回的是True）</span></span><br><span class="line">    self.key = self.get_cache_key(request, view)</span><br><span class="line">    <span class="keyword">if</span> self.key <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#拿缓存中的数据，就是我们第二步里面的列表，当缓存中没有的话默认设置为空列表</span></span><br><span class="line">    self.history = self.cache.get(self.key, [])</span><br><span class="line">    <span class="comment">#timer() = datetime.datetime()获取当前时间</span></span><br><span class="line">    self.now = self.timer()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#这里就是上面步骤的第二步</span></span><br><span class="line">    <span class="comment">#self.duration获取的是我们设置的时间间隔（10/minute），self.duration=60</span></span><br><span class="line">    <span class="comment">#剔除列表中过期的时间</span></span><br><span class="line">    <span class="keyword">while</span> self.history <span class="keyword">and</span> self.history[<span class="number">-1</span>] &lt;= self.now - self.duration:</span><br><span class="line">        self.history.pop()</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#num_requests我们的次数，这里是10</span></span><br><span class="line">    <span class="comment">#判断这个列表的长度是否超过10</span></span><br><span class="line">    <span class="keyword">if</span> len(self.history) &gt;= self.num_requests:</span><br><span class="line">        <span class="comment">#长度超过了，执行该方法返回False</span></span><br><span class="line">        <span class="keyword">return</span> self.throttle_failure()</span><br><span class="line">    <span class="comment">#长度没有超过，表示没有限制，执行该方法返回True</span></span><br><span class="line">    <span class="keyword">return</span> self.throttle_success()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cache_key</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">应返回可用于限制的唯一缓存密钥。</span></span><br><span class="line"><span class="string">必须重写。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果不应限制请求，则可以返回“None”。</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">raise</span> NotImplementedError(<span class="string">'.get_cache_key() must be overridden'</span>)</span><br></pre></td></tr></table></figure><p>执行完我们的方法，接着执行<strong>throttle_durations.append(throttle.wait())</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        返回下次建议的请求时间</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">    <span class="keyword">if</span> self.history:</span><br><span class="line">        remaining_duration = self.duration - (self.now - self.history[<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        remaining_duration = self.duration</span><br><span class="line"></span><br><span class="line">    available_requests = self.num_requests - len(self.history) + <span class="number">1</span></span><br><span class="line">    <span class="comment">#表示num_requests长度为空,返回None</span></span><br><span class="line">    <span class="keyword">if</span> available_requests &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#这个列表间隔时间/列表长度 = x次/秒（最终返回的是一个int）</span></span><br><span class="line">    <span class="keyword">return</span> remaining_duration / float(available_requests)</span><br></pre></td></tr></table></figure><p>上面的返回的是建议我们下次请求的时间，接着就剩下下面的内容没执行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> throttle_durations:</span><br><span class="line">    durations = [</span><br><span class="line">        duration <span class="keyword">for</span> duration <span class="keyword">in</span> throttle_durations</span><br><span class="line">        <span class="keyword">if</span> duration <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    duration = max(durations, default=<span class="literal">None</span>)</span><br><span class="line">    self.throttled(request, duration)</span><br></pre></td></tr></table></figure><p>我们分析，当我们定义的列表不为空的时候，我们循环遍历该列表<strong>throttle_durations</strong>剔除<strong>None</strong>值</p><p>，这种取出<strong>durations</strong>中最大的值，当作参数传递给<strong>throttled()</strong>并执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">throttled</span><span class="params">(self, request, wait)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    如果请求被限制，请确定引发哪种异常。</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">raise</span> exceptions.Throttled(wait)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Throttled</span><span class="params">(APIException)</span>:</span></span><br><span class="line">    status_code = status.HTTP_429_TOO_MANY_REQUESTS</span><br><span class="line">    default_detail = _(<span class="string">'Request was throttled.'</span>)</span><br><span class="line">    extra_detail_singular = _(<span class="string">'Expected available in &#123;wait&#125; second.'</span>)</span><br><span class="line">    extra_detail_plural = _(<span class="string">'Expected available in &#123;wait&#125; seconds.'</span>)</span><br><span class="line">    default_code = <span class="string">'throttled'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, wait=None, detail=None, code=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> detail <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            detail = force_str(self.default_detail)</span><br><span class="line">        <span class="keyword">if</span> wait <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            wait = math.ceil(wait)</span><br><span class="line">            detail = <span class="string">' '</span>.join((</span><br><span class="line">                detail,</span><br><span class="line">                force_str(ngettext(self.extra_detail_singular.format(wait=wait),</span><br><span class="line">                                   self.extra_detail_plural.format(wait=wait),</span><br><span class="line">                                   wait))))</span><br><span class="line">        self.wait = wait</span><br><span class="line">        super().__init__(detail, code)</span><br></pre></td></tr></table></figure><p>至此，我们的截流也说完了。</p><p>第二部分：应用实例</p><p>配置文件部分settings.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment">#版本控制</span></span><br><span class="line">    <span class="string">"DEFAULT_VERSIONING_CLASS"</span>:<span class="string">"rest_framework.versioning.URLPathVersioning"</span>,</span><br><span class="line">    <span class="string">"ALLOWED_VERSIONS"</span>:[<span class="string">'v1'</span>,<span class="string">'v2'</span>],</span><br><span class="line"></span><br><span class="line">    <span class="comment">#认证</span></span><br><span class="line">    <span class="string">"DEFAULT_AUTHENTICATION_CLASSES"</span>:[<span class="string">"api.extensions.auth.HulaQueryParamAuthentication"</span>,],</span><br><span class="line">    <span class="comment">#"UNAUTHENTICATED_USER":None,</span></span><br><span class="line">    <span class="comment">#"UNAUTHENTICATED_TOKEN":None,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#权限</span></span><br><span class="line"><span class="string">"DEFAULT_AUTHENTICATION_CLASSES"</span>:[<span class="string">"kka.auth.TokenAuthentication"</span>,]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#频率限制</span></span><br><span class="line">    <span class="string">"DEFAULT_THROTTLE_RATES"</span>:&#123;</span><br><span class="line">        <span class="string">'anon'</span>: <span class="string">'5/minute'</span>,  <span class="comment">#匿名用户</span></span><br><span class="line">        <span class="string">'user'</span>: <span class="string">'10/minute'</span>, <span class="comment">#登录用户</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义功能类</p><p><strong>版本</strong></p><p>不需要自定义类，再setting里面配置好就可以了</p><p><strong>认证</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> exceptions</span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> BaseAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.settings <span class="keyword">import</span> api_settings</span><br><span class="line"><span class="keyword">from</span> api <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HulaQueryParamAuthentication</span><span class="params">(BaseAuthentication)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        # raise Exception(), 不在继续往下执行，直接返回给用户。</span></span><br><span class="line"><span class="string">        # return None ,本次认证完成，执行下一个认证</span></span><br><span class="line"><span class="string">        # return ('x',"x")，认证成功，不需要再继续执行其他认证了，继续往后权限、节流、视图函数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        token = request.query_params.get(<span class="string">'token'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> token:</span><br><span class="line">            <span class="keyword">raise</span> exceptions.AuthenticationFailed(&#123;<span class="string">'code'</span>:<span class="number">10002</span>,<span class="string">'error'</span>:<span class="string">"登录成功之后才能操作"</span>&#125;)</span><br><span class="line"></span><br><span class="line">        jwt_decode_handler = api_settings.JWT_DECODE_HANDLER</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = jwt_decode_handler(token)</span><br><span class="line">        <span class="keyword">except</span> jwt.ExpiredSignature:</span><br><span class="line">            <span class="keyword">raise</span> exceptions.AuthenticationFailed(&#123;<span class="string">'code'</span>:<span class="number">10003</span>,<span class="string">'error'</span>:<span class="string">"token已过期"</span>&#125;)</span><br><span class="line">        <span class="keyword">except</span> jwt.DecodeError:</span><br><span class="line">            <span class="keyword">raise</span> exceptions.AuthenticationFailed(&#123;<span class="string">'code'</span>:<span class="number">10004</span>,<span class="string">'error'</span>:<span class="string">"token格式错误"</span>&#125;)</span><br><span class="line">        <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">            <span class="keyword">raise</span> exceptions.AuthenticationFailed(&#123;<span class="string">'code'</span>:<span class="number">10005</span>,<span class="string">'error'</span>:<span class="string">"认证失败"</span>&#125;)</span><br><span class="line"></span><br><span class="line">        jwt_get_username_from_payload = api_settings.JWT_PAYLOAD_GET_USERNAME_HANDLER</span><br><span class="line">        username = jwt_get_username_from_payload(payload)</span><br><span class="line">        user_object = models.UserInfo.objects.filter(username=username).first()</span><br><span class="line">        <span class="keyword">return</span> (user_object,token)</span><br></pre></td></tr></table></figure><p><strong>权限</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> BasePermission</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> exceptions</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPermission</span><span class="params">(BasePermission)</span>:</span></span><br><span class="line">    <span class="comment">#自定义错误信息</span></span><br><span class="line">    message = &#123;<span class="string">'code'</span>: <span class="number">10001</span>, <span class="string">'error'</span>: <span class="string">'你没权限'</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_permission</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Return `True` if permission is granted, `False` otherwise.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> request.user:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># raise exceptions.PermissionDenied(&#123;'code': 10001, 'error': '你没权限'&#125;)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_object_permission</span><span class="params">(self, request, view, obj)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Return `True` if permission is granted, `False` otherwise.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p><strong>截流</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> SimpleRateThrottle</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnonThrottle</span><span class="params">(SimpleRateThrottle)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    截流：匿名用户使用IP</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">scope = <span class="string">'anon'</span>  <span class="comment"># 相当于设置了最大的访问次数和时间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cache_key</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line"><span class="keyword">if</span> request.user:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 返回None表示我不限制，登录用户我不管</span></span><br><span class="line"><span class="comment"># 匿名用户</span></span><br><span class="line"><span class="keyword">return</span> self.get_ident(request)  <span class="comment"># 返回一个唯一标识IP</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserThrottle</span><span class="params">(SimpleRateThrottle)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    截流：登录用户使用用户名</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">scope = <span class="string">'user'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cache_key</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line"><span class="comment"># 登录用户</span></span><br><span class="line"><span class="keyword">if</span> request.user:</span><br><span class="line"><span class="keyword">return</span> request.user</span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 返回NOne表示匿名用户我不管</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章导读：在这里我们将分为两部分来讲解:第一部分，我们将随着程序执行的顺序一步步的去分析源码(看源码不可跳读，必须一步步的走)；第二部分，我们使用一个实例完整的把这个使用流程展示出来。&lt;/p&gt;
&lt;p&gt;第一部分：源码的讲解&lt;/p&gt;
&lt;p&gt;路由&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; .views &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; account&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;urlpatterns = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    url(&lt;span class=&quot;string&quot;&gt;r&#39;^login/$&#39;&lt;/span&gt;,account.LoginView.as_view()),&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;视图类&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; rest_framework.views &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; APIView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LoginView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(APIView)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;	CBV视图类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;	&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;下面，我们将开始分析，&lt;strong&gt;login路由&lt;/strong&gt;进入查找到我们的&lt;strong&gt;account.LoginView&lt;/strong&gt;，接着执行LoginView视图类里面的&lt;strong&gt;as_view()&lt;/strong&gt;视图类，在该类里面找不到，接着找他的父类，如后就到&lt;strong&gt;APIView&lt;/strong&gt;父类里面查找，&lt;/p&gt;
    
    </summary>
    
    
      <category term="drf" scheme="https://pl1649947109.github.io/pl1649947109/tags/drf/"/>
    
  </entry>
  
  <entry>
    <title>第四讲——cmdb项目扩展与总结</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/19/%E4%B9%A6/cmdb/%E7%AC%AC%E5%9B%9B%E8%AE%B2%E2%80%94%E2%80%94cmdb%E9%A1%B9%E7%9B%AE%E6%89%A9%E5%B1%95%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/19/书/cmdb/第四讲——cmdb项目扩展与总结/</id>
    <published>2019-11-19T12:00:00.000Z</published>
    <updated>2019-11-19T07:47:33.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内容回顾"><a href="#内容回顾" class="headerlink" title="内容回顾"></a>内容回顾</h2><ol><li>jwt的优势？</li><li>节流是如何实现的?</li><li>权限的实现流程？</li><li>认证的实现流程？</li><li>cmdb是如何实现的？</li><li>cmdb开发的过程中你觉得什么最难搞？</li><li>什么是跨域？如何解决跨域？</li></ol><h2 id="今日概要"><a href="#今日概要" class="headerlink" title="今日概要"></a>今日概要</h2><ul><li>CPU和主板信息的采集入库</li><li>后台管理示例</li><li>agent和第三方工具的模式</li></ul><a id="more"></a><h3 id="1-CPU和主板信息"><a href="#1-CPU和主板信息" class="headerlink" title="1.CPU和主板信息"></a>1.CPU和主板信息</h3><h3 id="2-简单的后台"><a href="#2-简单的后台" class="headerlink" title="2. 简单的后台"></a>2. 简单的后台</h3><ul><li>首页，服务器列表</li><li>图表<ul><li>echarts</li><li>highcharts<br>注意： <a href="https://www.cnblogs.com/wupeiqi/articles/6216618.html" target="_blank" rel="noopener">https://www.cnblogs.com/wupeiqi/articles/6216618.html</a></li></ul></li></ul><h3 id="3-agent和第三方工具的模式"><a href="#3-agent和第三方工具的模式" class="headerlink" title="3. agent和第三方工具的模式"></a>3. agent和第三方工具的模式</h3><ul><li><p>基于SSH实现</p></li><li><p>基于saltstack实现</p><ul><li><p>在进入公司之前，公司已经再用 saltstack（100服务器）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.cnblogs.com/wupeiqi/articles/6415436.html</span><br></pre></td></tr></table></figure><ul><li>master: 1台</li><li>minion: 99台</li></ul></li></ul></li><li><p>基于agent实现</p></li></ul><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><p>基于saltstack实现资产的采集</p><p>两个虚拟机</p><ul><li><p>master</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 安装salt-master</span><br><span class="line">    yum install salt-master</span><br><span class="line">2. 修改配置文件：/etc/salt/master</span><br><span class="line">    interface: 0.0.0.0    # 表示Master的IP </span><br><span class="line">3. 启动</span><br><span class="line">    service salt-master start</span><br></pre></td></tr></table></figure></li><li><p>minion</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 安装salt-minion</span><br><span class="line">    yum install salt-minion</span><br><span class="line"></span><br><span class="line">2. 修改配置文件 /etc/salt/minion</span><br><span class="line">    master: 10.211.55.4           # master的地址</span><br><span class="line">    id: c2.salt.com                    # 客户端在salt-master中显示的唯一ID</span><br><span class="line">3. 启动</span><br><span class="line">    service salt-minion start</span><br></pre></td></tr></table></figure></li><li><p>在master上进行授权</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">salt-key -L                # 查看已授权和未授权的slave</span><br><span class="line">salt-key -a  salve_id      # 接受指定id的salve</span><br><span class="line"></span><br><span class="line">salt-key -r  salve_id      # 拒绝指定id的salve</span><br><span class="line">salt-key -d  salve_id      # 删除指定id的salve</span><br></pre></td></tr></table></figure></li><li><p>在master上远程执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt &apos;c2.salt.com&apos; cmd.run  &apos;ifconfig&apos;</span><br></pre></td></tr></table></figure></li></ul><h2 id="内容梳理"><a href="#内容梳理" class="headerlink" title="内容梳理"></a>内容梳理</h2><h4 id="1-环境"><a href="#1-环境" class="headerlink" title="1. 环境"></a>1. 环境</h4><ul><li><p>开发环境，在我们自己电脑上进行项目开发。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如：开发一个网站。 在自己电脑上开发+连接自己电脑的数据库。</span><br></pre></td></tr></table></figure></li><li><p>测试环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">公司会给你提供一台服务器（阿里云）。 </span><br><span class="line">IP：47.93.2.18</span><br><span class="line">用户名：root</span><br><span class="line">密码：123123</span><br><span class="line">把你开发的网站要部署在这个服务器上。</span><br><span class="line">- 安装必要的环境：python/django/requests/mysql</span><br><span class="line">- 把代码拷贝到这个服务器上</span><br><span class="line">- 让我们的程序运行起来。</span><br><span class="line">python aa.py </span><br><span class="line">python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure></li><li><p>线上环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">公司会给运维一个台服务器（阿里云）。</span><br><span class="line">IP：47.93.2.22</span><br><span class="line">用户名：root</span><br><span class="line">密码：123123</span><br><span class="line"></span><br><span class="line">把你开发的网站要部署在这个服务器上。</span><br><span class="line">- 安装必要的环境：python/django/requests/mysql</span><br><span class="line">- 把代码拷贝到这个服务器上</span><br><span class="line">- 让我们的程序运行起来。</span><br><span class="line">python aa.py </span><br><span class="line">python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-远程连接服务器"><a href="#2-远程连接服务器" class="headerlink" title="2.远程连接服务器"></a>2.远程连接服务器</h4><p>开发者一般都是用xshell，通过ssh连接上远程服务器然后进行操作。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.168.16.85</span><br></pre></td></tr></table></figure><ul><li>用户名和密码连接</li><li>公钥和私钥进行连接</li></ul><h4 id="3-向服务器上传文件"><a href="#3-向服务器上传文件" class="headerlink" title="3.向服务器上传文件"></a>3.向服务器上传文件</h4><ul><li><p>FTP/xftp6</p></li><li><p>lrzsz</p></li><li><p>scp命令（对于五图形界面使用的频率最高）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp 文件 root@目标服务器:目录</span><br></pre></td></tr></table></figure></li><li><p>基于git ( 公司做代码上线会利用 ) </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">开发：git push origin master </span><br><span class="line">运维：git clone xxx</span><br></pre></td></tr></table></figure></li></ul><p>一般情况下：</p><ul><li><p>windows</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FTP</span><br><span class="line">lrzsz</span><br><span class="line">git终端来继续操作 scp</span><br></pre></td></tr></table></figure></li><li><p>mac/linux</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-运维"><a href="#4-运维" class="headerlink" title="4.运维"></a>4.运维</h4><p>运维管理500台服务器，由于数量太多，所以他们会借助于一些管理工具，例如：saltstack / ansible(paramiko)</p><p>未借助工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">                                                               服务器A（公钥）</span><br><span class="line">                                                               服务器B（公钥）</span><br><span class="line">运维      电脑（私钥）                                            服务器C（公钥）</span><br><span class="line">                                                               服务器D（公钥）</span><br><span class="line">                                                               服务器E（公钥）</span><br><span class="line">                                                               服务器...（公钥）</span><br></pre></td></tr></table></figure><p>借助工具（ansible/saltstack）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">                                                               服务器A（公钥）minion</span><br><span class="line">                                                               服务器B（公钥）minion</span><br><span class="line">运维      电脑（私钥）          服务器（salt-master）              服务器C（公钥）minion</span><br><span class="line">                                                               服务器D（公钥）minion</span><br><span class="line">                                                               服务器E（公钥）minion</span><br><span class="line">                                                               服务器...（公钥）minion</span><br></pre></td></tr></table></figure><ul><li><p>单独操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在自己电脑上连接远程服务器A</span><br><span class="line">ssh root@服务器A</span><br></pre></td></tr></table></figure></li><li><p>批量操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在自己电脑上连接salt-master</span><br><span class="line">ssh root@salt-master </span><br><span class="line">在master服务器上执行命令</span><br><span class="line">salt &quot;*&quot; cmd.run &quot;ifconfig&quot;</span><br><span class="line">让所有的minion都去执行ifconfig命令，并返回。</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-cmdb项目"><a href="#5-cmdb项目" class="headerlink" title="5.cmdb项目"></a>5.cmdb项目</h4><ul><li><p>基于ssh实现，适用场景：公司没有用  saltstack/用了ansible/没有任何工具 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">服务器(autoserver)       服务器（autoclient）</span><br><span class="line">                                                                服务器A（公钥）</span><br><span class="line">DB  API                  中控机(私钥)                             服务器B（公钥）</span><br><span class="line">后台管理                                                          服务器C（公钥）</span><br><span class="line">  人                                                              服务器D（公钥）</span><br><span class="line">                                                                 服务器E（公钥）</span><br><span class="line">                                                                 ...</span><br></pre></td></tr></table></figure></li><li><p>基于salt实现，使用场景：公司本身就有saltstack</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">服务器(autoserver)       服务器（autoclient）</span><br><span class="line">                                                                服务器A(salt-minion)</span><br><span class="line">DB  API                 中控机（salt-master）                    服务器B(salt-minion)</span><br><span class="line">后台管理                                                          服务器C(salt-minion)</span><br><span class="line">  人                                                              服务器D(salt-minion)</span><br><span class="line">                                                                 服务器E(salt-minion)</span><br><span class="line">                                                                 ...</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-cmdb项目测试"><a href="#6-cmdb项目测试" class="headerlink" title="6.cmdb项目测试"></a>6.cmdb项目测试</h4><h5 id="6-1-salt模式进行"><a href="#6-1-salt模式进行" class="headerlink" title="6.1 salt模式进行"></a>6.1 salt模式进行</h5><p>我们需要三台服务器进行测试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.16.64     做API和后台管理项目的部署</span><br><span class="line">192.168.16.85     做salt-master，在上面部署autoclient，用于资产采集。</span><br><span class="line">192.168.16.22     做salt-minion，让master去连接他并采集资产。</span><br></pre></td></tr></table></figure><h6 id="第一步：安装并使用salt-（运维）"><a href="#第一步：安装并使用salt-（运维）" class="headerlink" title="第一步：安装并使用salt （运维）"></a>第一步：安装并使用salt （运维）</h6><ul><li><p>master（192.168.16.85）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 安装salt-master</span><br><span class="line">    yum install salt-master</span><br><span class="line">2. 修改配置文件：/etc/salt/master</span><br><span class="line">    interface: 0.0.0.0    # 表示Master的IP </span><br><span class="line">3. 启动</span><br><span class="line">    service salt-master start</span><br></pre></td></tr></table></figure></li><li><p>minion（192.168.16.22）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 安装salt-minion</span><br><span class="line">    yum install salt-minion</span><br><span class="line"></span><br><span class="line">2. 修改配置文件 /etc/salt/minion</span><br><span class="line">    master: 10.211.55.4           # master的地址</span><br><span class="line">    id: c2.salt.com                    # 客户端在salt-master中显示的唯一ID</span><br><span class="line">3. 启动</span><br><span class="line">    service salt-minion start</span><br></pre></td></tr></table></figure></li><li><p>在master上进行授权</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">salt-key -L                # 查看已授权和未授权的slave</span><br><span class="line">salt-key -a  salve_id      # 接受指定id的salve</span><br><span class="line"></span><br><span class="line">salt-key -r  salve_id      # 拒绝指定id的salve</span><br><span class="line">salt-key -d  salve_id      # 删除指定id的salve</span><br></pre></td></tr></table></figure></li><li><p>在master上远程执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt &apos;c2.salt.com&apos; cmd.run  &apos;ifconfig&apos;</span><br></pre></td></tr></table></figure></li></ul><h6 id="第二步：项目开发"><a href="#第二步：项目开发" class="headerlink" title="第二步：项目开发"></a>第二步：项目开发</h6><p>….</p><p>…..</p><p>……</p><h6 id="第三步：项目部署"><a href="#第三步：项目部署" class="headerlink" title="第三步：项目部署"></a>第三步：项目部署</h6><ul><li><p>运行autoserver</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在django项目的setting中要修改</span><br><span class="line"></span><br><span class="line">ALLOWED_HOSTS = [&quot;*&quot;,]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 启动配置</span><br><span class="line">python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 其他人可以使用IP地址进行访问</span><br><span class="line">http://192.168.16.64:8000/server/index/</span><br></pre></td></tr></table></figure></li><li><p>运行autoclient</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将autoclient上传到192.168.16.85</span><br><span class="line">scp</span><br></pre></td></tr></table></figure></li></ul><h5 id="6-2-SSH模式"><a href="#6-2-SSH模式" class="headerlink" title="6.2 SSH模式"></a>6.2 SSH模式</h5><h6 id="第一步：生成一对公钥和私钥"><a href="#第一步：生成一对公钥和私钥" class="headerlink" title="第一步：生成一对公钥和私钥"></a>第一步：生成一对公钥和私钥</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><h6 id="第二步：公钥拷贝到远程服务器"><a href="#第二步：公钥拷贝到远程服务器" class="headerlink" title="第二步：公钥拷贝到远程服务器"></a>第二步：公钥拷贝到远程服务器</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-code-id -i id_rsa.pub root@192.168.16.22</span><br></pre></td></tr></table></figure><h6 id="第三步：修改配置围巾啊"><a href="#第三步：修改配置围巾啊" class="headerlink" title="第三步：修改配置围巾啊"></a>第三步：修改配置围巾啊</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在settings中修改：</span><br><span class="line">SSH_PRIVATE_KEY_PATH = r&apos;..id_rsa&apos;</span><br><span class="line">MODE = &quot;SSH&quot; # SALT/SSH</span><br></pre></td></tr></table></figure><h6 id="第四步：运行程序"><a href="#第四步：运行程序" class="headerlink" title="第四步：运行程序"></a>第四步：运行程序</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python app.py</span><br></pre></td></tr></table></figure><h4 id="7-公司里的规范"><a href="#7-公司里的规范" class="headerlink" title="7.公司里的规范"></a>7.公司里的规范</h4><p>公司里对于服务器很多都是用主机名，不用IP。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c1-bj-zw-shopping.com     192.168.16.64     做API和后台管理项目的部署</span><br><span class="line">c2-bj-zw-shopping.com     192.168.16.85     做salt-master，在上面部署autoclient，用于资产采集。</span><br><span class="line">c3-bj-zw-shopping.com     192.168.16.22     做salt-minion，让master去连接他并采集资产。</span><br></pre></td></tr></table></figure><h4 id="8-资产采集多久进行一次？如何进行？"><a href="#8-资产采集多久进行一次？如何进行？" class="headerlink" title="8.资产采集多久进行一次？如何进行？"></a>8.资产采集多久进行一次？如何进行？</h4><p>定时任务在中控机上定期执行脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30  1   *   *  *     /opt/python367/bin/python3  /data/app.py</span><br></pre></td></tr></table></figure><h4 id="9-前端示例-cmdbmanage-py-（2-7版本）"><a href="#9-前端示例-cmdbmanage-py-（2-7版本）" class="headerlink" title="9.前端示例 cmdbmanage.py （2.7版本）"></a>9.前端示例 cmdbmanage.py （2.7版本）</h4><ul><li><p>安装python2.7</p></li><li><p>安装django</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip2 install django==1.7.6</span><br></pre></td></tr></table></figure></li><li><p>安装MySQLdb / 安装pymysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip2 install pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure></li><li><p>安装 xlrd （读excel）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip2 install xlrd</span><br></pre></td></tr></table></figure></li><li><p>安装paramiko</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip2 install paramiko</span><br></pre></td></tr></table></figure></li><li><p>安装 pillow</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip2 install pillow</span><br></pre></td></tr></table></figure></li><li><p>在数据库中导入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create databse cmdb DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br><span class="line"></span><br><span class="line">mysql -u root -p  cmdb &lt; cmdb.sql</span><br></pre></td></tr></table></figure></li><li><p>在项目中修改数据库连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">        &apos;NAME&apos;: &apos;cmdb&apos;,</span><br><span class="line">        &apos;USER&apos;: &apos;root&apos;,</span><br><span class="line">        &apos;PASSWORD&apos;: &apos;222&apos;,</span><br><span class="line">        &apos;HOST&apos;: &apos;127.0.0.1&apos;,</span><br><span class="line">        &apos;PORT&apos;: &apos;3306&apos;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 manage.py runserver</span><br></pre></td></tr></table></figure></li><li><p>登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户名：wupeiqi</span><br><span class="line">密码：123</span><br></pre></td></tr></table></figure></li></ul><h2 id="项目总结"><a href="#项目总结" class="headerlink" title="项目总结"></a>项目总结</h2><ul><li><p>项目名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMDB / 资产管理系统 / 服务器配置管理系统 / 运维自动化平台</span><br></pre></td></tr></table></figure></li><li><p>项目描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CMDB是一套用于自动化采集服务器资产信息的项目，由于公司对于资产维护成本比较高并且数据准确性越来越低，因为原来都是搭建了samba服务,在内部共享了excel实现。通过cmdb项目可以改善资产采集的功能，减低人员成本提高工作效率，本项目实现主要有 采集中控机/restful api/资产管控平台 实现。</span><br><span class="line"></span><br><span class="line">对于采集中控机可以支持多种模式进行操作,如：saltstack/ansible/paramiko默认，并且开发过程中遵循开放封闭原则并且利用 工厂模式 实现可扩展性的插件。</span><br><span class="line"></span><br><span class="line">对于api，是严格是遵循restful规范并使用 django rest framework框架实现，并在内通过反射机制实现资产变更记录以及资产的持久化处理。</span><br><span class="line"></span><br><span class="line">资产管控平台主要为运维及主管提供数据支持和部分报表，支持excel批量导入导出，支持利用时间轴清晰的展示服务器生命周期，基于highcharts实现数据报表的展示。</span><br></pre></td></tr></table></figure></li><li><p>技术点（项目功能/我的职责）</p><ul><li><p>针对不同公司的业务开发，使用 paramiko/ansible/saltstack 实现远程采集资产的扩展。 </p></li><li><p>参考 middleware 实现源码并结合工厂模式，开发出了可插拔式的采集资产插件。</p></li><li><p>考虑到项目的严谨性，对于项目中的插件使用主动抛出异常进行约束。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- 有没有其他的约束？</span><br><span class="line">通过abc实现抽象类和抽象方法实现约束。</span><br><span class="line">- 你为什么不用abc？而用异常？</span><br><span class="line">abc 操作起来比较麻烦，也可以实现。 </span><br><span class="line">我觉得异常会更加简洁一些，并且我参考了一些源码，他们内部也是通过异常实现。 </span><br><span class="line"></span><br><span class="line">import abc</span><br><span class="line"></span><br><span class="line"># 抽象类</span><br><span class="line">class Base(metaclass=abc.ABCMeta):</span><br><span class="line">    </span><br><span class="line">    # 抽象方法</span><br><span class="line">    @abc.abstractmethod</span><br><span class="line">    def process(self):</span><br><span class="line">        pass</span><br><span class="line">class Foo(Base):</span><br><span class="line">    pass</span><br><span class="line">Foo()</span><br></pre></td></tr></table></figure></li><li><p>通过定制和扩展drf 内置authentication组件，实现用户认证。 </p></li><li><p>在restful api中实现api/版本/认证的功能。 </p></li><li><p>支持最服务器资产进行批量的导入导出，内部只用xlrd/xlwt模块进行操作。 </p></li><li><p>对于公司的服务器资产进行根据业务线做 数据报表的处理。  </p></li><li><p>基于rbac实现权限的信息的校验。</p></li></ul></li><li><p>面试题相关</p><ul><li><p>你的cmdb是怎们实现？</p></li><li><p>为什么要开发cmdb？</p></li><li><p>你们公司有多少台服务器？（物理机）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">70台服务器</span><br></pre></td></tr></table></figure></li><li><p>什么是品牌的服务器？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">戴尔</span><br></pre></td></tr></table></figure></li><li><p>资产采集都用到了那些命令？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">demidecode </span><br><span class="line">Megacli</span><br></pre></td></tr></table></figure></li><li><p>cmdb都用到了那些表？（13张表）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">用户表</span><br><span class="line">部门</span><br><span class="line">机房IDC</span><br><span class="line">服务器</span><br><span class="line">硬盘</span><br><span class="line">网卡</span><br><span class="line">内存</span><br><span class="line">变更记录</span><br><span class="line"></span><br><span class="line">菜单表</span><br><span class="line">权限</span><br><span class="line">角色表</span><br><span class="line">角色和权限关系</span><br><span class="line">用户和角色的关系表</span><br></pre></td></tr></table></figure></li><li><p>多少人开发？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1个人/2个人 + 运维人员</span><br></pre></td></tr></table></figure></li><li><p>开发了多久？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3个月 ~ 6个月</span><br><span class="line">质疑时间短，开发资产采集很简单；资产管控平台也是有你来开发。</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;内容回顾&quot;&gt;&lt;a href=&quot;#内容回顾&quot; class=&quot;headerlink&quot; title=&quot;内容回顾&quot;&gt;&lt;/a&gt;内容回顾&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;jwt的优势？&lt;/li&gt;
&lt;li&gt;节流是如何实现的?&lt;/li&gt;
&lt;li&gt;权限的实现流程？&lt;/li&gt;
&lt;li&gt;认证的实现流程？&lt;/li&gt;
&lt;li&gt;cmdb是如何实现的？&lt;/li&gt;
&lt;li&gt;cmdb开发的过程中你觉得什么最难搞？&lt;/li&gt;
&lt;li&gt;什么是跨域？如何解决跨域？&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;今日概要&quot;&gt;&lt;a href=&quot;#今日概要&quot; class=&quot;headerlink&quot; title=&quot;今日概要&quot;&gt;&lt;/a&gt;今日概要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;CPU和主板信息的采集入库&lt;/li&gt;
&lt;li&gt;后台管理示例&lt;/li&gt;
&lt;li&gt;agent和第三方工具的模式&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="cmdb" scheme="https://pl1649947109.github.io/pl1649947109/tags/cmdb/"/>
    
  </entry>
  
  <entry>
    <title>第一讲——flask的快速入门与网站的搭建</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/19/%E4%B9%A6/flask/%E7%AC%AC%E4%B8%80%E8%AE%B2%E2%80%94%E2%80%94flask%E7%9A%84%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%8E%E7%BD%91%E7%AB%99%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/19/书/flask/第一讲——flask的快速入门与网站的搭建/</id>
    <published>2019-11-19T12:00:00.000Z</published>
    <updated>2019-11-20T04:09:37.546Z</updated>
    
    <content type="html"><![CDATA[<p>django是个大而全的框架，flask是一个轻量级的框架。</p><p>django内部为我们提供了非常多的组件：orm / session / cookie / admin / form / modelform / 路由 / 视图 / 模板 /  中间件 / 分页 / auth / contenttype  / 缓存 / 信号 / 多数据库连接 </p><p>flask框架本身没有太多的功能：路由/视图/模板(jinja2)/session/中间件 ，第三方组件非常齐全。<br>注意：<strong>django的请求处理是逐一封装和传递； flask的请求是利用上下文管理来实现的</strong>。 </p><a id="more"></a><h2 id="内容回顾"><a href="#内容回顾" class="headerlink" title="内容回顾"></a>内容回顾</h2><ol><li>什么是jwt？</li><li>cmdb的实现原理？</li><li>都用到了那些命令？</li><li>遇到过哪些bug？</li><li>什么是开封封闭原则？</li></ol><h2 id="今日概要"><a href="#今日概要" class="headerlink" title="今日概要"></a>今日概要</h2><ul><li>flask的快速使用</li><li>实现一个xx管理系统</li><li>蓝图</li></ul><h2 id="今日详细"><a href="#今日详细" class="headerlink" title="今日详细"></a>今日详细</h2><h3 id="1-flask快速使用"><a href="#1-flask快速使用" class="headerlink" title="1.flask快速使用"></a>1.flask快速使用</h3><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install flask</span><br></pre></td></tr></table></figure><h4 id="1-1-依赖wsgi-Werkzeug"><a href="#1-1-依赖wsgi-Werkzeug" class="headerlink" title="1.1 依赖wsgi Werkzeug"></a>1.1 依赖wsgi Werkzeug</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    print(<span class="string">'请求来了'</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run_simple(<span class="string">'127.0.0.1'</span>, <span class="number">5000</span>, func)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(object)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self,environ, start_response)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"xx"</span></span><br><span class="line">    </span><br><span class="line">app = Flask()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run_simple(<span class="string">'127.0.0.1'</span>, <span class="number">5000</span>, app)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(object)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self,environ, start_response)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"xx"</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        run_simple(<span class="string">'127.0.0.1'</span>, <span class="number">5000</span>, self)</span><br><span class="line">        </span><br><span class="line">app = Flask()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h4 id="1-2-快速使用flask"><a href="#1-2-快速使用flask" class="headerlink" title="1.2 快速使用flask"></a>1.2 快速使用flask</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建flask对象</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'login'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>flask框架是基于werkzeug的wsgi实现，flask自己没有wsgi。 </li><li>用户请求一旦到来，就会之 <code>app.__call__</code>方法 。 </li><li>写flaks标准流程</li></ul><h4 id="1-3-用户登录-amp-用户管理"><a href="#1-3-用户登录-amp-用户管理" class="headerlink" title="1.3 用户登录&amp;用户管理"></a>1.3 用户登录&amp;用户管理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, jsonify,request,redirect,url_for</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">DATA_DICT = &#123;</span><br><span class="line">    <span class="number">1</span>: &#123;<span class="string">'name'</span>:<span class="string">'陈硕'</span>,<span class="string">"age"</span>:<span class="number">73</span>&#125;,</span><br><span class="line">    <span class="number">2</span>: &#123;<span class="string">'name'</span>:<span class="string">'汪洋'</span>,<span class="string">"age"</span>:<span class="number">84</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="comment"># return '登录' # HttpResponse</span></span><br><span class="line">        <span class="comment"># return render_template('login.html') # render</span></span><br><span class="line">        <span class="comment"># return jsonify(&#123;'code':1000,'data':[1,2,3]&#125;) # JsonResponse</span></span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>)</span><br><span class="line">    user = request.form.get(<span class="string">'user'</span>)</span><br><span class="line">    pwd = request.form.get(<span class="string">'pwd'</span>)</span><br><span class="line">    <span class="keyword">if</span> user == <span class="string">'changxin'</span> <span class="keyword">and</span> pwd == <span class="string">"dsb"</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">'/index'</span>)</span><br><span class="line">    error = <span class="string">'用户名或密码错误'</span></span><br><span class="line">    <span class="comment"># return render_template('login.html',**&#123;'error':error&#125;)</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>,error=error)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index',endpoint='idx')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    data_dict = DATA_DICT</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>,data_dict=data_dict)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/edit',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">()</span>:</span></span><br><span class="line">    nid = request.args.get(<span class="string">'nid'</span>)</span><br><span class="line">    nid = int(nid)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"GET"</span>:</span><br><span class="line">        info = DATA_DICT[nid]</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'edit.html'</span>,info=info)</span><br><span class="line"></span><br><span class="line">    user = request.form.get(<span class="string">'user'</span>)</span><br><span class="line">    age = request.form.get(<span class="string">'age'</span>)</span><br><span class="line">    DATA_DICT[nid][<span class="string">'name'</span>] = user</span><br><span class="line">    DATA_DICT[nid][<span class="string">'age'</span>] = age</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'idx'</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/del/&lt;int:nid&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(nid)</span>:</span></span><br><span class="line">    <span class="keyword">del</span> DATA_DICT[nid]</span><br><span class="line">    <span class="comment"># return redirect('/index')</span></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">"idx"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li><p>flask路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/login',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>路由的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/login',methods=['GET','POST'],endpoint="login")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：endpoint不能重名</span></span><br></pre></td></tr></table></figure></li><li><p>动态路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index/&lt;name&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(name)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index/&lt;int:nid&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(nid)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>获取提交的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">request.args <span class="comment"># GET形式传递的参数</span></span><br><span class="line">request.form <span class="comment"># POST形式提交的参数</span></span><br></pre></td></tr></table></figure></li><li><p>返回数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">'模板文件'</span>)</span><br><span class="line"><span class="keyword">return</span> jsonify()</span><br><span class="line">reutrn redirect(<span class="string">'/index/'</span>) <span class="comment"># reutrn redirect(url_for('idx'))</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"...."</span></span><br></pre></td></tr></table></figure></li><li><p>模板处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; x &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> item <span class="keyword">in</span> list %&#125;</span><br><span class="line">&#123;&#123;item&#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="1-4-保存用户会话信息"><a href="#1-4-保存用户会话信息" class="headerlink" title="1.4 保存用户会话信息"></a>1.4 保存用户会话信息</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request,render_template,redirect,session</span><br><span class="line"><span class="meta">@app.route('/login', methods=["GET", "POST"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">"GET"</span>:</span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">'login.html'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">username = request.form.get(<span class="string">"username"</span>)</span><br><span class="line">password = request.form.get(<span class="string">"password"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行sql</span></span><br><span class="line"><span class="keyword">with</span> mysql() <span class="keyword">as</span> cursor:</span><br><span class="line">row_count = cursor.execute(<span class="string">"select * from userinfo"</span>)</span><br><span class="line"><span class="keyword">for</span> count <span class="keyword">in</span> range(row_count):</span><br><span class="line">userinfo_obj = cursor.fetchone()</span><br><span class="line">user = userinfo_obj.get(<span class="string">'username'</span>)</span><br><span class="line">pwd = userinfo_obj.get(<span class="string">'password'</span>)</span><br><span class="line"><span class="keyword">if</span> username == user <span class="keyword">and</span> password == pwd:</span><br><span class="line">                        <span class="comment">#登录成功，设置session，但是session不是封装在request里面，而是需要我们  导入</span></span><br><span class="line">session[<span class="string">'is_login'</span>] = <span class="literal">True</span></span><br><span class="line"><span class="keyword">return</span> redirect(<span class="string">"/listbook"</span>)</span><br><span class="line"></span><br><span class="line">error = <span class="string">"用户名或密码失败"</span></span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">'login.html'</span>, error=error)</span><br></pre></td></tr></table></figure><h3 id="2-蓝图（blue-print"><a href="#2-蓝图（blue-print" class="headerlink" title="2. 蓝图（blue print)"></a>2. 蓝图（blue print)</h3><p>构建业务功能可拆分的目录结构。</p><p>面试题：django的app和flask的蓝图有什么区别？（一样）</p><p>总路由：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .views.book <span class="keyword">import</span> books</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span><span class="params">()</span>:</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment">#蓝图注册</span></span><br><span class="line">app.register_blueprint(books)</span><br></pre></td></tr></table></figure><p>分路由（蓝图）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span>  Blueprint</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request,render_template,redirect,url_for</span><br><span class="line"></span><br><span class="line"><span class="comment">#注册app</span></span><br><span class="line">books = Blueprint(<span class="string">'book'</span>,__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@books.route('/listbook',methods = ["GET","POST"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listbook</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>注意：这里面是最容易出现重名问题的，所以在创建的时候一定要检查</strong></p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ol><li>flask和django的区别？</li><li>其他</li><li>flask的session是保存在：加密的形式保存在浏览器的cookie上。</li><li>装饰器相关<ul><li>编写装饰器，记得加functools</li><li>多个装饰器的应用</li></ul></li><li>蓝图</li></ol><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">flask中的配置文件是一个flask.config.Config对象（继承字典）,默认配置为：</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'DEBUG'</span>:                                get_debug_flag(default=<span class="literal">False</span>),  是否开启Debug模式</span><br><span class="line">        <span class="string">'TESTING'</span>:                              <span class="literal">False</span>,                          是否开启测试模式</span><br><span class="line">        <span class="string">'PROPAGATE_EXCEPTIONS'</span>:                 <span class="literal">None</span>,                          </span><br><span class="line">        <span class="string">'PRESERVE_CONTEXT_ON_EXCEPTION'</span>:        <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'SECRET_KEY'</span>:                           <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'PERMANENT_SESSION_LIFETIME'</span>:           timedelta(days=<span class="number">31</span>),</span><br><span class="line">        <span class="string">'USE_X_SENDFILE'</span>:                       <span class="literal">False</span>,</span><br><span class="line">        <span class="string">'LOGGER_NAME'</span>:                          <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'LOGGER_HANDLER_POLICY'</span>:               <span class="string">'always'</span>,</span><br><span class="line">        <span class="string">'SERVER_NAME'</span>:                          <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'APPLICATION_ROOT'</span>:                     <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'SESSION_COOKIE_NAME'</span>:                  <span class="string">'session'</span>,</span><br><span class="line">        <span class="string">'SESSION_COOKIE_DOMAIN'</span>:                <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'SESSION_COOKIE_PATH'</span>:                  <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'SESSION_COOKIE_HTTPONLY'</span>:              <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'SESSION_COOKIE_SECURE'</span>:                <span class="literal">False</span>,</span><br><span class="line">        <span class="string">'SESSION_REFRESH_EACH_REQUEST'</span>:         <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'MAX_CONTENT_LENGTH'</span>:                   <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'SEND_FILE_MAX_AGE_DEFAULT'</span>:            timedelta(hours=<span class="number">12</span>),</span><br><span class="line">        <span class="string">'TRAP_BAD_REQUEST_ERRORS'</span>:              <span class="literal">False</span>,</span><br><span class="line">        <span class="string">'TRAP_HTTP_EXCEPTIONS'</span>:                 <span class="literal">False</span>,</span><br><span class="line">        <span class="string">'EXPLAIN_TEMPLATE_LOADING'</span>:             <span class="literal">False</span>,</span><br><span class="line">        <span class="string">'PREFERRED_URL_SCHEME'</span>:                 <span class="string">'http'</span>,</span><br><span class="line">        <span class="string">'JSON_AS_ASCII'</span>:                        <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'JSON_SORT_KEYS'</span>:                       <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'JSONIFY_PRETTYPRINT_REGULAR'</span>:          <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'JSONIFY_MIMETYPE'</span>:                     <span class="string">'application/json'</span>,</span><br><span class="line">        <span class="string">'TEMPLATES_AUTO_RELOAD'</span>:                <span class="literal">None</span>,</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">方式一：</span><br><span class="line">    app.config[<span class="string">'DEBUG'</span>] = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">    PS： 由于Config对象本质上是字典，所以还可以使用app.config.update(...)</span><br><span class="line"> </span><br><span class="line">方式二：</span><br><span class="line">    app.config.from_pyfile(<span class="string">"python文件名称"</span>)</span><br><span class="line">        如：</span><br><span class="line">            settings.py</span><br><span class="line">                DEBUG = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">            app.config.from_pyfile(<span class="string">"settings.py"</span>)</span><br><span class="line"> </span><br><span class="line">    app.config.from_envvar(<span class="string">"环境变量名称"</span>)</span><br><span class="line">        环境变量的值为python文件名称名称，内部调用from_pyfile方法</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    app.config.from_json(<span class="string">"json文件名称"</span>)</span><br><span class="line">        JSON文件名称，必须是json格式，因为内部会执行json.loads</span><br><span class="line"> </span><br><span class="line">    app.config.from_mapping(&#123;<span class="string">'DEBUG'</span>:<span class="literal">True</span>&#125;)</span><br><span class="line">        字典格式</span><br><span class="line"> </span><br><span class="line">    app.config.from_object(<span class="string">"python类或类的路径"</span>)</span><br><span class="line"> </span><br><span class="line">        app.config.from_object(<span class="string">'pro_flask.settings.TestingConfig'</span>)</span><br><span class="line"> </span><br><span class="line">        settings.py</span><br><span class="line"> </span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">Config</span><span class="params">(object)</span>:</span></span><br><span class="line">                DEBUG = <span class="literal">False</span></span><br><span class="line">                TESTING = <span class="literal">False</span></span><br><span class="line">                DATABASE_URI = <span class="string">'sqlite://:memory:'</span></span><br><span class="line"> </span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">ProductionConfig</span><span class="params">(Config)</span>:</span></span><br><span class="line">                DATABASE_URI = <span class="string">'mysql://user@localhost/foo'</span></span><br><span class="line"> </span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">DevelopmentConfig</span><span class="params">(Config)</span>:</span></span><br><span class="line">                DEBUG = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">TestingConfig</span><span class="params">(Config)</span>:</span></span><br><span class="line">                TESTING = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">        PS: 从sys.path中已经存在路径开始写</span><br><span class="line">     </span><br><span class="line"> </span><br><span class="line">    PS: settings.py文件默认路径要放在程序root_path目录，如果instance_relative_config为<span class="literal">True</span>，则就是instance_path目录</span><br></pre></td></tr></table></figure><h3 id="路由系统"><a href="#路由系统" class="headerlink" title="路由系统"></a>路由系统</h3><ul><li>@app.route(‘/login’, methods=[‘GET’, ‘POST’])</li><li>@app.route(‘/user/<code>&lt;username&gt;</code>‘)</li><li>@app.route(‘/post/<code>&lt;int:post_id&gt;</code>‘)</li><li>@app.route(‘/post/<code>&lt;float:post_id&gt;</code>‘)</li><li>@app.route(‘/post/<code>&lt;path:path&gt;</code>‘)</li></ul><p>常用路由系统有以上的五种，所有的路由系统都是基于以下对应关系来处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DEFAULT_CONVERTERS = &#123;</span><br><span class="line">    <span class="string">'default'</span>:          UnicodeConverter,</span><br><span class="line">    <span class="string">'string'</span>:           UnicodeConverter,</span><br><span class="line">    <span class="string">'any'</span>:              AnyConverter,</span><br><span class="line">    <span class="string">'path'</span>:             PathConverter,</span><br><span class="line">    <span class="string">'int'</span>:              IntegerConverter,</span><br><span class="line">    <span class="string">'float'</span>:            FloatConverter,</span><br><span class="line">    <span class="string">'uuid'</span>:             UUIDConverter,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="请求与相响应"><a href="#请求与相响应" class="headerlink" title="请求与相响应"></a>请求与相响应</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> redirect</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> make_response</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login.html', methods=['GET', "POST"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 请求相关信息</span></span><br><span class="line">    <span class="comment"># request.method</span></span><br><span class="line">    <span class="comment"># request.args</span></span><br><span class="line">    <span class="comment"># request.form</span></span><br><span class="line">    <span class="comment"># request.values</span></span><br><span class="line">    <span class="comment"># request.cookies</span></span><br><span class="line">    <span class="comment"># request.headers</span></span><br><span class="line">    <span class="comment"># request.path</span></span><br><span class="line">    <span class="comment"># request.full_path</span></span><br><span class="line">    <span class="comment"># request.script_root</span></span><br><span class="line">    <span class="comment"># request.url</span></span><br><span class="line">    <span class="comment"># request.base_url</span></span><br><span class="line">    <span class="comment"># request.url_root</span></span><br><span class="line">    <span class="comment"># request.host_url</span></span><br><span class="line">    <span class="comment"># request.host</span></span><br><span class="line">    <span class="comment"># request.files</span></span><br><span class="line">    <span class="comment"># obj = request.files['the_file_name']</span></span><br><span class="line">    <span class="comment"># obj.save('/var/www/uploads/' + secure_filename(f.filename))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 响应相关信息</span></span><br><span class="line">    <span class="comment"># return "字符串"</span></span><br><span class="line">    <span class="comment"># return render_template('html模板路径',**&#123;&#125;)</span></span><br><span class="line">    <span class="comment"># return redirect('/index.html')</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># response = make_response(render_template('index.html'))</span></span><br><span class="line">    <span class="comment"># response是flask.wrappers.Response类型</span></span><br><span class="line">    <span class="comment"># response.delete_cookie('key')</span></span><br><span class="line">    <span class="comment"># response.set_cookie('key', 'value')</span></span><br><span class="line">    <span class="comment"># response.headers['X-Something'] = 'A value'</span></span><br><span class="line">    <span class="comment"># return response</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"内容"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h3 id="蓝图"><a href="#蓝图" class="headerlink" title="蓝图"></a>蓝图</h3><ul><li>蓝图URL前缀：xxx = Blueprint(‘account’, <strong>name</strong>,url_prefix=’/xxx’)</li><li>蓝图子域名：xxx = Blueprint(‘account’, <strong>name</strong>,subdomain=’admin’)</li></ul><h3 id="请求扩展"><a href="#请求扩展" class="headerlink" title="请求扩展"></a>请求扩展</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Request, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__, template_folder=<span class="string">'templates'</span>)</span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_first_request1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'before_first_request1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_first_request2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'before_first_request2'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_request1</span><span class="params">()</span>:</span></span><br><span class="line">    Request.nnn = <span class="number">123</span></span><br><span class="line">    print(<span class="string">'before_request1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_request2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'before_request2'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_request1</span><span class="params">(response)</span>:</span></span><br><span class="line">    print(<span class="string">'before_request1'</span>, response)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_request2</span><span class="params">(response)</span>:</span></span><br><span class="line">    print(<span class="string">'before_request2'</span>, response)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span><span class="params">(error)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'This page does not exist'</span>, <span class="number">404</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.template_global()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sb</span><span class="params">(a1, a2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a1 + a2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.template_filter()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db</span><span class="params">(a1, a2, a3)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a1 + a2 + a3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'hello.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;django是个大而全的框架，flask是一个轻量级的框架。&lt;/p&gt;
&lt;p&gt;django内部为我们提供了非常多的组件：orm / session / cookie / admin / form / modelform / 路由 / 视图 / 模板 /  中间件 / 分页 / auth / contenttype  / 缓存 / 信号 / 多数据库连接 &lt;/p&gt;
&lt;p&gt;flask框架本身没有太多的功能：路由/视图/模板(jinja2)/session/中间件 ，第三方组件非常齐全。&lt;br&gt;注意：&lt;strong&gt;django的请求处理是逐一封装和传递； flask的请求是利用上下文管理来实现的&lt;/strong&gt;。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="flask" scheme="https://pl1649947109.github.io/pl1649947109/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>第七部分——算法部分</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/18/%E5%B0%8F%E7%BB%BF%E6%9C%AC/%E7%AC%AC%E4%B8%83%E9%83%A8%E5%88%86%E2%80%94%E2%80%94%E7%AE%97%E6%B3%95%E9%83%A8%E5%88%86/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/18/小绿本/第七部分——算法部分/</id>
    <published>2019-11-18T12:00:00.000Z</published>
    <updated>2019-11-18T16:13:40.510Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-顺序表、链表的区别及应用场景？"><a href="#1-顺序表、链表的区别及应用场景？" class="headerlink" title="1.顺序表、链表的区别及应用场景？"></a>1.顺序表、链表的区别及应用场景？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-哈希树的构造与应用场景？"><a href="#2-哈希树的构造与应用场景？" class="headerlink" title="2.哈希树的构造与应用场景？"></a>2.哈希树的构造与应用场景？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="3-B-Tree和B-Tree的区别？"><a href="#3-B-Tree和B-Tree的区别？" class="headerlink" title="3.B Tree和B+ Tree的区别？"></a>3.B Tree和B+ Tree的区别？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-什么是中序遍历？"><a href="#4-什么是中序遍历？" class="headerlink" title="4.什么是中序遍历？"></a>4.什么是中序遍历？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-什么是二叉树？"><a href="#5-什么是二叉树？" class="headerlink" title="5.什么是二叉树？"></a>5.什么是二叉树？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-手写快排；堆排；几种常用排序的算法复杂度是多少；快排平均复杂度多少，最坏情况如何优化"><a href="#6-手写快排；堆排；几种常用排序的算法复杂度是多少；快排平均复杂度多少，最坏情况如何优化" class="headerlink" title="6.手写快排；堆排；几种常用排序的算法复杂度是多少；快排平均复杂度多少，最坏情况如何优化"></a>6.手写快排；堆排；几种常用排序的算法复杂度是多少；快排平均复杂度多少，最坏情况如何优化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="7-手写：已知一个长度n的无序列表，元素均是数字，要求把所有间隔为d的组合找出来，你写的解法算法复杂度多少"><a href="#7-手写：已知一个长度n的无序列表，元素均是数字，要求把所有间隔为d的组合找出来，你写的解法算法复杂度多少" class="headerlink" title="7.手写：已知一个长度n的无序列表，元素均是数字，要求把所有间隔为d的组合找出来，你写的解法算法复杂度多少"></a>7.手写：已知一个长度n的无序列表，元素均是数字，要求把所有间隔为d的组合找出来，你写的解法算法复杂度多少</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-手写：一个列表A-A1，A2，…-An-，要求把列表中所有的组合情况打印出来；"><a href="#8-手写：一个列表A-A1，A2，…-An-，要求把列表中所有的组合情况打印出来；" class="headerlink" title="8.手写：一个列表A=[A1，A2，…,An]，要求把列表中所有的组合情况打印出来；"></a>8.手写：一个列表A=[A1，A2，…,An]，要求把列表中所有的组合情况打印出来；</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="9-手写：用一行python写出1-2-3-…-10-8"><a href="#9-手写：用一行python写出1-2-3-…-10-8" class="headerlink" title="9.手写：用一行python写出1+2+3+…+10**8"></a>9.手写：用一行python写出1+2+3+…+10**8</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="10-手写python：用递归的方式判断字符串是否为回文"><a href="#10-手写python：用递归的方式判断字符串是否为回文" class="headerlink" title="10.手写python：用递归的方式判断字符串是否为回文"></a>10.手写python：用递归的方式判断字符串是否为回文</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="11-单向链表长度未知，如何判断其中是否有环"><a href="#11-单向链表长度未知，如何判断其中是否有环" class="headerlink" title="11.单向链表长度未知，如何判断其中是否有环"></a>11.单向链表长度未知，如何判断其中是否有环</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="12-单向链表如何使用快速排序算法进行排序"><a href="#12-单向链表如何使用快速排序算法进行排序" class="headerlink" title="12.单向链表如何使用快速排序算法进行排序"></a>12.单向链表如何使用快速排序算法进行排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="13-手写：一个长度n的无序数字元素列表，如何求中位数，如何尽快的估算中位数，"><a href="#13-手写：一个长度n的无序数字元素列表，如何求中位数，如何尽快的估算中位数，" class="headerlink" title="13.手写：一个长度n的无序数字元素列表，如何求中位数，如何尽快的估算中位数，"></a>13.手写：一个长度n的无序数字元素列表，如何求中位数，如何尽快的估算中位数，</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="14-你的算法复杂度是多少；"><a href="#14-你的算法复杂度是多少；" class="headerlink" title="14.你的算法复杂度是多少；"></a>14.你的算法复杂度是多少；</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="15-如何遍历一个内部未知的文件夹（两种树的优先遍历方式）"><a href="#15-如何遍历一个内部未知的文件夹（两种树的优先遍历方式）" class="headerlink" title="15.如何遍历一个内部未知的文件夹（两种树的优先遍历方式）"></a>15.如何遍历一个内部未知的文件夹（两种树的优先遍历方式）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="16-1-1-2-2-3-4-4-5-5-5-找出不重复的元素（黄包车）"><a href="#16-1-1-2-2-3-4-4-5-5-5-找出不重复的元素（黄包车）" class="headerlink" title="16.[1,1,2,2,3,4,4,5,5,5] 找出不重复的元素（黄包车）"></a>16.[1,1,2,2,3,4,4,5,5,5] 找出不重复的元素（黄包车）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="17-反转链表，要求时间复杂度O-N-，空间复杂度O-1-（火币）"><a href="#17-反转链表，要求时间复杂度O-N-，空间复杂度O-1-（火币）" class="headerlink" title="17.反转链表，要求时间复杂度O(N)，空间复杂度O(1) （火币）"></a>17.反转链表，要求时间复杂度O(N)，空间复杂度O(1) （火币）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="18-非递归实现斐波那契数列-（爱奇艺）"><a href="#18-非递归实现斐波那契数列-（爱奇艺）" class="headerlink" title="18.非递归实现斐波那契数列 （爱奇艺）"></a>18.非递归实现斐波那契数列 （爱奇艺）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="19-使用递归的方式实现斐波那契数列"><a href="#19-使用递归的方式实现斐波那契数列" class="headerlink" title="19.使用递归的方式实现斐波那契数列"></a>19.使用递归的方式实现斐波那契数列</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="20-这一周股市价格为-2-6-1-4-8-，求哪一天买入哪一天卖出，可获得最大收益，最大收益为多少-（爱奇艺）"><a href="#20-这一周股市价格为-2-6-1-4-8-，求哪一天买入哪一天卖出，可获得最大收益，最大收益为多少-（爱奇艺）" class="headerlink" title="20.这一周股市价格为[2,6,1,4,8]，求哪一天买入哪一天卖出，可获得最大收益，最大收益为多少 （爱奇艺）"></a>20.这一周股市价格为[2,6,1,4,8]，求哪一天买入哪一天卖出，可获得最大收益，最大收益为多少 （爱奇艺）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="21-一个整形无序数组，里面三个数只和等于一个目标值，求这三个数-（小米）"><a href="#21-一个整形无序数组，里面三个数只和等于一个目标值，求这三个数-（小米）" class="headerlink" title="21.一个整形无序数组，里面三个数只和等于一个目标值，求这三个数 （小米）"></a>21.一个整形无序数组，里面三个数只和等于一个目标值，求这三个数 （小米）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="22-链表问题-（小米）"><a href="#22-链表问题-（小米）" class="headerlink" title="22.链表问题 （小米）"></a>22.链表问题 （小米）</h4><p>input:(2-&gt;4-&gt;3)+(5-&gt;6-&gt;-&gt;4)<br>output:7-&gt;0-&gt;8<br>342+465 = 807</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="23-扑克牌问题-（小米）"><a href="#23-扑克牌问题-（小米）" class="headerlink" title="23.扑克牌问题 （小米）"></a>23.扑克牌问题 （小米）</h4><p>有十张扑克牌，从上面开始抽，抽出一张放桌子上，然后再抽出一张放扑克牌的最下面，这样循环往复的操作，直到手里的牌都没有了。这时，桌子上牌的顺序正好是1 2 3 4 5 6 7 8 9 10。要求写代码求出原顺序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="24-手写大顶堆-（linkedMe）"><a href="#24-手写大顶堆-（linkedMe）" class="headerlink" title="24.手写大顶堆 （linkedMe）"></a>24.手写大顶堆 （linkedMe）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="25-手写LRU-算法-（火币）"><a href="#25-手写LRU-算法-（火币）" class="headerlink" title="25.手写LRU 算法 （火币）"></a>25.手写LRU 算法 （火币）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="26-字符串相加-（滴滴）"><a href="#26-字符串相加-（滴滴）" class="headerlink" title="26.字符串相加 （滴滴）"></a>26.字符串相加 （滴滴）</h4><p>两个数字类型的字符串，直接转int或者double肯定都放不下，然后求这两个数的和，返回值还是字符串，15分钟时间，要求无Bug</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="27-寻找目标值位置-（滴滴）"><a href="#27-寻找目标值位置-（滴滴）" class="headerlink" title="27.寻找目标值位置 （滴滴）"></a>27.寻找目标值位置 （滴滴）</h4><p>有一个二维数组，数组横向有序，纵向有序，求目标值的位置，10分钟时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="28-求字符串“efabcbaefehiabcba”中最长的回文数，不去重（美团）"><a href="#28-求字符串“efabcbaefehiabcba”中最长的回文数，不去重（美团）" class="headerlink" title="28.求字符串“efabcbaefehiabcba”中最长的回文数，不去重（美团）"></a>28.求字符串“efabcbaefehiabcba”中最长的回文数，不去重（美团）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="29-反转int类型的值x，不要借用String，只用int-即可。-amp-amp-针对该程序，写出其应有的测试用例-（美团）"><a href="#29-反转int类型的值x，不要借用String，只用int-即可。-amp-amp-针对该程序，写出其应有的测试用例-（美团）" class="headerlink" title="29.反转int类型的值x，不要借用String，只用int 即可。&amp;&amp; 针对该程序，写出其应有的测试用例 （美团）"></a>29.反转int类型的值x，不要借用String，只用int 即可。&amp;&amp; 针对该程序，写出其应有的测试用例 （美团）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="30-哨兵机制、选举算法"><a href="#30-哨兵机制、选举算法" class="headerlink" title="30.哨兵机制、选举算法"></a>30.哨兵机制、选举算法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="31-HashMap、concurrentHashMap的区别及底层实现、HashMap和HashTable-的区别？"><a href="#31-HashMap、concurrentHashMap的区别及底层实现、HashMap和HashTable-的区别？" class="headerlink" title="31.HashMap、concurrentHashMap的区别及底层实现、HashMap和HashTable 的区别？"></a>31.HashMap、concurrentHashMap的区别及底层实现、HashMap和HashTable 的区别？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="32-什么是红黑树，什么是B-Tree，为什么HashMap中用红黑树不用其他树？（B-树还是很多公司考的）"><a href="#32-什么是红黑树，什么是B-Tree，为什么HashMap中用红黑树不用其他树？（B-树还是很多公司考的）" class="headerlink" title="32.什么是红黑树，什么是B-Tree，为什么HashMap中用红黑树不用其他树？（B+树还是很多公司考的）"></a>32.什么是红黑树，什么是B-Tree，为什么HashMap中用红黑树不用其他树？（B+树还是很多公司考的）</h4><p>对MySQL索引的理解，为什么MySQL索引中用B+Tree，不用B-Tree 或者其他树，为什么不用hash 索引？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="33-实现一个二分查找"><a href="#33-实现一个二分查找" class="headerlink" title="33.实现一个二分查找"></a>33.实现一个二分查找</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="34-简单描述一下快速排序的原理"><a href="#34-简单描述一下快速排序的原理" class="headerlink" title="34.简单描述一下快速排序的原理"></a>34.简单描述一下快速排序的原理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实现以下的算法:</p><h4 id="35-链表的冒泡排序"><a href="#35-链表的冒泡排序" class="headerlink" title="35.链表的冒泡排序"></a>35.链表的冒泡排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="36-树的顺序遍历"><a href="#36-树的顺序遍历" class="headerlink" title="36.树的顺序遍历"></a>36.树的顺序遍历</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="37-顺序表"><a href="#37-顺序表" class="headerlink" title="37.顺序表"></a>37.顺序表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>逻辑回归</p><p>决策树</p><p>随机森林</p><p>神经网络</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-顺序表、链表的区别及应用场景？&quot;&gt;&lt;a href=&quot;#1-顺序表、链表的区别及应用场景？&quot; class=&quot;headerlink&quot; title=&quot;1.顺序表、链表的区别及应用场景？&quot;&gt;&lt;/a&gt;1.顺序表、链表的区别及应用场景？&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;2-哈希树的构造与应用场景？&quot;&gt;&lt;a href=&quot;#2-哈希树的构造与应用场景？&quot; class=&quot;headerlink&quot; title=&quot;2.哈希树的构造与应用场景？&quot;&gt;&lt;/a&gt;2.哈希树的构造与应用场景？&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="小绿本" scheme="https://pl1649947109.github.io/pl1649947109/tags/%E5%B0%8F%E7%BB%BF%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>async——源码解读</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/18/%E7%9F%A5%E8%AF%86%E6%89%A9%E5%B1%95/async%E2%80%94%E2%80%94%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/18/知识扩展/async——源码解读/</id>
    <published>2019-11-18T12:00:00.000Z</published>
    <updated>2019-11-16T15:52:06.409Z</updated>
    
    <content type="html"><![CDATA[<h3 id="内容解读"><a href="#内容解读" class="headerlink" title="内容解读"></a>内容解读</h3><p>PEP 492 - 具有异步和等待语法的协同程序</p><p>此PEP假定异步任务类似于stdlib模块<em>asyncio.events.AbstracEventLoop</em>的事件循环调度和协调。虽然PEP不依赖任何特定的事件循环实现，但它仅与使用yield作为调度器程序信号的协程类型相关，表明协同程序将等待直到事件完成。（如IO）</p><p>新的协程声明语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_data</span><span class="params">(db)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>协程的关键属性</strong></p><ul><li>async def函数总是协程，及时他们不包含awai表达式。</li><li>从异步函数中的表达式获得yield或yield是一个SystaxError。</li><li>在内部：<ul><li>CO_CORUTTNE用于标记本机协同程序。</li><li>CO_ITERABLE_COROUNTINE用于使基于生成器的协同程序与本机协同程序兼容。</li></ul></li><li>常规生成器在被调用时返回一个生成器对象；同样，协同程序返回一个协程对象。</li><li>StopIteration异常不会从协程传播出去，而是被RuntimeError替换。</li><li>当垃圾手机本机协程时，如果从未等待过，则会引发RuntimeWarning</li></ul><a id="more"></a><p><strong>等待表达</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">async def read_data(db):</span><br><span class="line">data = await db.fetch(&apos;SELECT...&apos;)</span><br></pre></td></tr></table></figure><p>await，*<em>类似于yield from *</em>,暂停执行的read_data协程，直到db.fetch等待完成并返回结果数据。</p><p><strong>更新运算符优先级表</strong></p><table><thead><tr><th align="left">Operator</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>yield</code> <code>x</code>, <code>yield from</code> <code>x</code></td><td align="left">Yield expression</td></tr><tr><td align="left"><code>lambda</code></td><td align="left">Lambda expression</td></tr><tr><td align="left"><code>if</code> – <code>else</code></td><td align="left">Conditional expression</td></tr><tr><td align="left"><code>or</code></td><td align="left">Boolean OR</td></tr><tr><td align="left"><code>and</code></td><td align="left">Boolean AND</td></tr><tr><td align="left"><code>not</code> <code>x</code></td><td align="left">Boolean NOT</td></tr><tr><td align="left"><code>in</code>, <code>not in</code>, <code>is</code>, <code>is not</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>,<code>!=</code>, <code>==</code></td><td align="left">Comparisons, including membership tests and identity tests</td></tr><tr><td align="left">`</td><td align="left">`</td></tr><tr><td align="left"><code>^</code></td><td align="left">Bitwise XOR</td></tr><tr><td align="left"><code>&amp;</code></td><td align="left">Bitwise AND</td></tr><tr><td align="left"><code>&lt;&lt;</code>, <code>&gt;&gt;</code></td><td align="left">Shifts</td></tr><tr><td align="left"><code>+</code>, <code>-</code></td><td align="left">Addition and subtraction</td></tr><tr><td align="left"><code>*</code>, <code>@</code>, <code>/</code>, <code>//</code>, <code>%</code></td><td align="left">Multiplication, matrix multiplication, division, remainder</td></tr><tr><td align="left"><code>+x</code>, <code>-x</code>, <code>~x</code></td><td align="left">Positive, negative, bitwise NOT</td></tr><tr><td align="left"><code>**</code></td><td align="left">Exponentiation</td></tr><tr><td align="left"><code>await</code> <code>x</code></td><td align="left">Await expression</td></tr><tr><td align="left"><code>x[index]</code>, <code>x[index:index]</code>,<code>x(arguments...)</code>, <code>x.attribute</code></td><td align="left">Subscription, slicing, call, attribute reference</td></tr><tr><td align="left"><code>(expressions...)</code>,<code>[expressions...]</code>, <code>{key:value...}</code>, <code>{expressions...}</code></td><td align="left">Binding or tuple display, list display, dictionary display,</td></tr></tbody></table><p><strong>等待表达式的实例</strong></p><table><thead><tr><th><code>if await fut: pass</code></th><th><code>if (await fut): pass</code></th></tr></thead><tbody><tr><td><code>if await fut + 1: pass</code></td><td><code>if (await fut) + 1: pass</code></td></tr><tr><td><code>pair = await fut, &#39;spam&#39;</code></td><td><code>pair = (await fut), &#39;spam&#39;</code></td></tr><tr><td><code>with await fut, open(): pass</code></td><td><code>with (await fut), open(): pass</code></td></tr><tr><td><code>await foo()[&#39;spam&#39;].baz()()</code></td><td><code>await ( foo()[&#39;spam&#39;].baz()() )</code></td></tr><tr><td><code>return await coro()</code></td><td><code>return ( await coro() )</code></td></tr><tr><td><code>res = await coro() ** 2</code></td><td><code>res = (await coro()) ** 2</code></td></tr><tr><td><code>func(a1=await coro(), a2=0)</code></td><td><code>func(a1=(await coro()), a2=0)</code></td></tr><tr><td><code>await foo() + await bar()</code></td><td><code>(await foo()) + (await bar())</code></td></tr><tr><td><code>-await foo()</code></td><td><code>-(await foo())</code></td></tr></tbody></table><p><strong>异步上下文管理器和异步</strong></p><p>一个异步上下文管理器是一个上下文管理器，它能够暂停其执行进入和退出的方法。为了实现这一点，提出了一种异步上下文管理器的新协议。添加了两个新的魔法：<strong>aenter</strong>和<strong>aexit</strong>。两者都必须返回等待。</p><p>实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncCotextManager</span>:</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">__aenter__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">await</span> log(<span class="string">"进入上下文"</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">__aexit__</span><span class="params">(self,exc_type,exc,tb)</span>:</span></span><br><span class="line"><span class="keyword">await</span> log(<span class="string">"退出上下文"</span>)</span><br></pre></td></tr></table></figure><p><strong>新语法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">with</span> EXPR <span class="keyword">as</span> VAR:</span><br><span class="line">BLOCK</span><br></pre></td></tr></table></figure><p>上述的新语法就相当于下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mgr = (EXPR)</span><br><span class="line">aexit = type(mgr).__aexit__</span><br><span class="line">aenter = type(mgr).__aenter__(mgr)</span><br><span class="line"></span><br><span class="line">VAR = <span class="keyword">await</span> aenter</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">BLOCK </span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">await</span> aexit(mgr, *sys.exc_info()):</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">await</span> aexit(mgr, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>解释：与常规的with语句一样，可以在单个async with 语句中指定多个上下文管理器。将没有<strong>aenter</strong>和<strong>aexit</strong>方法的常规上下文管理器传递给异步是错误的，在异步def函数之外使用async是一个SyntaxError。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>为什么异步和等待关键字？</p><p>很久之前C#就有了，还有很多其他的语言都有。这是一个巨大的好处，因为一些用户已经具有异步/等待的经验，并且因为它使用得在一个项目中使用多种语言更加容易。</p><p>async关键字的重要性？</p><p>虽然可以实现await表达式并将至少一个await处理所有函数作为协程程序处理，但这种方法使得API设计，代码重构和长时间支持变得更加困难</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">假装python只有<span class="keyword">await</span>关键字：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">await</span> log(...)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">important</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">await</span> fun()</span><br></pre></td></tr></table></figure><p>如果func()函数被重构并且有人重中删除所有await表达式，它将称为常规python函数，并且依赖它的所有代码，都将被破坏。为了缓解这个问题，必须引入类似于@asyncio.coroutine的装饰器。</p><p>为什么异步def?</p><p>对于一些人来说哦，async func()：传递语法可能看起来比async def name()更加有吸引力。但是另一方面，它打破了async def,async之间的对称性，其中async是一个修饰符，声明该语句是异步的他也与现在的语法更加一致。</p><p>为什么不重用现有的for和with语句？</p><p>现在基于生成器的协程和此前提议背后的愿景是让用户可以轻松查看代码可能被挂起的位置。使现在for和with语句识别异步迭代器和上下文管理器不可避免地创建隐式挂起点，这使得更加难推理代码。</p><p><strong>对比异步函数和生成器之间的性能差异</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">l = <span class="keyword">yield</span> <span class="keyword">from</span> bindary(n - <span class="number">1</span>)</span><br><span class="line">r = <span class="keyword">yield</span> fron bindary(n - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> l + <span class="number">1</span> +r</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">abinary</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">l = <span class="keyword">await</span> abinary(n - <span class="number">1</span>)</span><br><span class="line">r = <span class="keyword">await</span> abinary(n - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> l + <span class="number">1</span> + r</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeit</span><span class="params">(func,depth,repeat)</span>:</span></span><br><span class="line"> t0 = time.time()</span><br><span class="line"> <span class="keyword">for</span> _ <span class="keyword">in</span> range(repeat):</span><br><span class="line"> o = func(depth)</span><br><span class="line"> <span class="keyword">try</span>:</span><br><span class="line"> <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"> o.send(<span class="literal">None</span>)</span><br><span class="line"> <span class="keyword">except</span> StoIteration:</span><br><span class="line"> <span class="keyword">pass</span></span><br><span class="line"> t1 = time.time()</span><br><span class="line"> <span class="keyword">print</span> (<span class="string">'&#123;&#125;(&#123;&#125;) * &#123;&#125;: total &#123;:.3f&#125;s'</span>.format(</span><br><span class="line">        func.__name__, depth, repeat, t1-t0))</span><br><span class="line">结果：</span><br><span class="line">binary(<span class="number">19</span>) * <span class="number">30</span>: total <span class="number">53.321</span>s</span><br><span class="line">abinary(<span class="number">19</span>) * <span class="number">30</span>: total <span class="number">55.073</span>s</span><br><span class="line"></span><br><span class="line">binary(<span class="number">19</span>) * <span class="number">30</span>: total <span class="number">53.361</span>s</span><br><span class="line">abinary(<span class="number">19</span>) * <span class="number">30</span>: total <span class="number">51.360</span>s</span><br><span class="line"></span><br><span class="line">binary(<span class="number">19</span>) * <span class="number">30</span>: total <span class="number">49.438</span>s</span><br><span class="line">abinary(<span class="number">19</span>) * <span class="number">30</span>: total <span class="number">51.047</span>s</span><br></pre></td></tr></table></figure><p><strong>工作实例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">echo_server</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Serving on localhost:8000'</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.start_server(handle_connection,</span><br><span class="line">                               <span class="string">'localhost'</span>, <span class="number">8000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">handle_connection</span><span class="params">(reader, writer)</span>:</span></span><br><span class="line">    print(<span class="string">'New connection...'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = <span class="keyword">await</span> reader.read(<span class="number">8192</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">'Sending &#123;:.10&#125;... back'</span>.format(repr(data)))</span><br><span class="line">        writer.write(data)</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(echo_server())</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    loop.run_forever()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    loop.close()</span><br></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">之前使用Python的人往往纠缠在多线程，多进程，评判哪个效率更高？</span><br><span class="line">其实，相对于别家的协程和异步，不管多线程还是多进程效率都要被吊打，多线程之间切换耗费cpu寄存器资源，OS 调度的不太可控，多进程间通信不便的问题。</span><br><span class="line">后来Python改进了语法，引入了yiled from充当协程调度，后来有人根据这个新特性开发了第三方协程框架，Tornado，Gevent等。</span><br><span class="line">在这场效率之争里，Python这么受欢迎的语言，官方怎么能默不出声？所以Python之父深入简出3年，苦心钻研自家的协程，async/await和asyncio库，并放到Python3.5后成为远程原生的协程，</span><br><span class="line">对于类似爬虫这种延时的IO操作，协程是个大利器，优点很多，他可以在一个阻塞发生时，挂起当前程序，跑去执行其他程序，把事件注册到循环中，实现多程序并发，据说超越了10k限制，不过我没有试验过极限。</span><br><span class="line"></span><br><span class="line">作者：予岁月以文明</span><br><span class="line">链接：https://www.jianshu.com/p/7690edfe9ba5</span><br><span class="line">来源：简书</span><br></pre></td></tr></table></figure><p>协程一次发起100个请求（其实也是一个一个的发），不同的是协程发送一个请求，挂起，再发送下一个请求，再挂起，发起100个，挂起100个。然后等待100个返回，效率提升了100倍。可以理解为同时做了100件事情，相当于多线程，做到了自己调度而不是交给CPU，程序流程可控，节省资源，效率极大提升。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url)</span>:</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">await</span> response.text()</span><br><span class="line"><span class="comment">#await是挂起命令，挂起当前，执行response.text()，response.text()执行完后重新激活当前函数运行，返回。如果response迟迟不回，程序不会死等，而是去我们定义的任务循环中寻找另一个任务，如果没有循环任务，那就只能死等，毕竟总是要有返回结果的。如下图：</span></span><br></pre></td></tr></table></figure><p><img src="http://9017499461.linshutu.top/await.webp" alt></p><p>可以从上图中看出：任务一直在跑，每到一个地方await一次，然后返回await，直到最终全部返回。主程序结束。</p><p><strong>调用协程</strong></p><p>协程不能直接运行，组要把协程注册到事件循环（loop）.asyncio.get_event_loop方法可以创建一个事件循环，然后run_until_complete将协程注册到事件循环，并启动事件循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line">now = <span class="keyword">lambda</span>: time.time()</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">do_some_work</span><span class="params">(x)</span>：</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"Waiting:"</span>,x)</span></span></span><br><span class="line">start = now()</span><br><span class="line">coroutine = do_some_work(<span class="number">2</span>)</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(coroutine)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"TIME:"</span>,now() - start)</span><br><span class="line">结果：</span><br><span class="line">Waiting: <span class="number">2</span></span><br><span class="line">TIME: <span class="number">0.004952669143676758</span></span><br></pre></td></tr></table></figure><p><strong>关于task</strong></p><p>协程对象不能直接运行，在注册事件循环的时候，其实run_until_complete方法将协程包装成一个任务（task）对象。这个task保存了协程运行后的状态，用来未来获取协程的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line">now = <span class="keyword">lambda</span>:time.time()</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">do_some_work</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Waiting:"</span>,x)</span><br><span class="line">start = now()</span><br><span class="line">coroutine = do_some_work(<span class="number">2</span>)</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"></span><br><span class="line">task = loop.create_task(coroutine)</span><br><span class="line"><span class="keyword">print</span> (task)</span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line"><span class="keyword">print</span> (task)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"TIME:"</span>,now() - start)</span><br><span class="line">结果：</span><br><span class="line">&lt;Task pending coro=&lt;do_some_work()&gt;</span><br><span class="line">Waiting: <span class="number">2</span></span><br><span class="line">&lt;Task finished coro=&lt;do_some_work() done&gt;</span><br><span class="line">TIME: <span class="number">0.004949092864990234</span></span><br></pre></td></tr></table></figure><p><strong>从上面的代码可以看出来，创建task后，task在加入事件循环之前是pending状态，当loop事件循环开始，所有的pending状态的task都开始执行到await那一步（函数体内不是这样），不管loop里面是否调用。</strong></p><p>结论：asyncio.ensure_future(coroutine) 和 loop.create_task(coroutine)都可以创建一个task，run_until_complete的参数是一个futrue对象。当传入一个协程，其内部会自动封装成task，task是Future的子类。isinstance(task, asyncio.Future)将会输出True。<br><strong>两个例子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tic</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'at %1.1f seconds'</span> % (time.time() - start)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">gr1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># Busy waits for a second, but we don't want to stick around...</span></span><br><span class="line">    print(<span class="string">'gr1 started work: &#123;&#125;'</span>.format(tic()))</span><br><span class="line">    <span class="comment"># 暂停两秒，但不阻塞时间循环，下同</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'gr1 ended work: &#123;&#125;'</span>.format(tic()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">gr2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># Busy waits for a second, but we don't want to stick around...</span></span><br><span class="line">    print(<span class="string">'gr2 started work: &#123;&#125;'</span>.format(tic()))</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'gr2 Ended work: &#123;&#125;'</span>.format(tic()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">gr3</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Let's do some stuff while the coroutines are blocked, &#123;&#125;"</span>.format(tic()))</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"Done!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 事件循环</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"></span><br><span class="line"><span class="comment"># tasks中也可以使用asyncio.ensure_future(gr1())..</span></span><br><span class="line"><span class="comment">#tasks = [</span></span><br><span class="line"><span class="comment">#    loop.create_task(gr1()),</span></span><br><span class="line"><span class="comment">#    loop.create_task(gr2()),</span></span><br><span class="line"><span class="comment">#    loop.create_task(gr3())</span></span><br><span class="line"><span class="comment">#]</span></span><br><span class="line">tasks = [gr1(), gr2(), gr3() ]  <span class="comment">#简便的写法</span></span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">loop.close()</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">gr1 started work: at <span class="number">0.0</span> seconds</span><br><span class="line">gr2 started work: at <span class="number">0.0</span> seconds</span><br><span class="line">Let<span class="string">'s do some stuff while the coroutines are blocked, at 0.0 seconds</span></span><br><span class="line"><span class="string">Done!</span></span><br><span class="line"><span class="string">gr2 Ended work: at 2.0 seconds</span></span><br><span class="line"><span class="string">gr1 ended work: at 2.0 seconds</span></span><br><span class="line"><span class="string">解释：</span></span><br><span class="line"><span class="string">asyncio.wait(...)协程的参数是一个由future或协程构成的可迭代对象，wait会分别把各个协程包装进Task对象。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">生产者消费者模型</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> asyncio <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span> <span class="keyword">return</span> time.time()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(q)</span>:</span><span class="comment">#工作者消费队列</span></span><br><span class="line">    print(<span class="string">'Start worker'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:<span class="comment">#无限循环</span></span><br><span class="line">        start = now()</span><br><span class="line">        task = <span class="keyword">await</span> q.get()<span class="comment">#开始消费</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> task:</span><br><span class="line">            <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        print(<span class="string">'working on '</span>, int(task))</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(int(task))</span><br><span class="line">        q.task_done()<span class="comment">#队列通知</span></span><br><span class="line">        print(<span class="string">'Job Done for '</span>, task, now() - start)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">generate_run</span><span class="params">(q)</span>:</span><span class="comment">#生成worker线程函数</span></span><br><span class="line">    asyncio.ensure_future(worker(q))</span><br><span class="line">    asyncio.ensure_future(worker(q))<span class="comment">#先弄了两个worker去跑</span></span><br><span class="line">    <span class="keyword">await</span> q.join()主线程挂起等待队列完成通知</span><br><span class="line">    jobs = asyncio.Task.all_tasks()完成后收集所有线程，这里是<span class="number">3</span>个，算上自己</span><br><span class="line">    print(<span class="string">'是否已经关闭任务'</span>, asyncio.gather(*jobs).cancel())<span class="comment">#关闭线程方法，返回True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    q = Queue()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        q.put_nowait(str(i))<span class="comment">#一定要放入字符，数字0是空，队列一直不会结束。</span></span><br><span class="line">    loop.run_until_complete(generate_run(q))<span class="comment">#启动生成函数</span></span><br><span class="line"></span><br><span class="line">    loop.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;内容解读&quot;&gt;&lt;a href=&quot;#内容解读&quot; class=&quot;headerlink&quot; title=&quot;内容解读&quot;&gt;&lt;/a&gt;内容解读&lt;/h3&gt;&lt;p&gt;PEP 492 - 具有异步和等待语法的协同程序&lt;/p&gt;
&lt;p&gt;此PEP假定异步任务类似于stdlib模块&lt;em&gt;asyncio.events.AbstracEventLoop&lt;/em&gt;的事件循环调度和协调。虽然PEP不依赖任何特定的事件循环实现，但它仅与使用yield作为调度器程序信号的协程类型相关，表明协同程序将等待直到事件完成。（如IO）&lt;/p&gt;
&lt;p&gt;新的协程声明语法：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;read_data&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(db)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;协程的关键属性&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;async def函数总是协程，及时他们不包含awai表达式。&lt;/li&gt;
&lt;li&gt;从异步函数中的表达式获得yield或yield是一个SystaxError。&lt;/li&gt;
&lt;li&gt;在内部：&lt;ul&gt;
&lt;li&gt;CO_CORUTTNE用于标记本机协同程序。&lt;/li&gt;
&lt;li&gt;CO_ITERABLE_COROUNTINE用于使基于生成器的协同程序与本机协同程序兼容。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常规生成器在被调用时返回一个生成器对象；同样，协同程序返回一个协程对象。&lt;/li&gt;
&lt;li&gt;StopIteration异常不会从协程传播出去，而是被RuntimeError替换。&lt;/li&gt;
&lt;li&gt;当垃圾手机本机协程时，如果从未等待过，则会引发RuntimeWarning&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="知识扩展" scheme="https://pl1649947109.github.io/pl1649947109/tags/%E7%9F%A5%E8%AF%86%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>EJS文件</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/17/%E7%9F%A5%E8%AF%86%E6%89%A9%E5%B1%95/EJS%E6%96%87%E4%BB%B6/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/17/知识扩展/EJS文件/</id>
    <published>2019-11-17T12:00:00.000Z</published>
    <updated>2019-11-16T15:41:41.820Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是EJS？"><a href="#什么是EJS？" class="headerlink" title="什么是EJS？"></a>什么是EJS？</h3><p>“E” 代表 “effective”，即【高效】。EJS 是一套简单的模板语言，帮你利用普通的 JavaScript 代码生成 HTML 页面。EJS 没有如何组织内容的教条；也没有再造一套迭代和控制流语法；有的只是普通的 JavaScript 代码而已。</p><h3 id="标签的含义"><a href="#标签的含义" class="headerlink" title="标签的含义"></a>标签的含义</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%:脚本标签，用于流程控制</span><br><span class="line">&lt;%_:删除其前面的空格符</span><br><span class="line">&lt;%=:输出数据到模板（输出的是转移HTML标签）</span><br><span class="line">&lt;%-:输出非转移的数据到模板</span><br><span class="line">&lt;%#:注释标签</span><br><span class="line">&lt;%%:输出字符串&lt;%</span><br><span class="line">%&gt;:一般结束标签</span><br><span class="line">-%&gt;:删除紧随其后的换行符</span><br><span class="line">_%&gt;:将结束标签后面的空格符号删除</span><br><span class="line">&lt;??&gt;:自定义分隔符，替换&lt;%%&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是EJS？&quot;&gt;&lt;a href=&quot;#什么是EJS？&quot; class=&quot;headerlink&quot; title=&quot;什么是EJS？&quot;&gt;&lt;/a&gt;什么是EJS？&lt;/h3&gt;&lt;p&gt;“E” 代表 “effective”，即【高效】。EJS 是一套简单的模板语言，帮你利用普通的 Ja
      
    
    </summary>
    
    
      <category term="知识扩展" scheme="https://pl1649947109.github.io/pl1649947109/tags/%E7%9F%A5%E8%AF%86%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>第六部分——drf</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/16/%E5%B0%8F%E7%BB%BF%E6%9C%AC/%E7%AC%AC%E5%85%AD%E9%83%A8%E5%88%86%E2%80%94%E2%80%94drf/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/16/小绿本/第六部分——drf/</id>
    <published>2019-11-16T12:00:00.000Z</published>
    <updated>2019-11-16T15:55:42.368Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-装饰器"><a href="#1-装饰器" class="headerlink" title="1.装饰器"></a>1.装饰器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@outer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(a1)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">index()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(a1)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这种方式执行的和装饰器的效果是一样的，但是这种方法要看懂，因为源码里面有这样写的</span></span><br><span class="line">index = outer(index)</span><br><span class="line"><span class="comment">#现在index = inner</span></span><br><span class="line"></span><br><span class="line">index()</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="2-django中可以免除csrftoken认证"><a href="#2-django中可以免除csrftoken认证" class="headerlink" title="2.django中可以免除csrftoken认证"></a>2.django中可以免除csrftoken认证</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># index = csrf_exempt(index)</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^index/$'</span>,index),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在drf中的应用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^login/$'</span>,account.LoginView.as_view()),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APIView</span><span class="params">(View)</span>:</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">as_view</span><span class="params">(cls, **initkwargs)</span>:</span></span><br><span class="line">        view = super().as_view(**initkwargs)</span><br><span class="line">        view.cls = cls</span><br><span class="line">        view.initkwargs = initkwargs</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 注意：基于会话的身份验证是明确的CSRF验证，</span></span><br><span class="line">        <span class="comment"># 所有其他身份验证都是CSRF豁免的。</span></span><br><span class="line">        <span class="keyword">return</span> csrf_exempt(view)</span><br></pre></td></tr></table></figure><h4 id="3-面向对象中基于继承-异常处理来做的约束"><a href="#3-面向对象中基于继承-异常处理来做的约束" class="headerlink" title="3.面向对象中基于继承+异常处理来做的约束"></a>3.面向对象中基于继承+异常处理来做的约束</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseVersioning</span>:</span></span><br><span class="line">    <span class="comment">#父类约束</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">determine_version</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">"must be implemented"</span>)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">URLPathVersioning</span><span class="params">(BaseVersioning)</span>:</span></span><br><span class="line">    <span class="comment">#子类执行父类约束方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">determine_version</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        version = kwargs.get(self.version_param, self.default_version)</span><br><span class="line">        <span class="keyword">if</span> version <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            version = self.default_version</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_allowed_version(version):</span><br><span class="line">            <span class="keyword">raise</span> exceptions.NotFound(self.invalid_version_message)</span><br><span class="line">        <span class="keyword">return</span> version</span><br></pre></td></tr></table></figure><h4 id="4-面向对象封装"><a href="#4-面向对象封装" class="headerlink" title="4.面向对象封装"></a>4.面向对象封装</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">self.name = name</span><br><span class="line">self.age = age </span><br><span class="line"></span><br><span class="line">obj = Foo(<span class="string">'pl'</span>,<span class="number">18</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APIView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line"><span class="comment">#封装request</span></span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line">        request = self.initialize_request(request, *args, **kwargs)</span><br><span class="line">        <span class="comment">#返回封装的request，但是现在的request里面包含了更多的内容</span></span><br><span class="line">        self.request = request</span><br><span class="line">...</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize_request</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns the initial request object.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        parser_context = self.get_parser_context(request)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Request(</span><br><span class="line">            request,</span><br><span class="line">            parsers=self.get_parsers(),</span><br><span class="line">            authenticators=self.get_authenticators(), <span class="comment"># [MyAuthentication(),]</span></span><br><span class="line">            negotiator=self.get_content_negotiator(),</span><br><span class="line">            parser_context=parser_context</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><h4 id="5-面向对象继承"><a href="#5-面向对象继承" class="headerlink" title="5.面向对象继承"></a>5.面向对象继承</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">View</span><span class="params">(object)</span>:</span></span><br><span class="line">   <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APIView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self)</span>:</span></span><br><span class="line">        method = getattr(self,<span class="string">'get'</span>)</span><br><span class="line">        method()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericAPIView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    serilizer_class = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_seriliser_class</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.serilizer_class</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListModelMixin</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        ser_class = self.get_seriliser_class()</span><br><span class="line">        print(ser_class)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListAPIView</span><span class="params">(ListModelMixin,GenericAPIView)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfoView</span><span class="params">(ListAPIView)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_seriliser_class</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"咩咩"</span></span><br><span class="line"></span><br><span class="line">view = UserInfoView()</span><br><span class="line">view.dispatch()</span><br></pre></td></tr></table></figure><h4 id="6-反射"><a href="#6-反射" class="headerlink" title="6.反射"></a>6.反射</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">View</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 通过反射的方式去执行method方法</span></span><br><span class="line">        <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">            handler = getattr(self, request.method.lower(), self.http_method_not_allowed)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            handler = self.http_method_not_allowed</span><br><span class="line">        <span class="keyword">return</span> handler(request, *args, **kwargs)</span><br></pre></td></tr></table></figure><h4 id="7-发送ajax请求"><a href="#7-发送ajax请求" class="headerlink" title="7.发送ajax请求"></a>7.发送ajax请求</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url:&apos;地址&apos;,</span><br><span class="line">type:&apos;GET&apos;,</span><br><span class="line">data:&#123;...&#125;,</span><br><span class="line">success:function(arg)&#123;</span><br><span class="line">console.log(arg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="8-浏览器具有-“同源策略的限制”，导致-发送ajax请求-跨域-存在无法获取数据。"><a href="#8-浏览器具有-“同源策略的限制”，导致-发送ajax请求-跨域-存在无法获取数据。" class="headerlink" title="8.浏览器具有 “同源策略的限制”，导致 发送ajax请求 + 跨域 存在无法获取数据。"></a>8.浏览器具有 “同源策略的限制”，导致 <code>发送ajax请求</code> + <code>跨域</code> 存在无法获取数据。</h4><ul><li>3个不同：协议、域名、端口号</li><li>简单请求，发送一次请求。</li><li>复杂请求，先options请求做预检，然后再发送真正请求</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>常鑫的网站<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点我"</span> <span class="attr">onclick</span>=<span class="string">"sendMsg()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点他"</span> <span class="attr">onclick</span>=<span class="string">"sendRemoteMsg()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">sendMsg</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                url:<span class="string">'/msg/'</span>,</span></span><br><span class="line"><span class="javascript">                type:<span class="string">'GET'</span>,</span></span><br><span class="line"><span class="javascript">                success:<span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(arg);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">sendRemoteMsg</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                url:<span class="string">'http://127.0.0.1:8002/json/'</span>,</span></span><br><span class="line"><span class="javascript">                type:<span class="string">'GET'</span>,</span></span><br><span class="line"><span class="javascript">                success:<span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(arg);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="9-如何解决ajax-跨域？"><a href="#9-如何解决ajax-跨域？" class="headerlink" title="9.如何解决ajax+跨域？"></a>9.如何解决ajax+跨域？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CORS，跨站资源共享，本质：设置响应头。</span><br></pre></td></tr></table></figure><h4 id="10-常见的Http请求方法"><a href="#10-常见的Http请求方法" class="headerlink" title="10.常见的Http请求方法"></a>10.常见的Http请求方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">get</span><br><span class="line">post</span><br><span class="line">put</span><br><span class="line">patch</span><br><span class="line">delete</span><br><span class="line">options:对于跨域时的预检</span><br></pre></td></tr></table></figure><h4 id="11-http请求中Content-type请求头"><a href="#11-http请求中Content-type请求头" class="headerlink" title="11.http请求中Content-type请求头"></a>11.http请求中Content-type请求头</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">情况一：</span><br><span class="line">    content-type:x-www-form-urlencode</span><br><span class="line">    name=alex&amp;age=<span class="number">19</span>&amp;xx=<span class="number">10</span></span><br><span class="line"></span><br><span class="line">request.POST和request.body中均有值。</span><br><span class="line"></span><br><span class="line">情况二：</span><br><span class="line">content-type:application/json</span><br><span class="line">    &#123;<span class="string">"name"</span>:<span class="string">"ALex"</span>,<span class="string">"Age"</span>:<span class="number">19</span>&#125;</span><br><span class="line">    </span><br><span class="line">    request.POST没值</span><br><span class="line">    request.body有值。</span><br></pre></td></tr></table></figure><h4 id="12-django中获取空Queryset"><a href="#12-django中获取空Queryset" class="headerlink" title="12.django中获取空Queryset"></a>12.django中获取空Queryset</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models.User.object.all().none()</span><br></pre></td></tr></table></figure><h4 id="13-基于django的fbv和cbv都能实现遵循restful规范的接口"><a href="#13-基于django的fbv和cbv都能实现遵循restful规范的接口" class="headerlink" title="13.基于django的fbv和cbv都能实现遵循restful规范的接口"></a>13.基于django的fbv和cbv都能实现遵循restful规范的接口</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.metho == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">()</span>...</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    <span class="title">def</span> <span class="title">post</span>...</span></span><br></pre></td></tr></table></figure><h4 id="14-基于django-rest-framework框架实现restful-api的开发"><a href="#14-基于django-rest-framework框架实现restful-api的开发" class="headerlink" title="14.基于django rest framework框架实现restful api的开发"></a>14.基于django rest framework框架实现restful api的开发</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- 免除csrf认证</span><br><span class="line">- 视图（三种继承：APIView、ListAPIView、ListModelMinx）</span><br><span class="line">- 版本</span><br><span class="line">- 认证</span><br><span class="line">- 权限</span><br><span class="line">- 节流</span><br><span class="line">- 解析器</span><br><span class="line">- 筛选器</span><br><span class="line">- 分页</span><br><span class="line">- 序列化</span><br><span class="line">- 渲染器</span><br></pre></td></tr></table></figure><h4 id="15-简述drf中认证流程？"><a href="#15-简述drf中认证流程？" class="headerlink" title="15.简述drf中认证流程？"></a>15.简述drf中认证流程？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- 如何编写？写类并实现authenticators</span><br><span class="line">　　请求进来认证需要编写一个类，类里面有一个authenticators方法，我们可以自定义这个方法，可以定制3类返回值。</span><br><span class="line">　　成功返回元组，返回none为匿名用户，抛出异常为认证失败。</span><br><span class="line"></span><br><span class="line">源码流程：请求进来先走dispatch方法，然后封装的request对象会执行user方法，由user触发authenticators认证流程</span><br><span class="line">- 方法中可以定义三种返回值：</span><br><span class="line">    - （user,auth），认证成功</span><br><span class="line">    - None , 匿名用户</span><br><span class="line">    - 异常 ，认证失败</span><br><span class="line">- 流程：</span><br><span class="line">    - dispatch </span><br><span class="line">    - 再去request中进行认证处理</span><br></pre></td></tr></table></figure><h4 id="16-简述drf中节流的实现原理以及过程？匿名用户-非匿名用户-如何实现频率限制？"><a href="#16-简述drf中节流的实现原理以及过程？匿名用户-非匿名用户-如何实现频率限制？" class="headerlink" title="16.简述drf中节流的实现原理以及过程？匿名用户/非匿名用户 如何实现频率限制？"></a>16.简述drf中节流的实现原理以及过程？匿名用户/非匿名用户 如何实现频率限制？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 对匿名用户，根据用户IP或代理IP作为标识进行记录，为每个用户在redis中建一个列表</span><br><span class="line">    &#123;</span><br><span class="line">        throttle_1.1.1.1:[1526868876.497521,152686885.497521...]，</span><br><span class="line">        throttle_1.1.1.2:[1526868876.497521,152686885.497521...]，</span><br><span class="line">        throttle_1.1.1.3:[1526868876.497521,152686885.497521...]，</span><br><span class="line">    &#125; </span><br><span class="line"> 每个用户再来访问时，需先去记录中剔除过期记录，再根据列表的长度判断是否可以继续访问。</span><br><span class="line"> &apos;如何封IP&apos;：在防火墙中进行设置</span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line"># 对注册用户，根据用户名或邮箱进行判断。</span><br><span class="line">    &#123;</span><br><span class="line">        throttle_xxxx1:[1526868876.497521,152686885.497521...]，</span><br><span class="line">        throttle_xxxx2:[1526868876.497521,152686885.497521...]，</span><br><span class="line">        throttle_xxxx3:[1526868876.497521,152686885.497521...]，</span><br><span class="line">    &#125;</span><br><span class="line">每个用户再来访问时，需先去记录中剔除过期记录，再根据列表的长度判断是否可以继续访问。</span><br><span class="line">如1分钟：40次，列表长度限制在40，超过40则不可访问</span><br></pre></td></tr></table></figure><h4 id="17-GenericAPIView视图类的作用？"><a href="#17-GenericAPIView视图类的作用？" class="headerlink" title="17.GenericAPIView视图类的作用？"></a>17.GenericAPIView视图类的作用？</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">他提供了一些规则，例如：</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericAPIView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    serializer_class = <span class="literal">None</span></span><br><span class="line">    queryset = <span class="literal">None</span></span><br><span class="line">    lookup_field = <span class="string">'pk'</span></span><br><span class="line">    </span><br><span class="line">    filter_backends = api_settings.DEFAULT_FILTER_BACKENDS</span><br><span class="line">    pagination_class = api_settings.DEFAULT_PAGINATION_CLASS</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.queryset</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.serializer_class</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_queryset</span><span class="params">(self, queryset)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> backend <span class="keyword">in</span> list(self.filter_backends):</span><br><span class="line">            queryset = backend().filter_queryset(self.request, queryset, self)</span><br><span class="line">        <span class="keyword">return</span> queryset</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paginator</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'_paginator'</span>):</span><br><span class="line">            <span class="keyword">if</span> self.pagination_class <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                self._paginator = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self._paginator = self.pagination_class()</span><br><span class="line">        <span class="keyword">return</span> self._paginator</span><br><span class="line">    </span><br><span class="line">他相当于提供了一些规则，建议子类中使用固定的方式获取数据，例如：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleView</span><span class="params">(GenericAPIView)</span>:</span></span><br><span class="line">    queryset = models.User.objects.all()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        query = self.get_queryset()</span><br><span class="line"></span><br><span class="line">我们可以自己继承GenericAPIView来实现具体操作，但是一般不会，因为更加麻烦。</span><br><span class="line">而GenericAPIView主要是提供给drf内部的 ListAPIView、Create....</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListModelMixin</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line"></span><br><span class="line">        page = self.paginate_queryset(queryset)</span><br><span class="line">        <span class="keyword">if</span> page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            serializer = self.get_serializer(page, many=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span> self.get_paginated_response(serializer.data)</span><br><span class="line"></span><br><span class="line">        serializer = self.get_serializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListAPIView</span><span class="params">(mixins.ListModelMixin,GenericAPIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.list(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyView</span><span class="params">(ListAPIView)</span>:</span></span><br><span class="line">    queryset = xxxx </span><br><span class="line">    ser...</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">总结：GenericAPIView主要为drf内部帮助我们提供增删改查的类LIstAPIView、CreateAPIView、UpdateAPIView、提供了执行流程和功能，我们在使用drf内置类做CURD时，就可以通过自定义 静态字段（类变量）或重写方法（get_queryset、get_serializer_class）来进行更高级的定制。</span><br></pre></td></tr></table></figure><h4 id="18-jwt以及其优势。"><a href="#18-jwt以及其优势。" class="headerlink" title="18.jwt以及其优势。"></a>18.jwt以及其优势。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">一般在前后端分离时，用于做用户认证（登录）使用的技术。</span><br><span class="line">jwt的实现原理：</span><br><span class="line">- 用户登录成功之后，会给前端返回一段token。</span><br><span class="line">- token是由.分割的三段组成。</span><br><span class="line">- 第一段：类型和算法信心</span><br><span class="line">- 第二段：用户信息+超时时间</span><br><span class="line">- 第三段：hs256（前两段拼接）加密 + base64url</span><br><span class="line">- 以后前端再次发来信息时</span><br><span class="line">- 超时验证</span><br><span class="line">- token合法性校验</span><br><span class="line">优势：</span><br><span class="line">- token只在前端保存，后端只负责校验。</span><br><span class="line">- 内部集成了超时时间，后端可以根据时间进行校验是否超时。</span><br><span class="line">- 由于内部存在hash256加密，所以用户不可以修改token，只要一修改就认证失败。</span><br></pre></td></tr></table></figure><h4 id="19-序列化时many-True和many-False的区别？"><a href="#19-序列化时many-True和many-False的区别？" class="headerlink" title="19.序列化时many=True和many=False的区别？"></a>19.序列化时many=True和many=False的区别？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在序列化的时候，many=True可以针对的是多条数据</span><br><span class="line">many=False针对的是单条数据而言</span><br></pre></td></tr></table></figure><h4 id="20-应用DRF中的功能进行项目开发"><a href="#20-应用DRF中的功能进行项目开发" class="headerlink" title="20.应用DRF中的功能进行项目开发"></a>20.应用DRF中的功能进行项目开发</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">*****</span><br><span class="line">解析器:request.query_parmas/request.data</span><br><span class="line">视图</span><br><span class="line">序列化</span><br><span class="line">渲染器：Response</span><br><span class="line"></span><br><span class="line">****</span><br><span class="line">request对象封装</span><br><span class="line">版本处理</span><br><span class="line">分页处理</span><br><span class="line">***</span><br><span class="line">认证</span><br><span class="line">权限</span><br><span class="line">节流</span><br></pre></td></tr></table></figure><ul><li>基于APIView实现呼啦圈</li><li>继承ListAPIView+ GenericViewSet,ListModelMixin实现呼啦圈</li></ul><h4 id="21-接口的幂等性是什么意思？"><a href="#21-接口的幂等性是什么意思？" class="headerlink" title="21.接口的幂等性是什么意思？"></a>21.接口的幂等性是什么意思？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">首先，我们来看一下接口存在的问题：</span><br><span class="line">-现如今我们的系统大多拆分为分布式SOA，或者微服务，一套系统中包含了多个子系统服务，而一个子系统服务往往会去调用另一个服务，而服务调用服务无非就是使用RPC通信或者restful，既然是通信，那么就有可能在服务器处理完毕后返回结果的时候挂掉，这个时候用户端发现很久没有反应，那么就会多次点击按钮，这样请求有多次，那么处理数据的结果是否要统一呢？那是肯定的！尤其在支付场景。</span><br><span class="line"></span><br><span class="line">那么，什么是接口的幂等性？</span><br><span class="line">-接口幂等性就是用户对于同一操作发起的一次请求或者多次请求的结果是一致的，不会因为多次点击而产生副作用。</span><br><span class="line"></span><br><span class="line">什么情况下需要保证接口的幂等性？</span><br><span class="line">-在增删查改中，尤其注意增加和修改</span><br><span class="line">新增：比如支付时候的重复提交事件</span><br><span class="line">修改：比如A字段增加1，这种操作就不是幂等的</span><br><span class="line"></span><br><span class="line">那么，如何设计接口才能做到幂等呢？</span><br><span class="line">-通过代码逻辑判断实现</span><br><span class="line">-使用token机制是实现</span><br></pre></td></tr></table></figure><h4 id="22-什么是RPC？"><a href="#22-什么是RPC？" class="headerlink" title="22.什么是RPC？"></a>22.什么是RPC？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&apos;远程过程调用协议&apos;</span><br><span class="line">是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。</span><br><span class="line">进化的顺序: 先有的RPC,然后有的RESTful规范</span><br></pre></td></tr></table></figure><h4 id="23-Http和Https的区别？"><a href="#23-Http和Https的区别？" class="headerlink" title="23.Http和Https的区别？"></a>23.Http和Https的区别？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#Http: 80端口</span><br><span class="line">#https: 443端口</span><br><span class="line"># http信息是明文传输，https则是具有安全性的ssl加密传输协议。</span><br><span class="line">#- 自定义证书 </span><br><span class="line">    - 服务端：创建一对证书</span><br><span class="line">    - 客户端：必须携带证书</span><br><span class="line">#- 购买证书</span><br><span class="line">    - 服务端： 创建一对证书，。。。。</span><br><span class="line">    - 客户端： 去机构获取证书，数据加密后发给咱们的服务单</span><br><span class="line">    - 证书机构:公钥给改机构</span><br></pre></td></tr></table></figure><h4 id="24-为什么要使用django-rest-framework框架？"><a href="#24-为什么要使用django-rest-framework框架？" class="headerlink" title="24.为什么要使用django rest framework框架？"></a>24.为什么要使用django rest framework框架？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 在编写接口时可以不使用django rest framework框架，</span><br><span class="line"># 不使用：也可以做，可以用django的CBV来实现，开发者编写的代码会更多一些。</span><br><span class="line"># 使用：内部帮助我们提供了很多方便的组件，我们通过配置就可以完成相应操作，如：</span><br><span class="line">    &apos;序列化&apos;可以做用户请求数据校验+queryset对象的序列化称为json</span><br><span class="line">    &apos;解析器&apos;获取用户请求数据request.data，会自动根据content-type请求头的不能对数据进行解析</span><br><span class="line">    &apos;分页&apos;将从数据库获取到的数据在页面进行分页显示。</span><br><span class="line">     # 还有其他组件：</span><br><span class="line">         &apos;认证&apos;、&apos;权限&apos;、&apos;访问频率控制</span><br></pre></td></tr></table></figure><h4 id="25-django-rest-framework框架中的视图都可以继承哪些类"><a href="#25-django-rest-framework框架中的视图都可以继承哪些类" class="headerlink" title="25.django rest framework框架中的视图都可以继承哪些类"></a>25.django rest framework框架中的视图都可以继承哪些类</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">a. 继承APIView（最原始）但定制性比较强</span><br><span class="line">    这个类属于rest framework中的顶层类，内部帮助我们实现了只是基本功能：认证、权限、频率控制，</span><br><span class="line">但凡是数据库、分页等操作都需要手动去完成，比较原始。</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">GenericAPIView</span><span class="params">(APIView)</span></span></span><br><span class="line"><span class="class">    <span class="title">def</span> <span class="title">post</span><span class="params">(...)</span>:</span></span><br><span class="line">          <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line">b.继承GenericViewSet（ViewSetMixin，generics.GenericAPIView）</span><br><span class="line">　　首先他的路由就发生变化</span><br><span class="line">    如果继承它之后，路由中的as_view需要填写对应关系</span><br><span class="line">　　在内部也帮助我们提供了一些方便的方法：</span><br><span class="line">　　get_queryset</span><br><span class="line">　　get_object</span><br><span class="line">　　get_serializer</span><br><span class="line">　　get_serializer_class</span><br><span class="line">　　get_serializer_context</span><br><span class="line">　　filter_queryset</span><br><span class="line">注意：要设置queryset字段，否则会抛出断言的异常。</span><br><span class="line"></span><br><span class="line">代码</span><br><span class="line">只提供增加功能 只继承GenericViewSet</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestView</span><span class="params">(GenericViewSet)</span>:</span></span><br><span class="line">　　serialazer_class = xxx</span><br><span class="line">　　<span class="function"><span class="keyword">def</span> <span class="title">creat</span><span class="params">(self,*args,**kwargs)</span>:</span></span><br><span class="line">　　　　<span class="keyword">pass</span>  <span class="comment"># 获取数据并对数据</span></span><br><span class="line"></span><br><span class="line">c. 继承  modelviewset  --&gt; 快速快发</span><br><span class="line">　　　　-ModelViewSet(增删改查全有+数据库操作)</span><br><span class="line">　　　　-mixins.CreateModelMixin（只有增）,GenericViewSet</span><br><span class="line">　　　　-mixins.CreateModelMixin,DestroyModelMixin,GenericViewSet</span><br><span class="line">　　对数据库和分页等操作不用我们在编写，只需要继承相关类即可。</span><br><span class="line">　　</span><br><span class="line">示例：只提供增加功能</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestView</span><span class="params">(mixins.CreateModelMixin,GenericViewSet)</span>:</span></span><br><span class="line">　　　　serializer_class = XXXXXXX</span><br><span class="line">*** </span><br><span class="line">　　modelviewset --&gt; 快速开发，复杂点的genericview、apiview</span><br></pre></td></tr></table></figure><h4 id="26-drf框架如何对Queryset进行序列化？"><a href="#26-drf框架如何对Queryset进行序列化？" class="headerlink" title="26.drf框架如何对Queryset进行序列化？"></a>26.drf框架如何对Queryset进行序列化？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">queryset = Book.objects.all()</span><br><span class="line">#定义一个序列化类</span><br><span class="line">serializer = BookSerializer(queryset, many=True)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-装饰器&quot;&gt;&lt;a href=&quot;#1-装饰器&quot; class=&quot;headerlink&quot; title=&quot;1.装饰器&quot;&gt;&lt;/a&gt;1.装饰器&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(func)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(*args,**kwargs)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; func(*args,**kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; inner&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@outer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(a1)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(func)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(*args,**kwargs)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; func(*args,**kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; inner&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(a1)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#这种方式执行的和装饰器的效果是一样的，但是这种方法要看懂，因为源码里面有这样写的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index = outer(index)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#现在index = inner&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="小绿本" scheme="https://pl1649947109.github.io/pl1649947109/tags/%E5%B0%8F%E7%BB%BF%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>buffer和cache的区别</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/16/%E7%9F%A5%E8%AF%86%E6%89%A9%E5%B1%95/buffer%E5%92%8Ccache%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/16/知识扩展/buffer和cache的区别/</id>
    <published>2019-11-16T12:00:00.000Z</published>
    <updated>2019-11-16T15:41:26.978Z</updated>
    
    <content type="html"><![CDATA[<p>1 ,buffer（缓冲）</p><p><strong>是为了提高内存和硬盘（或其他I/O设备）之间的数据交换的速度而设计的。</strong></p><p>2, cache（缓存）</p><p><strong>从CPU角度考虑，是为了提高cpu和内存之间的数据交换速度而设计的，例如平常见到的一级缓存、二级缓存、三级缓存。</strong></p><a id="more"></a><p>cpu在执行程序所用的指令和读数据都是针对内存的，也就是从内存中取得的。由于内存读写速度慢，为了提高cpu和内存之间数据交换的速度，在cpu和内存之间增加了cache，它的速度比内存快，但是造价高，又由于在cpu内不能集成太多集成电路，所以一般cache比较小，为了进一步提高速度，又增加了二级cache，甚至三级cache，它是根据程序的局部性原理而设计的，就是cpu执行的指令和访问的数据往往在集中的某一块，所以把这块内容放入cache后，cpu就不用在访问内存了，这就提高了访问速度。当然若cache中没有cpu所需要的内容，还是要访问内存的。</p><p>从内存读取与磁盘读取角度考虑，cache可以理解为操作系统为了更高的读取效率，更多的使用内存来缓存可能被再次访问的数据。</p><p>缓冲（buffers）是根据磁盘的读写设计的，把分散的写操作集中进行，减少磁盘碎片和硬盘的反复寻道，从而提高系统性能。linux有一个守护进程定期清空缓冲内容（即写入磁盘），也可以通过sync命令手动清空缓冲。</p><p>简单来说，buffer是即将要被写入磁盘的，而cache是被从磁盘中读出来的。 buffer是由各种进程分配的，被用在如输入队列等方面。一个简单的例子如某个进程要求有多个字段读入，在所有字段被读入完整之前，进程把先前读入的字段放在buffer中保存。</p><p>cache经常被用在磁盘的I/O请求上，如果有多个进程都要访问某个文件，于是该文件便被做成cache以方便下次被访问，这样可提高系统性能。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1 ,buffer（缓冲）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;是为了提高内存和硬盘（或其他I/O设备）之间的数据交换的速度而设计的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2, cache（缓存）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从CPU角度考虑，是为了提高cpu和内存之间的数据交换速度而设计的，例如平常见到的一级缓存、二级缓存、三级缓存。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="知识扩展" scheme="https://pl1649947109.github.io/pl1649947109/tags/%E7%9F%A5%E8%AF%86%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>消息队列——初识</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/15/%E4%B9%A6/linux/%E7%AC%AC%E4%B8%83%E8%AE%B2%E2%80%94%E2%80%94%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%88%9D%E8%AF%86/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/15/书/linux/第七讲——消息队列初识/</id>
    <published>2019-11-15T12:30:00.000Z</published>
    <updated>2019-11-16T15:57:31.223Z</updated>
    
    <content type="html"><![CDATA[<h2 id="消息队列初始"><a href="#消息队列初始" class="headerlink" title="消息队列初始"></a>消息队列初始</h2><h3 id="什么是消息队列"><a href="#什么是消息队列" class="headerlink" title="什么是消息队列"></a>什么是消息队列</h3><p>我们可以把消息队列比作是一个存放消息的容器，当我们需要使用消息的时候可以取出消息供自己使用。</p><p>消息队列是分布式系统中重要的组件，主要解决应用解耦，异步消息，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。</p><p>目前使用较多的消息队列有ActiveMQ，RabbitMQ，Kafka，RocketMQ，我们后面会一一对比这些消息队列。</p><a id="more"></a><h3 id="应用场景一"><a href="#应用场景一" class="headerlink" title="应用场景一"></a>应用场景一</h3><p>我觉得使用消息队列主要有两点好处：1.通过异步处理提高系统性能（削峰、减少响应所需时间）;2.降低系统耦合性。如果在面试的时候你被面试官问到这个问题的话，一般情况是你在你的简历上涉及到消息队列这方面的内容，这个时候推荐你结合你自己的项目来回答。</p><p><strong>(1) 通过异步处理提高系统性能（削峰、减少响应所需时间）</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/2509688-311483f18a8d228e?imageMogr2/auto-orient/strip%7CimageView2/2/w/910/format/webp" alt="img"></p><p>如上图，<strong>在不使用消息队列服务器的时候，用户的请求数据直接写入数据库，在高并发的情况下数据库压力剧增，使得响应速度变慢。但是在使用消息队列之后，用户的请求数据发送给消息队列之后立即 返回，再由消息队列的消费者进程从消息队列中获取数据，异步写入数据库。由于消息队列服务器处理速度快于数据库（消息队列也比数据库有更好的伸缩性），因此响应速度得到大幅改善。</strong></p><p>通过以上分析我们可以得出<strong>消息队列具有很好的削峰作用的功能</strong>——即<strong>通过异步处理，将短时间高并发产生的事务消息存储在消息队列中，从而削平高峰期的并发事务。</strong> 举例：在电子商务一些秒杀、促销活动中，合理使用消息队列可以有效抵御促销活动刚开始大量订单涌入对系统的冲击。如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/2509688-f9b9af2c6620e724?imageMogr2/auto-orient/strip%7CimageView2/2/w/780/format/webp" alt="img"></p><p>因为<strong>用户请求数据写入消息队列之后就立即返回给用户了，但是请求数据在后续的业务校验、写数据库等操作中可能失败</strong>。因此使用消息队列进行异步处理之后，需要<strong>适当修改业务流程进行配合</strong>，比如<strong>用户在提交订单之后，订单数据写入消息队列，不能立即返回用户订单提交成功，需要在消息队列的订单消费者进程真正处理完该订单之后，甚至出库后，再通过电子邮件或短信通知用户订单成功</strong>，以免交易纠纷。这就类似我们平时手机订火车票和电影票。</p><p><strong>(2) 降低系统耦合性</strong></p><p>我们知道如果模块之间不存在直接调用，那么新增模块或者修改模块就对其他模块影响较小，这样系统的可扩展性无疑更好一些。</p><p>我们最常见的<strong>事件驱动架构</strong>类似生产者消费者模式，在大型网站中通常用利用消息队列实现事件驱动结构。如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/2509688-f3bddbdea97bb30c?imageMogr2/auto-orient/strip%7CimageView2/2/w/790/format/webp" alt="img"></p><p><strong>消息队列使利用发布-订阅模式工作，消息发送者（生产者）发布消息，一个或多个消息接受者（消费者）订阅消息。</strong> 从上图可以看到<strong>消息发送者（生产者）和消息接受者（消费者）之间没有直接耦合</strong>，消息发送者将消息发送至分布式消息队列即结束对消息的处理，消息接受者从分布式消息队列获取该消息后进行后续处理，并不需要知道该消息从何而来。<strong>对新增业务，只要对该类消息感兴趣，即可订阅该消息，对原有系统和业务没有任何影响，从而实现网站业务的可扩展性设计</strong>。</p><p>消息接受者对消息进行过滤、处理、包装后，构造成一个新的消息类型，将消息继续发送出去，等待其他消息接受者订阅该消息。因此基于事件（消息对象）驱动的业务架构可以是一系列流程。</p><p><strong>另外为了避免消息队列服务器宕机造成消息丢失，会将成功发送到消息队列的消息存储在消息生产者服务器上，等消息真正被消费者服务器处理后才删除消息。在消息队列服务器宕机后，生产者服务器会选择分布式消息队列服务器集群中的其他服务器发布消息。</strong></p><p><strong>备注：</strong> 不要认为消息队列只能利用发布-订阅模式工作，只不过在解耦这个特定业务环境下是使用发布-订阅模式的。<strong>除了发布-订阅模式，还有点对点订阅模式（一个消息只有一个消费者），我们比较常用的是发布-订阅模式。</strong> 另外，这两种消息模型是 JMS 提供的，AMQP 协议还提供了 5 种消息模型。</p><h3 id="应用场景二"><a href="#应用场景二" class="headerlink" title="应用场景二"></a>应用场景二</h3><h4 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h4><p>场景说明：用户注册后，需要发注册邮件和注册短信。传统的做法有两种 1.串行的方式；2.并行方式</p><p>a、串行方式：将注册信息写入数据库成功后，发送注册邮件，再发送注册短信。以上三个任务全部完成后，返回给客户端。</p><p><img src="http://images2015.cnblogs.com/blog/270324/201607/270324-20160730141220778-784471498.png" alt="img"></p><p>b、并行方式：将注册信息写入数据库成功后，发送注册邮件的同时，发送注册短信。以上三个任务完成后，返回给客户端。与串行的差别是，并行的方式可以提高处理的时间</p><p><img src="http://images2015.cnblogs.com/blog/270324/201607/270324-20160730141228575-679122919.png" alt="img"></p><p>假设三个业务节点每个使用50毫秒钟，不考虑网络等其他开销，则串行方式的时间是150毫秒，并行的时间可能是100毫秒。<br>因为CPU在单位时间内处理的请求数是一定的，假设CPU1秒内吞吐量是100次。则串行方式1秒内CPU可处理的请求量是7次（1000/150）。并行方式处理的请求量是10次（1000/100）</p><p>小结：如以上案例描述，传统的方式系统的性能（并发量，吞吐量，响应时间）会有瓶颈。如何解决这个问题呢？</p><p>引入消息队列，将不是必须的业务逻辑，异步处理。改造后的架构如下：</p><p><img src="http://images2015.cnblogs.com/blog/270324/201607/270324-20160730141236169-1140938329.png" alt="img"></p><p>按照以上约定，用户的响应时间相当于是注册信息写入数据库的时间，也就是50毫秒。注册邮件，发送短信写入消息队列后，直接返回，因此写入消息队列的速度很快，基本可以忽略，因此用户的响应时间可能是50毫秒。因此架构改变后，系统的吞吐量提高到每秒20 QPS。比串行提高了3倍，比并行提高了两倍。</p><h4 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h4><p>场景说明：用户下单后，订单系统需要通知库存系统。传统的做法是，订单系统调用库存系统的接口。如下图：</p><p><img src="http://images2015.cnblogs.com/blog/270324/201607/270324-20160730143219809-1948583125.png" alt="img"></p><p>传统模式的缺点：假如库存系统无法访问，则订单减库存将失败，从而导致订单失败，订单系统与库存系统耦合</p><p>如何解决以上问题呢？引入应用消息队列后的方案，如下图：</p><p><img src="http://images2015.cnblogs.com/blog/270324/201607/270324-20160730143228325-953675504.png" alt="img"></p><p>订单系统：用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户订单下单成功<br>库存系统：订阅下单的消息，采用拉/推的方式，获取下单信息，库存系统根据下单信息，进行库存操作<br>假如：在下单时库存系统不能正常使用。也不影响正常下单，因为下单后，订单系统写入消息队列就不再关心其他的后续操作了。实现订单系统与库存系统的应用解耦</p><h4 id="流量削峰"><a href="#流量削峰" class="headerlink" title="流量削峰"></a>流量削峰</h4><p>流量削锋也是消息队列中的常用场景，一般在秒杀或团抢活动中使用广泛。<br>应用场景：秒杀活动，一般会因为流量过大，导致流量暴增，应用挂掉。为解决这个问题，一般需要在应用前端加入消息队列。<br>a、可以控制活动的人数<br>b、可以缓解短时间内高流量压垮应用</p><p><img src="http://images2015.cnblogs.com/blog/270324/201607/270324-20160730151710106-2043115158.png" alt="img"></p><p>用户的请求，服务器接收后，首先写入消息队列。假如消息队列长度超过最大数量，则直接抛弃用户请求或跳转到错误页面。<br>秒杀业务根据消息队列中的请求信息，再做后续处理</p><h4 id="日志处理"><a href="#日志处理" class="headerlink" title="日志处理"></a>日志处理</h4><p>消息通讯是指，消息队列一般都内置了高效的通信机制，因此也可以用在纯的消息通讯。比如实现点对点消息队列，或者聊天室等</p><p>点对点通讯：</p><p><img src="http://images2015.cnblogs.com/blog/270324/201607/270324-20160730153544294-1894255488.png" alt="img"></p><p>客户端A和客户端B使用同一队列，进行消息通讯。</p><p>聊天室通讯：</p><p><img src="http://images2015.cnblogs.com/blog/270324/201607/270324-20160730153550184-1160563716.png" alt="img"></p><p>客户端A，客户端B，客户端N订阅同一主题，进行消息发布和接收。实现类似聊天室效果。</p><p>以上实际是消息队列的两种消息模式，点对点或发布订阅模式。模型为示意图，供参考。</p><h3 id="消息中间件示例"><a href="#消息中间件示例" class="headerlink" title="消息中间件示例"></a>消息中间件示例</h3><h4 id="电商系统"><a href="#电商系统" class="headerlink" title="电商系统"></a>电商系统</h4><p><img src="http://images2015.cnblogs.com/blog/270324/201608/270324-20160801102300309-25949110.jpg" alt="img"></p><p>消息队列采用高可用，可持久化的消息中间件。比如Active MQ，Rabbit MQ，Rocket Mq。<br>（1）应用将主干逻辑处理完成后，写入消息队列。消息发送是否成功可以开启消息的确认模式。（消息队列返回消息接收成功状态后，应用再返回，这样保障消息的完整性）<br>（2）扩展流程（发短信，配送处理）订阅队列消息。采用推或拉的方式获取消息并处理。<br>（3）消息将应用解耦的同时，带来了数据一致性问题，可以采用最终一致性方式解决。比如主数据写入数据库，扩展应用根据消息队列，并结合数据库方式实现基于消息队列的后续处理。</p><h4 id="日志收集系统"><a href="#日志收集系统" class="headerlink" title="日志收集系统"></a>日志收集系统</h4><p><img src="http://images2015.cnblogs.com/blog/270324/201608/270324-20160801102309481-1983324345.jpg" alt="img"></p><p>分为Zookeeper注册中心，日志收集客户端，Kafka集群和Storm集群（OtherApp）四部分组成。<br>Zookeeper注册中心，提出负载均衡和地址查找服务<br>日志收集客户端，用于采集应用系统的日志，并将数据推送到kafka队列<br>Kafka集群：接收，路由，存储，转发等消息处理<br>Storm集群：与OtherApp处于同一级别，采用拉的方式消费队列中的数据</p><h3 id="使用消息队列带来的一些问题"><a href="#使用消息队列带来的一些问题" class="headerlink" title="使用消息队列带来的一些问题"></a>使用消息队列带来的一些问题</h3><ul><li><strong>系统可用性降低：</strong> 系统可用性在某种程度上降低，为什么这样说呢？在加入MQ之前，你不用考虑消息丢失或者说MQ挂掉等等的情况，但是，引入MQ之后你就需要去考虑了！</li><li><strong>系统复杂性提高：</strong> 加入MQ之后，你需要保证消息没有被重复消费、处理消息丢失的情况、保证消息传递的顺序性等等问题！</li><li><strong>一致性问题：</strong> 我上面讲了消息队列可以实现异步，消息队列带来的异步确实可以提高系统响应速度。但是，万一消息的真正消费者并没有正确消费消息怎么办？这样就会导致数据不一致的情况了!</li></ul><h3 id="常见的消息队列对比"><a href="#常见的消息队列对比" class="headerlink" title="常见的消息队列对比"></a>常见的消息队列对比</h3><table><thead><tr><th>对比方向</th><th>概要</th></tr></thead><tbody><tr><td>吞吐量</td><td>万级的 ActiveMQ 和 RabbitMQ 的吞吐量（ActiveMQ 的性能最差）要比 十万级甚至是百万级的 RocketMQ 和 Kafka 低一个数量级。</td></tr><tr><td>可用性</td><td>都可以实现高可用。ActiveMQ 和 RabbitMQ 都是基于主从架构实现高可用性。RocketMQ 基于分布式架构。 kafka 也是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td></tr><tr><td>时效性</td><td>RabbitMQ 基于erlang开发，所以并发能力很强，性能极其好，延时很低，达到微秒级。其他三个都是 ms 级。</td></tr><tr><td>功能支持</td><td>除了 Kafka，其他三个功能都较为完备。 Kafka 功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用，是事实上的标准</td></tr><tr><td>消息丢失</td><td>ActiveMQ 和 RabbitMQ 丢失的可能性非常低， RocketMQ 和 Kafka 理论上不会丢失。</td></tr></tbody></table><p>小结：</p><p>ActiveMQ 的社区算是比较成熟，但是较目前来说，ActiveMQ 的性能比较差，而且版本迭代很慢，不推荐使用。</p><p>RabbitMQ 在吞吐量方面虽然稍逊于 Kafka 和 RocketMQ ，但是由于它基于 erlang 开发，所以并发能力很强，性能极其好，延时很低，达到微秒级。但是也因为 RabbitMQ 基于 erlang 开发，所以国内很少有公司有实力做erlang源码级别的研究和定制。如果业务场景对并发量要求不是太高（十万级、百万级），那这四种消息队列中，RabbitMQ 一定是你的首选。如果是大数据领域的实时计算、日志采集等场景，用 Kafka 是业内标准的，绝对没问题，社区活跃度很高，绝对不会黄，何况几乎是全世界这个领域的事实性规范。</p><p>RocketMQ 阿里出品，Java 系开源项目，源代码我们可以直接阅读，然后可以定制自己公司的MQ，并且 RocketMQ 有阿里巴巴的实际业务场景的实战考验。RocketMQ 社区活跃度相对较为一般，不过也还可以，文档相对来说简单一些，然后接口这块不是按照标准 JMS 规范走的有些系统要迁移需要修改大量代码。还有就是阿里出台的技术，你得做好这个技术万一被抛弃，社区黄掉的风险，那如果你们公司有技术实力我觉得用RocketMQ 挺好的</p><p>kafka 的特点其实很明显，就是仅仅提供较少的核心功能，但是提供超高的吞吐量，ms 级的延迟，极高的可用性以及可靠性，而且分布式可以任意扩展。同时 kafka 最好是支撑较少的 topic 数量即可，保证其超高吞吐量。kafka 唯一的一点劣势是有可能消息重复消费，那么对数据准确性会造成极其轻微的影响，在大数据领域中以及日志采集中，这点轻微影响可以忽略这个特性天然适合大数据实时计算以及日志收集。</p><p><img src="https://img-blog.csdn.net/20160506134211236" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;消息队列初始&quot;&gt;&lt;a href=&quot;#消息队列初始&quot; class=&quot;headerlink&quot; title=&quot;消息队列初始&quot;&gt;&lt;/a&gt;消息队列初始&lt;/h2&gt;&lt;h3 id=&quot;什么是消息队列&quot;&gt;&lt;a href=&quot;#什么是消息队列&quot; class=&quot;headerlink&quot; title=&quot;什么是消息队列&quot;&gt;&lt;/a&gt;什么是消息队列&lt;/h3&gt;&lt;p&gt;我们可以把消息队列比作是一个存放消息的容器，当我们需要使用消息的时候可以取出消息供自己使用。&lt;/p&gt;
&lt;p&gt;消息队列是分布式系统中重要的组件，主要解决应用解耦，异步消息，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。&lt;/p&gt;
&lt;p&gt;目前使用较多的消息队列有ActiveMQ，RabbitMQ，Kafka，RocketMQ，我们后面会一一对比这些消息队列。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://pl1649947109.github.io/pl1649947109/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>python2和python3的区别</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/15/%E7%9F%A5%E8%AF%86%E6%89%A9%E5%B1%95/python2%E5%92%8Cpython3%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/15/知识扩展/python2和python3的区别/</id>
    <published>2019-11-15T12:30:00.000Z</published>
    <updated>2019-11-15T08:49:51.612Z</updated>
    
    <content type="html"><![CDATA[<p>区别一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">默认编码 </span><br><span class="line">py2默认为 ascII 编码 不支持汉字输入和输出 如果想要支持 在首行加上 <span class="comment"># encoding:utf-8</span></span><br><span class="line"></span><br><span class="line">py3默认就是utf<span class="number">-8</span></span><br></pre></td></tr></table></figure><p>区别二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入input</span><br><span class="line">py2用的是：rawinput </span><br><span class="line"></span><br><span class="line">py3用的是：input</span><br></pre></td></tr></table></figure><a id="more"></a><p>区别三：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">打印<span class="keyword">print</span></span><br><span class="line">python2的print可以不用括号--&gt;print "hello"</span><br><span class="line"></span><br><span class="line">python3必须有--&gt;print("hello")</span><br><span class="line"></span><br><span class="line">在python2中是使用的<span class="keyword">print</span>是语句，</span><br><span class="line">在python3中使用的是print()函数。</span><br></pre></td></tr></table></figure><p>区别四：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python2和python3的unicode编码</span><br><span class="line"></span><br><span class="line">python2的时候没有str和bytes的区别</span><br><span class="line"></span><br><span class="line">python3就有了，于是就有了encode和decode（他们就是上述的类型的转换）</span><br></pre></td></tr></table></figure><p>区别五：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Python2.2起，如果整数发生溢出，Python会自动将整数数据转换为长整数(long)，所以如今在长整数数据后面不加字母L也不会导致严重后果了。</span><br><span class="line"></span><br><span class="line">在Python3里不再有long类型了，全都是int</span><br></pre></td></tr></table></figure><p>区别六：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">range和xrange</span><br><span class="line">python2中有range和xrange</span><br><span class="line"></span><br><span class="line">但是python3中只有range</span><br></pre></td></tr></table></figure><p>区别七：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">package包</span><br><span class="line">package 在py2 中必须有__init__方法，</span><br><span class="line"></span><br><span class="line">但是在py3中可以没有</span><br></pre></td></tr></table></figure><p>区别八：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">对于betys和str类型，</span><br><span class="line">在3.0版本之前不区分betys和str类型，内部隐式自动切换</span><br><span class="line"></span><br><span class="line">在3.0版本之后不再隐形的自动切换了，而是需要我们使用decode(“ascall”)和encode(“utf-8”)</span><br></pre></td></tr></table></figure><p>区别九：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> <span class="keyword">except</span> 语句的变化</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>版本: </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   ......</span><br><span class="line"><span class="keyword">except</span> Exception, e :</span><br><span class="line">   ......</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>版本：</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   ......</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e :</span><br><span class="line">   ......</span><br></pre></td></tr></table></figure><p>区别十:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">打开文件</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>版本： </span><br><span class="line">    file( ..... )</span><br><span class="line">    或 open(.....)</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>版本：</span><br><span class="line">只能用 open(.....)</span><br></pre></td></tr></table></figure><p>区别十一： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chr(K) 与 ord(c)</span><br><span class="line">python 2.4.2以前</span><br><span class="line">   chr(K)   将编码K 转为字符，K的范围是 0 ~ 255</span><br><span class="line">   ord(c)   取单个字符的编码, 返回值的范围: 0 ~ 255</span><br><span class="line">python 3.0</span><br><span class="line">   chr(K)   将编码K 转为字符，K的范围是 0 ~ 65535</span><br><span class="line">   ord(c)   取单个字符的编码, 返回值的范围: 0 ~ 65535</span><br></pre></td></tr></table></figure><p>区别十二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">除法运算符</span><br><span class="line"></span><br><span class="line">数据类型的不同，在<span class="number">2.</span>x下数字的数据类型有int和long，在<span class="number">3.</span>x之后就中有float</span><br><span class="line"></span><br><span class="line">python <span class="number">2.4</span><span class="number">.2</span>以前</span><br><span class="line">   <span class="number">10</span>/<span class="number">3</span>      结果为 <span class="number">3</span>     </span><br><span class="line"></span><br><span class="line">python <span class="number">3.0</span></span><br><span class="line">   <span class="number">10</span> / <span class="number">3</span> 结果为 <span class="number">3.3333333333333335</span></span><br><span class="line">   <span class="number">10</span> // <span class="number">3</span> 结果为 <span class="number">3</span></span><br></pre></td></tr></table></figure><p>区别十三：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">不等号的区别：</span><br><span class="line"></span><br><span class="line">在python2中，不等号有两种写法：!=  和&lt;&gt;  </span><br><span class="line"></span><br><span class="line">在python3中，不等号只剩下了 !=这一种</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;区别一：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;默认编码 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;py2默认为 ascII 编码 不支持汉字输入和输出 如果想要支持 在首行加上 &lt;span class=&quot;comment&quot;&gt;# encoding:utf-8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;py3默认就是utf&lt;span class=&quot;number&quot;&gt;-8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;区别二：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入input&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;py2用的是：rawinput &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;py3用的是：input&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="知识扩展" scheme="https://pl1649947109.github.io/pl1649947109/tags/%E7%9F%A5%E8%AF%86%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>第三讲——cmdb资产管理之资产入库和变更、未采集的资产</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/15/%E4%B9%A6/cmdb/%E7%AC%AC%E4%B8%89%E8%AE%B2%E2%80%94%E2%80%94cmdb%E8%B5%84%E4%BA%A7%E7%AE%A1%E7%90%86%E4%B9%8B%E8%B5%84%E4%BA%A7%E5%85%A5%E5%BA%93%E5%92%8C%E5%8F%98%E6%9B%B4%E3%80%81%E6%9C%AA%E9%87%87%E9%9B%86%E7%9A%84%E8%B5%84%E4%BA%A7/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/15/书/cmdb/第三讲——cmdb资产管理之资产入库和变更、未采集的资产/</id>
    <published>2019-11-15T12:00:00.000Z</published>
    <updated>2019-11-17T15:39:11.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日概要"><a href="#今日概要" class="headerlink" title="今日概要"></a>今日概要</h2><ul><li>资产入库</li><li>资产变更记录</li><li>今日未采集的资产</li></ul><a id="more"></a><h2 id="今日详细"><a href="#今日详细" class="headerlink" title="今日详细"></a>今日详细</h2><h3 id="1-资产入库-amp-2-资产变更记录"><a href="#1-资产入库-amp-2-资产变更记录" class="headerlink" title="1. 资产入库 &amp; 2.资产变更记录"></a>1. 资产入库 &amp; 2.资产变更记录</h3><ul><li><p>写入数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">    <span class="comment"># 1. 获取到用户提交资产信息</span></span><br><span class="line">    <span class="comment"># 2. 保存到数据库（表关系）</span></span><br><span class="line">    hostname = request.data.get(<span class="string">'hostname'</span>)</span><br><span class="line">    server_object = models.Server.objects.filter(hostname=hostname).first()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> server_object:</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'主机不存在'</span>)</span><br><span class="line">  </span><br><span class="line">    disk_info = request.data[<span class="string">'info'</span>][<span class="string">'disk'</span>]</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    if not disk_info['status']:</span></span><br><span class="line"><span class="string">        print(disk_info['error'])</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        for slot,row_dict in disk_info['data'].items():</span></span><br><span class="line"><span class="string">            # models.Disk.objects.create(**row_dict,server=server_object)</span></span><br><span class="line"><span class="string">            models.Disk.objects.create(**row_dict,server_id=server_object.id)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> Response(<span class="string">'发送成功'</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">中控机汇报到api的资产需要做入库以及变更记录的处理。</span><br><span class="line"> - 由于资产自己时是利用工厂模式实现可扩展插件，方便与扩展。在api端也是使用相同模式，对插件进行一一处理。 </span><br><span class="line"> - 在处理资产信息时候，对操作进行交集和差集的处理从而得到删除/更新/新增资产。</span><br><span class="line"> - 在内部通过反射进行资产变更记录的获取，最终将资产以及变更记录写入数据库。</span><br></pre></td></tr></table></figure><h3 id="3-今日未采集服务器"><a href="#3-今日未采集服务器" class="headerlink" title="3.今日未采集服务器"></a>3.今日未采集服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">基于Q实现复杂的SQL查询</span><br></pre></td></tr></table></figure><h1 id="本周内容总结"><a href="#本周内容总结" class="headerlink" title="本周内容总结"></a>本周内容总结</h1><h2 id="第一部分-drf"><a href="#第一部分-drf" class="headerlink" title="第一部分 drf"></a>第一部分 drf</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1. restful规范</span><br><span class="line"></span><br><span class="line">2. jwt</span><br><span class="line">   pip3 install pyjwt</span><br><span class="line">   pip3 install djangorestframework-jwt</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">3. drf基本使用</span><br><span class="line">- 路由</span><br><span class="line">- 视图</span><br><span class="line">- 序列化</span><br><span class="line">- 解析器</span><br><span class="line">- 筛选器</span><br><span class="line">- 渲染器</span><br><span class="line"></span><br><span class="line">4. 源码（要求：流程的分析）</span><br><span class="line">- 版本</span><br><span class="line">- 认证</span><br><span class="line">- 权限</span><br><span class="line">- 节流</span><br><span class="line"></span><br><span class="line">5. 继承过的视图类</span><br><span class="line"></span><br><span class="line">6. GenericAPIView的作用</span><br><span class="line"></span><br><span class="line">7. 全部和局部应用</span><br><span class="line"></span><br><span class="line">8. 相关配置</span><br><span class="line"></span><br><span class="line">9. 呼啦圈</span><br></pre></td></tr></table></figure><h2 id="第二部分-CMDB"><a href="#第二部分-CMDB" class="headerlink" title="第二部分 CMDB"></a>第二部分 CMDB</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1. cmdb背景</span><br><span class="line">2. cmdb的实现</span><br><span class="line">3. 中控机</span><br><span class="line">   1. paramiko </span><br><span class="line">   2. pymysql操作数据库</span><br><span class="line">   3. 单例模式（其它的单例模式）</span><br><span class="line">   4. 工厂模式</span><br><span class="line">   5. 日志</span><br><span class="line">   6. 堆栈信息</span><br><span class="line">   7. 对象进行数据封装 BaseReponse </span><br><span class="line">   8. 线程池</span><br><span class="line">   9. requests模块：data/json </span><br><span class="line">   10. 采集资产的命令：dmidecode / megacli / saltstack </span><br><span class="line">4. Q获取未采集资产</span><br><span class="line">5. 集合交并差</span><br><span class="line">6. 反射</span><br><span class="line">7. orm批量增加数据：bulk_create([], 10)1. cmdb背景</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;今日概要&quot;&gt;&lt;a href=&quot;#今日概要&quot; class=&quot;headerlink&quot; title=&quot;今日概要&quot;&gt;&lt;/a&gt;今日概要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;资产入库&lt;/li&gt;
&lt;li&gt;资产变更记录&lt;/li&gt;
&lt;li&gt;今日未采集的资产&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="cmdb" scheme="https://pl1649947109.github.io/pl1649947109/tags/cmdb/"/>
    
  </entry>
  
  <entry>
    <title>flask入门初始</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/15/%E4%B9%A6/flask/flask%E5%85%A5%E9%97%A8%E5%88%9D%E5%A7%8B/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/15/书/flask/flask入门初始/</id>
    <published>2019-11-15T12:00:00.000Z</published>
    <updated>2019-11-20T03:31:09.351Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简介：</strong></p><p>Flask是一个基于Python开发并且依赖jinja2模板和Werkzeug WSGI服务的一个微型框架。</p><p>Micro（微）：<strong>微的旨在保持核心简单而易于拓展</strong>；众多的扩展提供了数据库集成、表单验证、上传处理、各种各样的开放认证技术等功能。</p><p>虚拟环境：virtualenv，为什么要采用虚拟环境呢？当我们的项目越来越多的时候，同时拥有不同版本的python工作的可能性就越大，常常会有库（内，外部库）破坏向后兼容性，</p><p>当出现两个或多个依赖性冲突时，我们该怎么做？肯定是产生虚拟环境，给每一个项目提供一份虚拟的环境（不是副本），我们在使用指定的项目的时候就可以激活相应的环境。</p><p>依赖的两个外部库：Jinja2（<a href="http://jinja.pocoo.org/docs/2.10/）和Werkzeug" target="_blank" rel="noopener">http://jinja.pocoo.org/docs/2.10/）和Werkzeug</a> WSGI（<a href="https://werkzeug.palletsprojects.com/en/0.15.x/）工具集" target="_blank" rel="noopener">https://werkzeug.palletsprojects.com/en/0.15.x/）工具集</a></p> <a id="more"></a><p><strong>简单入门：</strong></p><ul><li><p>调试模式：这个架构和django不同的是，如果不进行设置，服务器不能自动更新写入的代码，因此我们需要这样做：app.run(debug=True)</p></li><li><p>路由：<a href="mailto:利用route()装饰器把一个函数绑定到对应的URL上》》@app.route(‘/hello’)" target="_blank" rel="noopener">利用route()装饰器把一个函数绑定到对应的URL上》》@app.route(‘/hello’)</a></p><p>变量规则：@app.route(‘/user/<username>’)  @app.route(‘/post/<a href="int:post_id" target="_blank" rel="noopener">int:post_id</a>’) ：后面接收的可以是字符串和整型两种方式</username></p><p>重定向：@app.route(‘/user/’)    @app.route(‘/user’)  这是两种。访问一个结尾不带斜线的URL时会被flask重定向到带斜线的URL上面去；如果没有页面就会返回一个404错误。所以说我们一般还是带斜线的好。</p><p>构造URL：也就是生成URL，通过url_for来给指定的函数构造URL，</p><p>With app.test_request_context(): url_for(func,username)</p><p>HTTP 方法：<a href="mailto:route（）装饰器可以传递methods参数@app.route(‘/login’,methods=[‘GET’,’POST’])" target="_blank" rel="noopener">route（）装饰器可以传递methods参数@app.route(‘/login’,methods=[‘GET’,’POST’])</a></p><p>GET：浏览器告诉服务器，只获取页面上的信息并发给我。最常用</p><p>POST：浏览器告诉服务器：想在URL上发布新消息，并且服务器必须确保数据已经储存且仅储存一次。这个是HTML表单通常发送数据到服务器的方法</p><p>PUT：类似POST，但是服务器可能触发了多次储存过程，多次覆盖掉旧值。</p><p>DELETE：删除给定位置的信息</p><p>静态文件：通常是css/js文件。给静态文件生成URL：url_for(‘static’,filrname=’style.css’)</p></li><li><p>模板渲染：flask配备了Jinja2作为渲染引擎，可以使用render_template()方法来渲染模板。只需要return render_template(‘hello.html’,name=name):后面的目录的名称</p></li><li><p>访问请求数据：客服端和服务器的数据交互非常的重要，当然是通过request实现的。</p><p>那么request就是全局变量，是否安全呢？</p><p>环境局部变量：</p><p>请求对象：</p><p>文件上传：</p><p>Cookies：详细的自己看</p></li><li><p>重定向和错误：通过redirect()函数把用户重定向到其他的地方。当放弃请求并返回错误代码，用abort()函数  return redirect(url_for(‘login’))    abort(401)</p></li><li><p>关于响应：视图函数的返回值会被自动转换成一个响应对象。</p></li><li><p>会话：两个对象，请求对象和session对象。它允许你在不同请求间存储特定用户的信息。它是在 Cookies 的基础上实现的，并且对 Cookies 进行密钥签名。这意味着用户可以查看你 Cookie 的内容，但却不能修改它，除非用户知道签名的密钥。生成密钥：import os os.urandom(24)</p></li><li><p>消息闪现：反馈，是良好的应用和用户界面的重要构成。如果用户得不到足够的反馈，他们很可能开始厌恶这个应用。 Flask 提供了消息闪现系统，可以简单地给用户反馈。 消息闪现系统通常会在请求结束时记录信息，并在下一个（且仅在下一个）请求中访问记录的信息。展现这些消息通常结合要模板布局。使用 <a href="#flask.flash">flash()</a> 方法可以闪现一条消息。要操作消息本身，请使用<a href="#flask.get_flashed_messages">get_flashed_messages()</a> 函数，并且在模板中也可以使用</p></li><li><p>日志记录：logger是一个标准的日志类，用于查看日志信息。App.logger.warning() 。。。</p></li><li><p>整合WSGI中间件：</p></li><li><p>部署到WEB服务器：在Heroku/dotCloud上面免费托管</p></li></ul><p><strong>教程（完成一个博客的简单开发）</strong></p><p>介绍flaskr：就是一个登入/登出》发布消息前端显示的页面</p><p>创建文件夹：利用pycharm自动生成</p><p>数据库模式：使用自带的sqlist数据库</p><p>应用设置代码：flaskr.py功能代码块</p><p>数据库连接：数据库连接和关闭，本身不是很有用的而且是低效的，所以我们需要让连接保持更长的时间，因为数据库连接封装了事务，我们也需要确保在同一时刻只有一个请求使用这个连接。我们怎么去实现？在flask中提供了两种环境（Request Context（请求环境）和Application Context（应用环境））</p><p>创建数据库：init_db（）</p><p>视图函数：在flaskr中利用函数实现</p><p>模板：添加登陆界面的html，登陆之后的后台的html，发布界面的html</p><p>添加样式：装饰html的css</p><p>应用测试：下次接着看</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;简介：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Flask是一个基于Python开发并且依赖jinja2模板和Werkzeug WSGI服务的一个微型框架。&lt;/p&gt;
&lt;p&gt;Micro（微）：&lt;strong&gt;微的旨在保持核心简单而易于拓展&lt;/strong&gt;；众多的扩展提供了数据库集成、表单验证、上传处理、各种各样的开放认证技术等功能。&lt;/p&gt;
&lt;p&gt;虚拟环境：virtualenv，为什么要采用虚拟环境呢？当我们的项目越来越多的时候，同时拥有不同版本的python工作的可能性就越大，常常会有库（内，外部库）破坏向后兼容性，&lt;/p&gt;
&lt;p&gt;当出现两个或多个依赖性冲突时，我们该怎么做？肯定是产生虚拟环境，给每一个项目提供一份虚拟的环境（不是副本），我们在使用指定的项目的时候就可以激活相应的环境。&lt;/p&gt;
&lt;p&gt;依赖的两个外部库：Jinja2（&lt;a href=&quot;http://jinja.pocoo.org/docs/2.10/）和Werkzeug&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://jinja.pocoo.org/docs/2.10/）和Werkzeug&lt;/a&gt; WSGI（&lt;a href=&quot;https://werkzeug.palletsprojects.com/en/0.15.x/）工具集&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://werkzeug.palletsprojects.com/en/0.15.x/）工具集&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="flask" scheme="https://pl1649947109.github.io/pl1649947109/tags/flask/"/>
    
  </entry>
  
</feed>
