<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>林殊途</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pl1649947109.github.io/pl1649947109/"/>
  <updated>2019-12-02T03:32:19.434Z</updated>
  <id>https://pl1649947109.github.io/pl1649947109/</id>
  
  <author>
    <name>pl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网站使用说明</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2030/01/01/main/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2030/01/01/main/</id>
    <published>2029-12-31T17:00:00.000Z</published>
    <updated>2019-12-02T03:32:19.434Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://9017499461.linshutu.top/main.png" alt></p><p>注：部分内容和功能还在持续更新当中……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://9017499461.linshutu.top/main.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;注：部分内容和功能还在持续更新当中……&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/12/25/Vue/vue/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/12/25/Vue/vue/</id>
    <published>2019-12-25T12:00:00.000Z</published>
    <updated>2020-03-03T02:12:06.563Z</updated>
    
    <content type="html"><![CDATA[<h3 id="js回顾"><a href="#js回顾" class="headerlink" title="js回顾"></a>js回顾</h3><h5 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#一次定时(2s之后执行该函数里面的内容)</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br><span class="line">#循环执行</span><br><span class="line">setlnterval(cb,<span class="number">2000</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#基本数据类型</span><br><span class="line">number\string\boolean\null（空对象）\undefined（变量未定义）</span><br><span class="line">#引用数据类型</span><br><span class="line">function\Object\Array\Date</span><br></pre></td></tr></table></figure><h5 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#将数值类型转换成字符串类型</span><br><span class="line">String(xx)</span><br><span class="line">#将字符串转换成数值类型</span><br><span class="line">parseInt/parseFloat(xx)</span><br><span class="line">#任何数据类型都可以转换成boolean类型</span><br><span class="line">Boolean(xx)</span><br></pre></td></tr></table></figure><h5 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#迭代数据</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">&#125;</span><br><span class="line">#迭代数字</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="函数和对象"><a href="#函数和对象" class="headerlink" title="函数和对象"></a>函数和对象</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#函数Function</span><br><span class="line">var add = function()&#123;&#125; #普通函数</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    xxxx</span><br><span class="line">&#125;)(1,2)  #自执行函数</span><br><span class="line"></span><br><span class="line">#对象Object(和python的语法非常像)</span><br><span class="line"><span class="keyword">for</span>...in</span><br><span class="line"><span class="keyword">delete</span> obj.name</span><br><span class="line">obj[name]</span><br><span class="line">obj.name</span><br></pre></td></tr></table></figure><h3 id="es6"><a href="#es6" class="headerlink" title="es6"></a>es6</h3><h5 id="块级绑定"><a href="#块级绑定" class="headerlink" title="块级绑定"></a>块级绑定</h5><p>let和const</p><p>let 声明的变量:1.块级作用域 2.不允许重复声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var声明的变量会有变量提升</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">var</span>  a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let声明的变量不会有变量提升，是一个块作用域的</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//报错</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">30</span>;</span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">//报错</span></span><br></pre></td></tr></table></figure><p>const声明的变量被认为是常量，一旦被赋值以后无法改变。所以const声明变量时立马赋值</p><p>const声明的变量也为块级作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> max = <span class="number">30</span>;</span><br><span class="line">max = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> min;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">2</span>===<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">'mjj'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以修改变量成员</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name:<span class="string">'小马哥'</span></span><br><span class="line">&#125;</span><br><span class="line">person.name = <span class="string">'alex'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person);<span class="comment">//&#123;name:'小马哥'&#125;</span></span><br></pre></td></tr></table></figure><p>应用：看个for循环的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">5</span>]()); <span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>以前的解决方案：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr[i] = (<span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(i)</span><br></pre></td></tr></table></figure><p>现在完全可以将<strong>var改成let来解决</strong></p><p>使用let声明的变量不会影响全局污染</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">RegExp</span> = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.RegExp);</span><br></pre></td></tr></table></figure><p>建议：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">关于<span class="keyword">let</span>和<span class="keyword">const</span>在以后的开发中最佳应用：</span><br><span class="line">在默认情况下用<span class="keyword">const</span>,而只有你在知道变量值需要被修改的情况下使用<span class="keyword">let</span></span><br></pre></td></tr></table></figure><h5 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#模板字符串使用``</span><br><span class="line"><span class="keyword">const</span> oBox = <span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>);</span><br><span class="line"><span class="comment">// 模板字符串</span></span><br><span class="line"><span class="keyword">const</span> id = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'mjj'</span>;</span><br><span class="line"><span class="keyword">const</span> htmlTel = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;id:<span class="subst">$&#123;id&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;name:<span class="subst">$&#123;name&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;`</span></span><br><span class="line">oBox.innerHTML = htmlTel;</span><br></pre></td></tr></table></figure><h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><ul><li>默认值传参</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数的默认值 不会影响arguments对象,它表示实参的个数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b = <span class="number">20</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><ul><li>函数做参</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getVal</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val + <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add2</span>(<span class="params">a, b = getVal(<span class="number">5</span></span>)) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add2(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><ul><li>箭头函数</li></ul><p>使用<code>=&gt;</code>来定义 <code>function(){}</code> 等价于<code>()=&gt;{}</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#无参数</span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">"hello world"</span>;</span><br><span class="line">#一个参数</span><br><span class="line"><span class="keyword">let</span> add = <span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line">#两个及以上参数</span><br><span class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">value,value2</span>) =&gt;</span> value+value2;</span><br><span class="line">#返回对象</span><br><span class="line"><span class="keyword">let</span> getId = <span class="function"><span class="params">id</span> =&gt;</span> (&#123;<span class="attr">id</span>: id,<span class="attr">name</span>: <span class="string">'mjj'</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> obj = getId(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure><ul><li>没有<code>this</code>绑定</li></ul><p>es6箭头函数的解决方案</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> PageHandler = &#123;</span><br><span class="line">    id: <span class="number">123</span>,</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 箭头函数没有this的指向，箭头函数内部的this值只能通过查找作用域链来确定</span></span><br><span class="line">        <span class="comment">// 如果箭头函数被一个非箭头函数所包括，那么this的值与该函数的所属对象相等，否则 则是全局的window对象</span></span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, (event) =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">this</span>.doSomeThings(event.type);</span><br><span class="line">        &#125;, <span class="literal">false</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    doSomeThings: <span class="function"><span class="keyword">function</span> (<span class="params">type</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`事件类型:<span class="subst">$&#123;type&#125;</span>,当前id:<span class="subst">$&#123;<span class="keyword">this</span>.id&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">PageHandler.init()</span><br><span class="line">#this沿着函数一层层的往上找</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>箭头函数中没有arguments对象  </li><li>箭头函数不能使用new关键字来实例化对象</li></ul><h5 id="es6新语法"><a href="#es6新语法" class="headerlink" title="es6新语法"></a>es6新语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'张三'</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">19</span>;</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">    <span class="comment">// 方法也可以简写</span></span><br><span class="line">    sayName() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.sayName()</span><br><span class="line"></span><br><span class="line">#实例</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;x,y&#125;</span><br><span class="line">&#125; </span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//结果是多少？</span></span><br><span class="line"><span class="comment">//结果：&#123;x:1,y:2&#125;</span></span><br></pre></td></tr></table></figure><h5 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h5><ul><li>对象解构</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> node = &#123;</span><br><span class="line">    type:<span class="string">'identifier'</span>,</span><br><span class="line">    name:<span class="string">'foo'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;type,name&#125; = node;</span><br><span class="line"><span class="built_in">console</span>.log(type,name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    a:&#123;</span><br><span class="line">        name:<span class="string">'张三'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    b:[],</span><br><span class="line">    c:<span class="string">'hello world'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可忽略</span></span><br><span class="line"><span class="keyword">let</span> &#123;a&#125; = obj;</span><br><span class="line"><span class="comment">//剩余运算符</span></span><br><span class="line"><span class="keyword">let</span> &#123;a,...res&#125; = obj;</span><br><span class="line"><span class="built_in">console</span>.log(a,res);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认值</span></span><br><span class="line"><span class="keyword">let</span> &#123;e,f = <span class="number">10</span>&#125; = &#123;<span class="attr">e</span>:<span class="number">20</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(e,f);</span><br></pre></td></tr></table></figure><ul><li>数组解构</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">// 将以上数组解构</span></span><br><span class="line"><span class="keyword">let</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可嵌套</span></span><br><span class="line"><span class="keyword">let</span> [a,[b],c] = [<span class="number">1</span>,[<span class="number">2</span>],[<span class="number">3</span>]];</span><br><span class="line"><span class="comment">// 可忽略</span></span><br><span class="line"><span class="keyword">let</span> [a,b] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a,b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构赋值默认值</span></span><br><span class="line"><span class="keyword">let</span> [a,b,c,d,e,f=<span class="number">10</span>] = <span class="string">'hello'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c,d,e,f);</span><br></pre></td></tr></table></figure><h3 id="Vue起步"><a href="#Vue起步" class="headerlink" title="Vue起步"></a>Vue起步</h3><h5 id="Vue-js是什么"><a href="#Vue-js是什么" class="headerlink" title="Vue.js是什么"></a>Vue.js是什么</h5><p>Vue是一套用于构建用户界面的<strong>渐进式框架</strong>。Vue的核心库只关注视图层，其结合现代化的工具链并支持类库使用时，它也能够为复杂的单页面应用提供驱动。</p><p>使用vue的方式有多种，在构建Vue大型应用时推荐使用NPM安装。NPM能很好地和webpack模块打包器配合使用。</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装***"></a>安装***</h5><p>使用npm安装，但是其服务器在国外，建议使用淘宝的cnpm安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装cnpm</span></span><br><span class="line">npm install cnpm -g</span><br><span class="line"><span class="meta">#</span><span class="bash">安装vue</span></span><br><span class="line">cnpm install vue</span><br><span class="line"><span class="meta">#</span><span class="bash">安装vue-cli（脚手架）</span></span><br><span class="line">cnpm install --global vue-cli</span><br><span class="line"><span class="meta">#</span><span class="bash">创建项目</span></span><br><span class="line">vue init webpack my-project</span><br><span class="line"><span class="meta">#</span><span class="bash">运行项目</span></span><br><span class="line">cnpm run dev</span><br></pre></td></tr></table></figure><h5 id="引入包"><a href="#引入包" class="headerlink" title="引入包"></a>引入包</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#引入cdn</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><p>Vue.js使用了基于HTML的模版语法，允许开发者生命式地将DOM帮定至底层Vue实例的数据。在底层的实现上，Vue将模板编译成虚拟DOM渲染函数。结合响应系统，Vue能够智能的计算最少需要重新渲染多少组件，并把DOM操作次数减到最少。</p><h5 id="插值"><a href="#插值" class="headerlink" title="插值***"></a>插值***</h5><p>它的值可以是任意的类型，和dj的模板语法是一样的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; fav()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    #实例化（实例化只能绑定一块地）</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            msg: <span class="string">"插值"</span>,</span></span><br><span class="line"><span class="javascript">            fav: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">                alert(2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">**************************</span><br><span class="line">文本：</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>  内容会动态变化</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>这个将不会改变: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>  内容不会动态变化，一次性插值</span><br><span class="line">原始HTML：（最好不要使用，容易受到用户的XSS攻击，对用户不提供这种写法）</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using v-html directive: <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">"rawHtml"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">使用JS表达式：</span><br><span class="line">&#123;&#123; number + 1 &#125;&#125;</span><br><span class="line">&#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;</span><br><span class="line">&#123;&#123; message.split('').reverse().join('') &#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="指令"><a href="#指令" class="headerlink" title="指令***"></a>指令***</h5><p>以<code>v-xxx</code>开头的都是指令，指令中封装了一些DOM行为，结合属性作为一个暗号，暗号有碎影的值，根据不同的值，框架会进行相关DOM操作的绑定。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v-text:元素的textContent属性,必须是双标签 跟&#123;&#123; &#125;&#125;效果是一样的 使用较少</span><br><span class="line">v-html: 元素的innerHTML</span><br><span class="line">v-<span class="keyword">if</span> : 判断是否插入这个元素,相当于对元素的销毁和创建（单次的切换使用）</span><br><span class="line">v-<span class="keyword">else</span>-<span class="keyword">if</span>:条件控制</span><br><span class="line">v-<span class="keyword">else</span>:条件控制</span><br><span class="line">v-show 隐藏元素  如果确定要隐藏,会给元素的style加上display:none。是基于css样式的切换（用于频繁的切换）</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; fav()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-html</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"isShow"</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>=<span class="string">"isShow"</span>&gt;</span>bb<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"1"</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,i) in favs"</span><span class="attr">v-bind:key</span>=<span class="string">""</span>&gt;</span>&#123;&#123; item &#125;&#125;&#123;&#123; i &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"imgSrc"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imgSrc"</span>&gt;</span> <span class="comment">&lt;!--这种方式是v-bind的简写--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">v-bind:class</span>=<span class="string">'&#123;active:isActive&#125;'</span><span class="attr">v-on:click</span>=<span class="string">"handleClick"</span>&gt;</span></span><br><span class="line">            点我变颜色</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"double_msg"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; double_msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="xml">                msg: "<span class="tag">&lt;<span class="name">span</span>&gt;</span>插值<span class="tag">&lt;/<span class="name">span</span>&gt;</span>",</span></span><br><span class="line"><span class="javascript">                fav: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                isShow:<span class="literal">true</span>，</span></span><br><span class="line"><span class="javascript">                favs:[<span class="string">"吸烟"</span>,<span class="string">"喝酒"</span>,<span class="string">"烫头"</span>]，</span></span><br><span class="line"><span class="javascript">            imgSrc:<span class="string">'http://file02.16sucai.com/d/file/2014/0704/e53c868ee9e8e7b28c424b56afe2066d.jpg'</span>,</span></span><br><span class="line"><span class="javascript">            isActive:<span class="literal">false</span>，</span></span><br><span class="line"><span class="javascript">            double_msg:<span class="string">""</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            method:&#123;</span><br><span class="line">                handleClick()&#123;</span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.isActive = !<span class="keyword">this</span>.isActive</span></span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>v-if和v-show的区别</strong></p><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p><p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p><p>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p><p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p><p><strong>v-for</strong></p><ul><li>基本语法 <code>v-for=&quot;item in arr&quot;</code></li><li>对象的操作 <code>v-for=&quot;item in obj&quot;</code></li><li>如果是数组没有id<ul><li><code>v-for=&quot;(item,index) in arr&quot; :class=&quot;index&quot; :key=&#39;index&#39;</code></li></ul></li><li>v-for的优先级最高</li></ul><p><strong>v-bind属性赋值</strong></p><ul><li>给元素的属性赋值 <ul><li>可以给已经存在的属性赋值 input value</li><li>也可以给自定义属性赋值 mydata</li></ul></li><li>语法 在元素上 <code>v-bind:属性名=&quot;常量||变量名&quot;</code></li><li>简写形式 <code>:属性名=&quot;变量名&quot;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:</span>原属性名=<span class="string">"变量"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:</span>属性名=<span class="string">"变量"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>v-on事件绑定</strong></p><ul><li>处理自定义原生事件的,给按钮添加click并让使用变量的样式改变</li><li>普通使用   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 简写方式  ``` @事件名=&quot;表达式&quot;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#事件修饰符</span><br><span class="line"><span class="comment">&lt;!-- 阻止单击事件冒泡 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- click 事件只能点击一次，2.1.4版本新增 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.once</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#按键修饰符</span><br><span class="line">.enter</span><br><span class="line">.tab</span><br><span class="line">.delete (捕获 "删除" 和 "退格" 键)</span><br><span class="line">.esc</span><br><span class="line">.space</span><br><span class="line">.up</span><br><span class="line">.down</span><br><span class="line">.left</span><br><span class="line">.right</span><br><span class="line">.ctrl</span><br><span class="line">.alt</span><br><span class="line">.shift</span><br><span class="line">.meta</span><br></pre></td></tr></table></figure><p><strong>v-model双向数据绑定</strong></p><ul><li>双向数据流（绑定）<ul><li>页面改变影响内存(js)</li><li>内存(js)改变影响页面</li></ul></li></ul><h5 id="侦听器watch"><a href="#侦听器watch" class="headerlink" title="侦听器watch***"></a>侦听器watch***</h5><p>基本的数据类型可以使用watch直接监听，复杂数据类型Object Array 要深度监视</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">'msg'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;stus[0].name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'stus[0].name = "Tom"'</span>&gt;</span>改变<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            msg:<span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">            stus:[&#123;<span class="attr">name</span>:<span class="string">'jack'</span>&#125;]</span></span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// key是属于data对象的属性名 value:监视后的行为 newV :新值 oldV:旧值</span></span></span><br><span class="line"><span class="javascript">            <span class="string">'msg'</span>:<span class="function"><span class="keyword">function</span>(<span class="params">newV,oldV</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// console.log(newV,oldV);</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(newV === <span class="string">'100'</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="comment">// 深度监视： Object |Array</span></span></span><br><span class="line"><span class="javascript">            <span class="string">"stus"</span>:&#123;</span></span><br><span class="line"><span class="javascript">                deep:<span class="string">'true'</span>,</span></span><br><span class="line"><span class="javascript">                handler:<span class="function"><span class="keyword">function</span>(<span class="params">newV,oldV</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(newV[<span class="number">0</span>].name);</span></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h5 id="计算属性computed"><a href="#计算属性computed" class="headerlink" title="计算属性computed***"></a>计算属性computed***</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">    &#123;&#123;reverseMsg&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'handleClick'</span>&gt;</span>改变<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            msg: <span class="string">'hello world'</span>,</span></span><br><span class="line"><span class="javascript">            firstName: <span class="string">'小马'</span>,</span></span><br><span class="line"><span class="javascript">            lastName: <span class="string">'哥'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleClick()&#123;</span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.msg = <span class="string">'计算属性computed'</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.lastName = <span class="string">'妹'</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// computed默认只有getter方法</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 计算属性最大的优点：产生缓存 如果数据没有发生变化 直接从缓存中取</span></span></span><br><span class="line"><span class="javascript">            reverseMsg: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="keyword">this</span>.msg.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            fullName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="keyword">this</span>.lastName;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="过滤器filters"><a href="#过滤器filters" class="headerlink" title="过滤器filters"></a>过滤器filters</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;price | myPrice('¥')&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;msg|myReverse&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建全局过滤器 为数据进行添油加醋</span></span></span><br><span class="line"><span class="javascript">    Vue.filter(<span class="string">'myReverse'</span>, (val) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> val.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="comment">// 为数据添油加醋</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// ¥  $20</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            price: 10,</span><br><span class="line"><span class="javascript">            msg:<span class="string">'hello 过滤器'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 局部过滤器</span></span></span><br><span class="line">        filters: &#123;</span><br><span class="line"><span class="javascript">            myPrice: <span class="function"><span class="keyword">function</span> (<span class="params">price, a</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> a + price;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Class与Style绑定"><a href="#Class与Style绑定" class="headerlink" title="Class与Style绑定"></a>Class与Style绑定</h3><p>操作元素的class列表和内联样式是数据绑定的一个常见需求。我们可以使用<code>v-bind</code>来处理，表达式结果的类型除了字符串之外，还可以是对象或数组。</p><h5 id="class对象语法"><a href="#class对象语法" class="headerlink" title="class对象语法"></a>class对象语法</h5><p>我们可以传给 <code>v-bind:class</code> 一个对象，以动态地切换 class：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:class=&quot;&#123; active: isActive &#125;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在上面的语法里面，这个class存在与否取决于这个isActive的值。</p><p>我们也可以在对象中传入更多属性来动态切换多个class：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">模板：</span><br><span class="line">&lt;div</span><br><span class="line">  class=&quot;static&quot;</span><br><span class="line">  v-bind:class=&quot;&#123; active: isActive, &apos;text-danger&apos;: hasError &#125;&quot;</span><br><span class="line">&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">数据：</span><br><span class="line">data: &#123;</span><br><span class="line">  isActive: true,</span><br><span class="line">  hasError: false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">渲染结果：</span><br><span class="line">&lt;div class=&quot;static active&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>我们在这里也可以绑定一个返回对象的<code>计算属性</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:class=&quot;classObject&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">  isActive: true,</span><br><span class="line">  error: null</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  classObject: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      active: this.isActive &amp;&amp; !this.error,</span><br><span class="line">      &apos;text-danger&apos;: this.error &amp;&amp; this.error.type === &apos;fatal&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//这里在计算属性里面很方便的解决复杂的class绑定的问题</span><br></pre></td></tr></table></figure><h5 id="class数组语法"><a href="#class数组语法" class="headerlink" title="class数组语法"></a>class数组语法</h5><p>我们可以把一个数组传给 <code>v-bind:class</code>，以应用一个 class 列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">模板：</span><br><span class="line">&lt;div v-bind:class=&quot;[activeClass, errorClass]&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">数据：</span><br><span class="line">data: &#123;</span><br><span class="line">  activeClass: &apos;active&apos;,</span><br><span class="line">  errorClass: &apos;text-danger&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">渲染结果：</span><br><span class="line">&lt;div class=&quot;active text-danger&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h5 id="class组件中使用"><a href="#class组件中使用" class="headerlink" title="class组件中使用"></a>class组件中使用</h5><p>生命组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;my-component&apos;, &#123;</span><br><span class="line">  template: &apos;&lt;p class=&quot;foo bar&quot;&gt;Hi&lt;/p&gt;&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>给组件添加class类值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component v-bind:class=&quot;baz boo &#123;isActive&#125;&quot;&gt;&lt;/my-component&gt;</span><br></pre></td></tr></table></figure><p>渲染结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p class=&quot;foo bar baz boo active&quot;&gt;Hi&lt;/p&gt;</span><br></pre></td></tr></table></figure><h5 id="style对象语法"><a href="#style对象语法" class="headerlink" title="style对象语法"></a>style对象语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">模板：</span><br><span class="line">&lt;div v-bind:style=&quot;styleObject&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">数据：</span><br><span class="line">data: &#123;</span><br><span class="line">  styleObject: &#123;</span><br><span class="line">    color: &apos;red&apos;,</span><br><span class="line">    fontSize: &apos;13px&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//同样的，对象语法常常结合返回对象的计算属性使用</span><br></pre></td></tr></table></figure><h5 id="style数组语法"><a href="#style数组语法" class="headerlink" title="style数组语法"></a>style数组语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:style=&quot;[baseStyles, overridingStyles]&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>根组件：vm的实例</p><p>子组件：根据页面上功能区域我们可以划分为其他的组件</p><p>每个组件都是可复用的Vue实例，都对应有自己的<code>data</code>，<code>methods</code>，<code>watch</code>，<code>computed</code>以及生命周期钩子等属性功能，组件是为了功能的模块化，为了解耦，每个组件有自己的数据属性，监听自己的数据属性等操作 。</p><p>注意：vue组件中名字的首字母需要大写，为了个标签进行区分</p><p><img src="http://9017499461.linshutu.top/vue1.png" alt="image-20190919160820754"></p><h5 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h5><p><strong>局部组件</strong>：组件化开发就是我们所说的模块化开发</p><ul><li><p>遵循三部曲：声明子组件、挂载子组件、使用子组件</p><ul><li>声子：let App = { return { text:””}}组件里面data必须是一个函数，一定要有返回值，并且没有el属性</li><li>挂子：使用的关键字是components属性。components:{App} 这个App就是我们上面声明的子组件</li><li>用子：在页面的直接加上标签即可<code>&lt;App /&gt;</code>或者<code>&lt;App&gt;&lt;/App&gt;</code>,这种类似标签的写法，我们叫做组件。</li></ul></li><li><p>什么是template模板？这个不是组件，它是组件需要的东西（vue语法的执行循序是这个样子的，vue实例化对象里面如果有el又有template属性，并且template中定义有内容，那么它的优先级就会大于el的优先级，它会替换掉el指向的id标签）template的语法：template:使用`这样的反引号来框选我们写的内容，因为它的内部写的是标签的内容</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;!-- 3.使用子组件 --&gt;</span><br><span class="line">    &lt;App&gt;&lt;/App&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">//1.创建子组件</span><br><span class="line">const App = &#123;</span><br><span class="line">    //必须是一个函数</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            msg: &apos;我是App组件&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Vcontent</span><br><span class="line">    &#125;,</span><br><span class="line">    template: `</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;Vheader&gt;&lt;/Vheader&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;Vaside /&gt;  </span><br><span class="line">    &lt;Vcontent /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    `</span><br><span class="line">&#125;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    data: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        // 2.挂载子组件</span><br><span class="line">        App</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h6 id="在模块系统中局部注册"><a href="#在模块系统中局部注册" class="headerlink" title="在模块系统中局部注册"></a>在模块系统中局部注册</h6><p>比如在ComponentB.vue文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import ComponentA from &apos;./ComponentA&apos;</span><br><span class="line">import ComponentC from &apos;./ComponentC&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ComponentA,</span><br><span class="line">    ComponentC</span><br><span class="line">  &#125;,</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，ComponentA和ComponentC都可以在ComponentB的模板中使用了。</p><h5 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h5><p>Vue.component(‘my-component-name’,{/<em>……</em>/})，其中，该组件名就是Vue.component的第一个参数（组件名全部小写且必须包含一个连字符）,这种方式的注册时全局的，也就是说在注册之后可以在任何新创建的Vue根实例的模板中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;component-a&apos;, &#123; /* ... */ &#125;)</span><br><span class="line">Vue.component(&apos;component-b&apos;, &#123; /* ... */ &#125;)</span><br><span class="line">Vue.component(&apos;component-c&apos;, &#123; /* ... */ &#125;)</span><br><span class="line"></span><br><span class="line">new Vue(&#123; el: &apos;#app&apos; &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component-a</span>&gt;</span><span class="tag">&lt;/<span class="name">component-a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component-b</span>&gt;</span><span class="tag">&lt;/<span class="name">component-b</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component-c</span>&gt;</span><span class="tag">&lt;/<span class="name">component-c</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>全局组件</strong>：像我们的到导航栏的部分，不管跳转到那个页面都会显示导航栏的部分</p><ul><li><p>局部组件需要挂载，全局组件不需要挂载，局部组件是需要时使用，全局组件是大家共享的</p></li><li><p>全局组件的属性：Vue.component(参数1,参数2)，第一个参数是起的全局组件的名字，第二个参是组件的options</p></li><li><p>创建全局组件：Vue.component(Vbut,{</p><p>data(){ return { btnName:”xxx”}}}),它的使用和局部组件是一样的。可以在局部组件中使用，也可以在头组件中使用,也就是说全局组件应用到任何的组件中都是可以的</p></li></ul><h6 id="基础组件的自动化全局注册"><a href="#基础组件的自动化全局注册" class="headerlink" title="基础组件的自动化全局注册"></a>基础组件的自动化全局注册</h6><p>可能我们的许多组件只是包裹了一个输入框或按钮之类的元素，是箱底通用的。我们有的时候把他们称作基础组件，他们会在各个组件中被频繁的用到：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> upperFirst <span class="keyword">from</span> <span class="string">'lodash/upperFirst'</span></span><br><span class="line"><span class="keyword">import</span> camelCase <span class="keyword">from</span> <span class="string">'lodash/camelCase'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> requireComponent = <span class="built_in">require</span>.context(</span><br><span class="line">  <span class="comment">// 其组件目录的相对路径</span></span><br><span class="line">  <span class="string">'./components'</span>,</span><br><span class="line">  <span class="comment">// 是否查询其子目录</span></span><br><span class="line">  <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 匹配基础组件文件名的正则表达式</span></span><br><span class="line">  /Base[A-Z]\w+\.(vue|js)$/</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">requireComponent.keys().forEach(<span class="function"><span class="params">fileName</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 获取组件配置</span></span><br><span class="line">  <span class="keyword">const</span> componentConfig = requireComponent(fileName)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取组件的 PascalCase 命名</span></span><br><span class="line">  <span class="keyword">const</span> componentName = upperFirst(</span><br><span class="line">    camelCase(</span><br><span class="line">      <span class="comment">// 获取和目录深度无关的文件名</span></span><br><span class="line">      fileName</span><br><span class="line">        .split(<span class="string">'/'</span>)</span><br><span class="line">        .pop()</span><br><span class="line">        .replace(<span class="regexp">/\.\w+$/</span>, <span class="string">''</span>)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 全局注册组件</span></span><br><span class="line">  Vue.component(</span><br><span class="line">    componentName,</span><br><span class="line">    <span class="comment">// 如果这个组件选项是通过 `export default` 导出的，</span></span><br><span class="line">    <span class="comment">// 那么就会优先使用 `.default`，</span></span><br><span class="line">    <span class="comment">// 否则回退到使用模块的根。</span></span><br><span class="line">    componentConfig.default || componentConfig</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意：全局注册的行为必须在根Vue实例创建之前发生。</p><h4 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h4><p>v-model语法完成</p><p>支持的标签包括：input、textarea、单个复选框、多选复选框、redio选择、单个下拉框选择、下拉框多选</p><p>修饰符：就相当于jq中的过滤器和tags</p><h4 id="父子组件传值"><a href="#父子组件传值" class="headerlink" title="父子组件传值"></a>父子组件传值</h4><h5 id="Prop"><a href="#Prop" class="headerlink" title="Prop"></a>Prop</h5><p><strong>prop的类型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  title: <span class="built_in">String</span>,</span><br><span class="line">  likes: <span class="built_in">Number</span>,</span><br><span class="line">  isPublished: <span class="built_in">Boolean</span>,</span><br><span class="line">  commentIds: <span class="built_in">Array</span>,</span><br><span class="line">  author: <span class="built_in">Object</span>,</span><br><span class="line">  callback: <span class="built_in">Function</span>,</span><br><span class="line">  contactsPromise: <span class="built_in">Promise</span> <span class="comment">// or any other constructor</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>传递静态或动态Prop</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">post: &#123;</span><br><span class="line">  id: 1,</span><br><span class="line">  title: 'My Journey with Vue'</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//静态传值</span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">title</span>=<span class="string">"My journey with Vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//动态传值</span><br><span class="line"><span class="comment">&lt;!-- 动态赋予一个变量的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-bind:title</span>=<span class="string">"post.title"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态赋予一个复杂表达式的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:title</span>=<span class="string">"post.title + ' by ' + post.author.name"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//传如一个数字</span><br><span class="line"><span class="comment">&lt;!-- 即便 `42` 是静态的，我们仍然需要 `v-bind` 来告诉 Vue --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-bind:likes</span>=<span class="string">"42"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用一个变量进行动态赋值。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-bind:likes</span>=<span class="string">"post.likes"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//传入一个布尔值</span><br><span class="line"><span class="comment">&lt;!-- 包含该 prop 没有值的情况在内，都意味着 `true`。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">is-published</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 即便 `false` 是静态的，我们仍然需要 `v-bind` 来告诉 Vue --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-bind:is-published</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用一个变量进行动态赋值。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-bind:is-published</span>=<span class="string">"post.isPublished"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//传如一个数组</span><br><span class="line"><span class="comment">&lt;!-- 即便数组是静态的，我们仍然需要 `v-bind` 来告诉 Vue --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-bind:comment-ids</span>=<span class="string">"[234, 266, 273]"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用一个变量进行动态赋值。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-bind:comment-ids</span>=<span class="string">"post.commentIds"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//换入一个对象</span><br><span class="line"><span class="comment">&lt;!-- 即便对象是静态的，我们仍然需要 `v-bind` 来告诉 Vue --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:author</span>=<span class="string">"&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">    name: 'Veronica',</span></span></span><br><span class="line"><span class="tag"><span class="string">    company: 'Veridian Dynamics'</span></span></span><br><span class="line"><span class="tag"><span class="string">  &#125;"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用一个变量进行动态赋值。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-bind:author</span>=<span class="string">"post.author"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//</span><br></pre></td></tr></table></figure><h5 id="prop验证"><a href="#prop验证" class="headerlink" title="prop验证***"></a>prop验证***</h5><p>直接上实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span></span><br><span class="line">    propA: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 多个可能的类型</span></span><br><span class="line">    propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    <span class="comment">// 必填的字符串</span></span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的数字</span></span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的对象</span></span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="comment">// 对象或数组默认值必须从一个工厂函数获取</span></span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">'hello'</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义验证函数</span></span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 这个值必须匹配下列字符串中的一个</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'success'</span>, <span class="string">'warning'</span>, <span class="string">'danger'</span>].indexOf(value) !== <span class="number">-1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意：那些 prop 会在一个组件实例创建<strong>之前</strong>进行验证，所以实例的属性 (如 <code>data</code>、<code>computed</code> 等) 在 <code>default</code> 或 <code>validator</code> 函数中是不可用的。</p><p><strong>类型检查</strong></p><p><code>type</code> 可以是下列原生构造函数中的一个：</p><ul><li><code>String</code></li><li><code>Number</code></li><li><code>Boolean</code></li><li><code>Array</code></li><li><code>Object</code></li><li><code>Date</code></li><li><code>Function</code></li><li><code>Symbol</code></li></ul><p>额外的，<code>type</code> 还可以是一个自定义的构造函数，并且通过 <code>instanceof</code> 来进行检查确认。例如，给定下列现成的构造函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function Person (firstName, lastName) &#123;</span><br><span class="line">  this.firstName = firstName</span><br><span class="line">  this.lastName = lastName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;blog-post&apos;, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    author: Person</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>来验证 <code>author</code> prop 的值是否是通过 <code>new Person</code> 创建的。</p><h5 id="父组件传值给子组件（单向下行绑定prop）"><a href="#父组件传值给子组件（单向下行绑定prop）" class="headerlink" title="父组件传值给子组件（单向下行绑定prop）"></a>父组件传值给子组件（单向下行绑定prop）</h5><p>解释：父级prop的更新会向下流动到子组件，但是反过来却不可以。这样会防止从子组件意外改变父级组件的状态，从而导致我们的应用的数据流向难以理解。并且每次父级组件发生更新时，子组件中所有的prop都会刷新为最新的值。</p><p>通过<code>prop</code>属性进行传值，分为两步走</p><ul><li>在子组件中使用props属性进行声明，然后可以直接在子组件中任意使用</li><li>父组件要定义自定义的属性</li></ul><p>我看来就是父组件里面自定义各种的属性，子组件先通过props属性进行对应的定义（列表的形式），然后将子组件挂载到父组件里面去，父组件的template属性里面用子组件，以<code>&lt;Vheader :msg=&quot;text&quot; :msg2=&quot;text2&quot; :msg3=&quot;post&quot; :msg4=&quot;l1&quot; :msg5=&quot;text3&quot;&gt;&lt;/Vheader&gt;</code>这种形式将父组件的值传递给了子组件</p><p>还有子孙的传值也是这种样子的，父组件的值可以一层层的传递下去</p><p>下面的两种常见的视图改变一个prop的情形：</p><p><strong>1.这个prop用来传递一个初始值；这个子组件接下来希望将其作为一个本地的prop数据来使用，这种情况下，最好定义一个本地的data属性并将这个prop用作初始值：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'initialCounter'</span>],</span><br><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counter: <span class="keyword">this</span>.initialCounter</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.这个prop以一种原始的值传入需要进行转换。在这个情况下，最好使用这个prop的值来定义一个计算属性：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'size'</span>],</span><br><span class="line">computed: &#123;</span><br><span class="line">  normalizedSize: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size.trim().toLowerCase()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="子组件传值给父组件"><a href="#子组件传值给父组件" class="headerlink" title="子组件传值给父组件"></a>子组件传值给父组件</h5><p>也是两步走</p><ul><li>子组件中使用this.$emit(‘fatherHandler’,val)，fatherHandler是父组件中使用子组件的地方添加的绑定自定义事件<code>&lt;Vheader @fatherHandler=&quot;appFatherHandler&quot;&gt;&lt;/Vheader&gt;</code>，val就是子组件需要传递给父组件的值</li><li>父组件中的methods属性中写一个自定义的事件函数：appFatherHandler(val){}，在这个函数里面使用的这个val就是上面子组件传过来的数据</li></ul><h4 id="平行组件传值"><a href="#平行组件传值" class="headerlink" title="平行组件传值"></a>平行组件传值</h4><p>它的原理就是通过$on来声明，通过$emit来触发，前提就是这两个方法要挂载到一个公共的方法上，也就是说将$on和$emit都放到这个公用的方法上。</p><p>定义一个全局的vue对象，let bus = new Vue();这个对象就是用来调用上面的两个方法的，但是这个对象和我们真正的vue对象是不一样的，这个vue对象只是单纯的作为平行组件传值的一个公交车</p><p>那么，test1–&gt;test2这样子的传值</p><p>test1中：created(){bus.$on(‘testData’,val) =&gt;{this.text = val}}这个val就是平行组件之间传递的值</p><p>test2中：methods:{clickHandler(){ bus.$emit(‘testData’,this.msg)}}  这个msg需要在组件中定义</p><p><strong>这里说了两种传值的方式，其实有7种之多，其他的我们就不学了，后面我们还会用到vuex的方式进行传值。</strong></p><h4 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h4><p>在2.6.0中，具名插槽和作用域插槽引入一个新的统一的语法v-slot指令。</p><p>通过插槽分发内容，和HTML元素一样，我们经常要向一个组件传递内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;alert-box&gt;</span><br><span class="line">  Something bad happened.</span><br><span class="line">&lt;/alert-box&gt;</span><br></pre></td></tr></table></figure><p>像上面的，我们渲染出来的东西可能就是这样的：</p><p><strong>Error!</strong> Something bad happened.</p><p>因此，Vue自定义的<code>&lt;slot&gt;</code>元素让这种方式变的非常简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;alert-box&apos;, &#123;</span><br><span class="line">  template: `</span><br><span class="line">    &lt;div class=&quot;demo-alert-box&quot;&gt;</span><br><span class="line">      &lt;strong&gt;Error!&lt;/strong&gt;</span><br><span class="line">      &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>向上面，我们只要在需要的地方加入插槽就可以了。</p><p><strong>父级模板里面的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。</strong></p><h5 id="匿名插槽"><a href="#匿名插槽" class="headerlink" title="匿名插槽"></a><strong>匿名插槽</strong></h5><p>子组件定义 slot 插槽，但并未具名，因此也可以说是默认插槽。只要在父元素中插入的内容，默认加入到这个插槽中去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;MBtn&apos;, &#123;</span><br><span class="line">    template: `</span><br><span class="line">    &lt;button&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">`</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const App = &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template: `</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;m-btn&gt;登录&lt;/m-btn&gt;</span><br><span class="line">        &lt;m-btn&gt;注册&lt;/m-btn&gt;</span><br><span class="line">        &lt;m-btn&gt;提交&lt;/m-btn&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">`,</span><br><span class="line">&#125;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    data: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        // 2.挂载子组件</span><br><span class="line">        App</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>默认内容</strong></p><p>有时为一个插槽设置具体的后备 (也就是默认的) 内容是很有用的，它只会在没有提供内容的时候被渲染。</p><p>我们可能希望这个 <code>&lt;button&gt;</code> 内绝大多数情况下都渲染文本“Submit”。为了将“Submit”作为后备内容，我们可以将它放在 <code>&lt;slot&gt;</code> 标签内：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在当我在一个父级组件中使用 <code>&lt;submit-button&gt;</code> 并且不提供任何插槽内容时，渲染结果如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">  Submit</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是如果我们提供内容，则这个提供的内容将会被渲染从而取代后备内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">submit-button</span>&gt;</span></span><br><span class="line">  Save</span><br><span class="line"><span class="tag">&lt;/<span class="name">submit-button</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h5><p>具名插槽可以出现在不同的地方，不限制出现的次数。只要匹配了 name 那么这些内容就会被插入到这个 name 的插槽中去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;MBtn&apos;,&#123;</span><br><span class="line">    template:`</span><br><span class="line">    &lt;button :class=&apos;type&apos; @click=&apos;clickHandle&apos;&gt;</span><br><span class="line">        &lt;slot name=&apos;register&apos;&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;slot name=&apos;login&apos;&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;slot name=&apos;submit&apos;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">`,</span><br><span class="line">    props:&#123;</span><br><span class="line">        type:&#123;</span><br><span class="line">            type: String,</span><br><span class="line">            defaultValue: &apos;default&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        clickHandle()&#123;</span><br><span class="line">            this.$emit(&apos;click&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const App = &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        handleClick()&#123;</span><br><span class="line">            alert(1);</span><br><span class="line">        &#125;,</span><br><span class="line">        handleClick2()&#123;</span><br><span class="line">            alert(2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template: `</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;MBtn type=&apos;default&apos; @click=&apos;handleClick&apos;&gt;</span><br><span class="line">&lt;template slot=&apos;register&apos;&gt;</span><br><span class="line">注册</span><br><span class="line">&lt;/template&gt;    </span><br><span class="line">&lt;/MBtn&gt;</span><br><span class="line">    &lt;MBtn type=&apos;success&apos; @click=&apos;handleClick2&apos;&gt;</span><br><span class="line">        &lt;template slot=&apos;login&apos;&gt;</span><br><span class="line">             登录</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/MBtn&gt;</span><br><span class="line">    &lt;MBtn type=&apos;danger&apos;&gt;</span><br><span class="line">    &lt;template slot=&apos;submit&apos;&gt;</span><br><span class="line">    提交</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;/MBtn&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">`,</span><br><span class="line">&#125;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    data: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        App</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>在2.6.0新版本使用v-slot指令：</strong></p><p>这是一个<code>&lt;base-layout&gt;</code>组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在向具名插槽提供内容的时候，我们可以在一个<code>&lt;template&gt;</code>元素上使用<code>v-slot</code>指令：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  /*默认插槽显示的内容*/</span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here's some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如上，template元素中的所有内容都将传入相应的插槽，任何没有被包裹在v-slot的template中的内容都会被视为默认插槽的内容。</p><p><strong>注意：<code>v-slot</code>只能添加在<code>&lt;template&gt;</code>上。</strong></p><p><strong>具名插槽的缩写</strong></p><p>跟 <code>v-on</code> 和 <code>v-bind</code> 一样，<code>v-slot</code> 也有缩写，即把参数之前的所有内容 (<code>v-slot:</code>) 替换为字符 <code>#</code>。例如 <code>v-slot:header</code> 可以被重写为 <code>#header</code>。</p><h5 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h5><p>例如，设想一个带有如下模板的 <code>&lt;current-user&gt;</code> 组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span>&#123;&#123; user.lastName &#125;&#125;<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可能想换掉备用内容，用名而非姓来显示。如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">current-user</span>&gt;</span></span><br><span class="line">  &#123;&#123; user.firstName &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然而上述代码不会正常工作，因为只有 <code>&lt;current-user&gt;</code> 组件可以访问到 <code>user</code> 而我们提供的内容是在父级渲染的。</p><p>解决办法：</p><p>为了让 <code>user</code> 在父级的插槽内容中可用，我们可以将 <code>user</code> 作为 <code>&lt;slot&gt;</code> 元素的一个 attribute 绑定上去：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-bind:user</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    &#123;&#123; user.lastName &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>绑定在 <code>&lt;slot&gt;</code> 元素上的 attribute 被称为<strong>插槽 prop</strong>。现在在父级作用域中，我们可以使用带值的 <code>v-slot</code> 来定义我们提供的插槽 prop 的名字：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">current-user</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">"slotProps"</span>&gt;</span></span><br><span class="line">    &#123;&#123; slotProps.user.firstName &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个例子中，我们选择将包含所有插槽 prop 的对象命名为 <code>slotProps</code>，但你也可以使用任意你喜欢的名字。</p><h4 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h4><p>有的时候，在不同的组件之间进行动态的切换是非常有用的，该内容可以通过 Vue 的 <code>&lt;component&gt;</code> 元素加一个特殊的 <code>is</code> attribute 来实现。</p><p><strong>组件的缓存</strong></p><p>我们之前曾经在一个多标签的界面中使用 <code>is</code> attribute 来切换不同的组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">"currentTabComponent"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>重新创建动态组件的行为通常是非常有用的，但是，在一些案例中，我们更希望那些标签的组件实例能够被它们第一次创建的时候缓存下来。为了解决这个问题，我们可以使用<code>&lt;keep-alive&gt;</code> 元素将其动态组件包裹起来。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 失活的组件将会被缓存！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">"currentTabComponent"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="边界处理情况"><a href="#边界处理情况" class="headerlink" title="边界处理情况"></a>边界处理情况</h4><p><a href="https://cn.vuejs.org/v2/guide/components-edge-cases.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/components-edge-cases.html</a></p><h4 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h4><p><a href="https://cn.vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/custom-directive.html</a></p><h3 id="vue过滤器"><a href="#vue过滤器" class="headerlink" title="vue过滤器"></a>vue过滤器</h3><p>moment.js这是一个js日期处理类库<a href="http://momentjs.cn/" target="_blank" rel="noopener">http://momentjs.cn/</a></p><h5 id="局部过滤器"><a href="#局部过滤器" class="headerlink" title="局部过滤器"></a>局部过滤器</h5><p>使用属性filters:{}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">template:</span><br><span class="line">            <span class="comment">//模板语法中使用过滤器&#123;&#123; 数据|filters里面定义的函数名 &#125;&#125;</span></span><br><span class="line">            <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">                我是一个App组件&#123;&#123; msg | myReserve &#125;&#125;  </span></span><br><span class="line"><span class="string">                &lt;h2&gt;&#123;&#123; time | myTime('YYYY-MM-DD') &#125;&#125;&lt;/h2&gt;  还可以传多个参数，调用方法的时候myTime(v1,v2,v3)</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">        <span class="comment">//定义局部过滤器</span></span><br><span class="line">        filters:&#123;</span><br><span class="line">            <span class="comment">//val参数就是传送过来的数据</span></span><br><span class="line">            myReserve:<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(val);</span><br><span class="line">                <span class="comment">//对数据过滤完之后，需要return</span></span><br><span class="line">                <span class="keyword">return</span> val.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//看h2标签里面怎么使用的，看传参方式。</span></span><br><span class="line">            myTime:<span class="function"><span class="keyword">function</span> (<span class="params">val,formatStr</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// return moment(val).format('YYYY-MM-DD') ;//通过我们引用的moment.js插件来出来日期格式显示，现在这是显示年-月-日的形式，其实这个日期格式是后端传给你的，让你生成什么格式的，你就生成什么格式的，所以我们把格式也做一个动态的</span></span><br><span class="line">                <span class="keyword">return</span> moment(val).format(formatStr) <span class="comment">//年-月-日的形式，其实这个日期格式是后端传给你的，让你生成什么格式的，你就生成什么格式的，所以我们把格式也做一个动态的</span></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h5 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">'myTime'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">val,formatStr</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> moment(val).format(formatStr)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件***"></a>单文件组件***</h3><p>在很多 Vue 项目中，我们使用 <code>Vue.component</code> 来定义全局组件，紧接着用 <code>new Vue({ el: &#39;#container &#39;})</code>在每个页面内指定一个容器元素。这种方式在很多中小规模的项目中运作的很好，在这些项目里 JavaScript 只被用来加强特定的视图。但当在更复杂的项目中，或者你的前端完全由 JavaScript 驱动的时候，下面这些缺点将变得非常明显：</p><ul><li><strong>全局定义 (Global definitions)</strong> 强制要求每个 component 中的命名不得重复</li><li><strong>字符串模板 (String templates)</strong> 缺乏语法高亮，在 HTML 有多行的时候，需要用到丑陋的 <code>\</code></li><li><strong>不支持 CSS (No CSS support)</strong> 意味着当 HTML 和 JavaScript 组件化时，CSS 明显被遗漏</li><li><strong>没有构建步骤 (No build step)</strong> 限制只能使用 HTML 和 ES5 JavaScript, 而不能使用预处理器，如 Pug (formerly Jade) 和 Babel</li></ul><p><strong>解决办法：</strong></p><p>文件扩展名为 <code>.vue</code> 的 <strong>single-file components(单文件组件)</strong> 为以上所有问题提供了解决方法，并且还可以使用 webpack 或 Browserify 等构建工具。</p><p>在现代 UI 开发中，我们已经发现相比于把代码库分离成三个大的层次并将其相互交织起来，把它们划分为松散耦合的组件再将其组合起来更合理一些。<strong>在一个组件里，其模板、逻辑和样式是内部耦合的，</strong>并且把他们搭配在一起实际上使得组件更加内聚且更可维护。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- my-component.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;This will be pre-compiled&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script src=&quot;./my-component.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;style src=&quot;./my-component.css&quot;&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="深入响应式原理"><a href="#深入响应式原理" class="headerlink" title="深入响应式原理"></a>深入响应式原理</h3><h4 id="如何追踪变化"><a href="#如何追踪变化" class="headerlink" title="如何追踪变化"></a>如何追踪变化</h4><p><img src="https://cn.vuejs.org/images/data.png" alt></p><p>首先，当你把一个普通的 JavaScript 对象传入 Vue 实例作为 <code>data</code> 选项，Vue 将遍历此对象所有的属性，并把这些属性全部转为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects#定义_getters_与_setters" target="_blank" rel="noopener">getter/setter</a>。</p><p>然后，这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue 能够追踪依赖，在属性被访问和修改时通知变更。</p><p>最后，每个组件实例都对应一个 <strong>watcher</strong> 实例，它会在组件渲染的过程中把“接触”过的数据属性记录为依赖。之后当依赖项的 setter 触发时，会通知 watcher，从而使它关联的组件重新渲染。</p><h4 id="声明响应式属性"><a href="#声明响应式属性" class="headerlink" title="声明响应式属性"></a>声明响应式属性</h4><p>由于 Vue 不允许动态添加根级响应式属性，所以你必须在初始化实例前声明所有根级响应式属性，哪怕只是一个空值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    <span class="comment">// 声明 message 为一个空值字符串</span></span><br><span class="line">    message: <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">'&lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 之后设置 `message`</span></span><br><span class="line">vm.message = <span class="string">'Hello!'</span></span><br></pre></td></tr></table></figure><p>如果你未在 <code>data</code> 选项中声明 <code>message</code>，Vue 将警告你渲染函数正在试图访问不存在的属性。</p><p>这样的限制在背后是有其技术原因的，它消除了在依赖项跟踪系统中的一类边界情况，也使 Vue 实例能更好地配合类型检查系统工作。但与此同时在代码可维护性方面也有一点重要的考虑：<code>data</code> 对象就像组件状态的结构 (schema)。提前声明所有的响应式属性，可以让组件代码在未来修改或给其他开发人员阅读时更易于理解。</p><h3 id="生命周期与钩子函数"><a href="#生命周期与钩子函数" class="headerlink" title="生命周期与钩子函数"></a>生命周期与钩子函数</h3><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程。<br>例如：从开始创建、初始化数据、编译模板、挂载Dom、数据变化时更新DOM、卸载等一系列过程。<br>我们称 <strong>这一系列的过程</strong> 就是Vue的生命周期。<br>通俗说就是Vue实例从创建到销毁的过程，就是生命周期。<br>同时在这个过程中也会运行一些叫做<strong>生命周期钩子</strong>的函数，这给了用户在不同阶段添加自己的代码的机会，利用各个钩子来完成我们的业务代码。</p><p><img src="http://9017499461.linshutu.top/vue2.png" alt="image-20190925160832887"></p><p>这里比较常用的钩子函数：</p><p>beforeCreate:创建组件完成之前可以做一些事情，比如有些场景或者某个页面打开之前，点击打开的时候但是没有运行起来可以展示一些动画效果等</p><p>created（<strong>**）：组件创建完成之后，但是dom中的数据还没有挂载上之前，就是说div标签还没有被vue对象获取到的时候，那么div标签中的数据还没有传入数据。</strong>一般在这个钩子函数里面发送ajax请求，去后台请求数据，并赋值给我们的data里面的数据属性。**</p><p>beforeMount：挂载之前，但是数据还没有挂载进去的时候触发的函数</p><p>mounted （****）：这个方法之后，真实的dom已经生成，我们就可以在这个方法里面通过js来操作搞事情了，但是vue的设计里面说一般都用数据驱动来完成我们的需求，很少使用dom操作，除了一些特殊的情况</p><p>beforeUpdate：更新数据属性的时候触发，但是还没有完成数据更改的时候</p><p>updated：数据更改完成之后触发</p><p>activated：如果用户频繁的点击创建和销毁dom，那么有损页面的性能，那么它的功能就是激活，这个方法和下面的这个方法都需要借助vue提供的一个内置的组件来完成搞事情，</p><p>deactivated：停止激活，也就是停用（注意激活和停用钩子函数，需要借助vue提供的内置组件<code>&lt;kepp-alive&gt;&lt;/keep-alive&gt;</code>,该组件里面的组件会被缓存起来，并且组件的状态也可以保留下来，即便是点击了小时的按钮，组件也并未消失 ，下次再点击的显示的时候，会直接从缓存中将它里面缓存的组件拿来i直接使用，并且保留原来组件的状态，这样就减少了dom的操作，提高了性能）</p><p>beforeDestroy：vue对象或者组件销毁的时候触发，但是还没有完成销毁的时候触发的函数，使用v-if就可以销毁，</p><p>destroyed：组件或者对象销毁之后触发的事情，一般用在定时的销毁上面，因为即便我们通过上面的v-if来销毁组件，但是我们的组件里面如果有定时器，这个定时器是不会销毁的，者就需要我们手动去销毁，但是这个顶hi其里面是播放的动画内容，就会消耗页面的性能</p><h5 id="beforCreate"><a href="#beforCreate" class="headerlink" title="beforCreate"></a>beforCreate</h5><p>实例初始化之后、创建实例之前的执行的钩子事件 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'Test'</span>,&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            msg:<span class="string">'小马哥'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template:<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;h3&gt;&#123;&#123;msg&#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">    beforeCreate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 组件创建之前</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$data);<span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>效果:</p><p><img src="http://9017499461.linshutu.top/vue3.png" alt="image-20190925162302131"></p><blockquote><p>创建实例之前，数据观察和事件配置都没好准备好。也就是数据也没有、DOM也没生成</p></blockquote><h5 id="created"><a href="#created" class="headerlink" title="created"></a>created</h5><p>实例创建完成后执行的钩子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'组件创建'</span>, <span class="keyword">this</span>.$data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果:</p><p><img src="http://9017499461.linshutu.top/vue4.png" alt="image-20190925162331402"></p><blockquote><p>实例创建完成后，我们能读取到数据data的值，但是DOM还没生成,可以在此时发起ajax</p></blockquote><h5 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a>beforeMount</h5><p>将编译完成的html挂载到对应的<strong>虚拟DOM</strong>时触发的钩子 此时页面并没有内容。 即此阶段解读为: 即将挂载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beforeMount()&#123;</span><br><span class="line">    <span class="comment">// 挂载数据到 DOM之前会调用</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'DOM挂载之前'</span>,<span class="built_in">document</span>.getElementById(<span class="string">'app'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果:</p><p><img src="http://9017499461.linshutu.top/vue5.png" alt="image-20190925162531926"></p><h5 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h5><p>编译好的html挂载到页面完成后所执行的事件钩子函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'DOM挂载完成'</span>,<span class="built_in">document</span>.getElementById(<span class="string">'app'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果:</p><p><img src="http://9017499461.linshutu.top/vue6.png" alt="image-20190925162930143"></p><h5 id="beforeUpdate和updated"><a href="#beforeUpdate和updated" class="headerlink" title="beforeUpdate和updated"></a>beforeUpdate和updated</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">beforeUpdate() &#123;</span><br><span class="line">    <span class="comment">// 在更新DOM之前 调用该钩子，应用：可以获取原始的DOM</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'DOM更新之前'</span>, <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>).innerHTML);</span><br><span class="line">&#125;,</span><br><span class="line">updated() &#123;</span><br><span class="line">    <span class="comment">// 在更新DOM之后调用该钩子，应用：可以获取最新的DOM</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'DOM更新完成'</span>, <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>).innerHTML);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果:</p><p><img src="http://9017499461.linshutu.top/vue7.png" alt="image-20190925163351309"></p><h5 id="beforeDestroy和destroyed"><a href="#beforeDestroy和destroyed" class="headerlink" title="beforeDestroy和destroyed"></a>beforeDestroy和destroyed</h5><p>当子组件在v-if的条件切换时,该组价处于创建和销毁的状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">beforeDestroy() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'beforeDestroy'</span>);</span><br><span class="line">&#125;,</span><br><span class="line">destroyed() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'destroyed'</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h5 id="activated和deactivated"><a href="#activated和deactivated" class="headerlink" title="activated和deactivated"></a>activated和deactivated</h5><p>当配合vue的内置组件<code>&lt;keep-alive&gt;</code>一起使用的时候,才会调用下面此方法</p><p><code>&lt;keep-alive&gt;</code>组件的作用它可以缓存当前组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">activated() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'组件被激活了'</span>);</span><br><span class="line">&#125;,</span><br><span class="line">deactivated() &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'组件被停用了'</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="vue全家桶"><a href="#vue全家桶" class="headerlink" title="vue全家桶"></a>vue全家桶</h3><h5 id="vue-vue-router-vuex"><a href="#vue-vue-router-vuex" class="headerlink" title="vue+vue-router+vuex"></a>vue+vue-router+vuex</h5><p>vue+vue-router主要是做单页面应用。</p><p>传统的路由跳转，如果后台的资源过多，就会导致前端页面出现白屏的现象，所以我们就希望前端来做路由，我们使用vue，可以再组件的钩子函数中请求发送对应的ajax请求，去获取对应的数据。</p><p>模块化编程的流程：</p><ul><li><p>导入Vue和VueRrouter，要调用Vue.use(VueRouter)</p></li><li><p>定义路由组件</p><ul><li><code>const Foo = { template:&#39;&lt;div&gt;foo&lt;/div&gt;&#39;}</code></li><li><code>const Bar = { template:&#39;&lt;div&gt;Bar&lt;/div&gt;&#39;}</code></li></ul></li><li><p>定义路由</p><ul><li>每个路由映射一个组件</li><li>const router = [{ path:’/foo’,component:Foo},{ path:’/bar’,component:Bar},]</li></ul></li><li><p>创建router实例，然后routes配置</p><ul><li>const router = newVueRouter({routes: routes})</li></ul></li><li><p>创建和挂载根实例</p><ul><li>const app = new vue({router}).$mount(‘#app’)</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="comment">//HTML5 的history模式，去掉那个路由里面自动加的#，你用我代码测试的时候，先不要加下面这个mode</span></span><br><span class="line">    mode:<span class="string">'history'</span>,<span class="comment">//但是这个history模式是必须要有服务端的(我们pycharm中自带服务器，这里服务器的意思就是一个socket服务端，帮你将文件发送给浏览器去渲染),将来公司的项目中都是这个模式的，因为公司有服务器啊，nginx什么的，这个模式下每个路径就没有#号了，直观好看，官网有解释，大家可以去看看，加#号其实是个hash模式的url</span></span><br><span class="line">    routes:[</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/'</span>, <span class="comment">//打开页面，默认访问的就是根路径，你打开这个网页就会发现自动跳转到了/home路径下</span></span><br><span class="line">            <span class="comment">// redirect:'/home' //如果没有做什么重定向，其实默认显示</span></span><br><span class="line">            redirect:<span class="string">'/home'</span> <span class="comment">//重定向，</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/home'</span>, <span class="comment">//首页</span></span><br><span class="line">            component:Home, <span class="comment">//路由对应的路由组件</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/course'</span>, <span class="comment">//首页</span></span><br><span class="line">            component:Course, <span class="comment">//路由对应的路由组件</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> App = &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template:</span><br><span class="line">        <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;div class="header"&gt;</span></span><br><span class="line"><span class="string">                &lt;router-link to="/home"&gt;首页&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">                &lt;router-link to="/course"&gt;免费课程&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;router-view&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'#app'</span>,</span><br><span class="line">    router,</span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template:<span class="string">`&lt;App /&gt;`</span>,</span><br><span class="line">    components:&#123;</span><br><span class="line">        App</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面的路由都是最low的，下面我们会学到更加高级的用法。</p><p>命名路由/动态路由</p><p>编程式导航，vue-router给我们提供了内置的属性：$route和$router,后者是指VueRouter路由对象，前者指的是路由信息对象</p><p>声明式导航，就是a标签里面的url直接渲染好了直接等我们使用</p><p>编程式导航就是以后我们通过任意标签进行页面跳转等操作，而不是单纯的使用router-link的方式去渲染 出来a标签的了</p><h3 id="脚手架vue-cli"><a href="#脚手架vue-cli" class="headerlink" title="脚手架vue-cli"></a>脚手架vue-cli</h3><p><a href="https://www.cnblogs.com/clschao/articles/10650862.html" target="_blank" rel="noopener">https://www.cnblogs.com/clschao/articles/10650862.html</a></p><p>安装node.js，npm，cnpm，全局配置，加环境变量，下vue，下vue-router，下vue-cli。创建vue项目vue init name，运行项目cnpm run dev，打包项目cnpm run build</p><p><img src="https://images2017.cnblogs.com/blog/1287619/201712/1287619-20171212151528301-530076803.png" alt></p><h3 id="获取原生的DOM"><a href="#获取原生的DOM" class="headerlink" title="获取原生的DOM"></a>获取原生的DOM</h3><p>之前我们获取dom通过的方式是原生js或者jq选择器来做的，现在我们使用vue来做这件事情。</p><p>使用的方法：通过给标签或者组件添加ref属性，然后使用this.$refs属性可以获取这个标签或者组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ref=<span class="string">"chao"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;p ref=<span class="string">"a"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;Home ref=<span class="string">"b"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Home</span>&gt;</span></span>  子组件</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">this</span>.$refs.chao  获取原始的DOM对象</span><br><span class="line">    <span class="keyword">this</span>.$refs.b     父组件中获取的是子组件实例化对象</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DIY脚手架"><a href="#DIY脚手架" class="headerlink" title="DIY脚手架"></a>DIY脚手架</h3><p>export和import：js在之前一直没有模块体系，这对于大型复杂的项目形成了巨大的障碍。</p><p>模块的功能主要是由两个命令构成：export和import。export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。</p><p>一个模块必须是一个独立的文件，该文件内部的变量外部是无法获取的，如果外部想要读取模块内部的某个变量，就必须使用export关键字输出该变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">export const myName = &quot;pl&quot;;</span><br><span class="line">export const age = 18;</span><br><span class="line"></span><br><span class="line">或者(推荐使用这种写法，这样写在文件的末尾可以一眼看出来)</span><br><span class="line">const myName = &quot;pl&quot;;</span><br><span class="line">const age = 18;</span><br><span class="line">export &#123;myName,age&#125;;</span><br><span class="line"></span><br><span class="line">也可以输出函数</span><br><span class="line">function v1() &#123; ... &#125;</span><br><span class="line">function v2() &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">export &#123;</span><br><span class="line">  v1 as streamV1,</span><br><span class="line">  v2 as streamV2,</span><br><span class="line">  v2 as streamLatestVersion</span><br><span class="line">&#125;; // as的作用是重命名的意思</span><br></pre></td></tr></table></figure><p>像上面定义的两个变量在文件的外部就直接可以使用了；export语句输出的接口，与其对应的值是动态绑定关系，就是说通过该接口，可以取到模块内部实时的值，export和import必须放在模块的顶层的任意位置，否则就会报错</p><p>import</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">导入</span><br><span class="line">import &#123;myName,age&#125; from &apos;./profile.js&apos;</span><br><span class="line">在导入的时候也是可以给变量取别名的，这个和python的语法是很相似的</span><br></pre></td></tr></table></figure><p>import命令具有命令提升的效果，会提升到整个模块的头部，首先执行</p><p>模块的整体加载</p><p>除了指定加载某个输出值，还可以整体加载，使用*指定一个对象，所有输出值都加载在这个对象上面</p><p>import * as xxx from ‘./profile.js’</p><p>export default命令</p><p>我们知道，我们加载对象里面的变量或者函数名的时候需要知道它的名字，否则我们不知道加载什么，这里我们就可以通过该命令，为模块指定默认输出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// export-default.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import-default.js</span></span><br><span class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">'./export-default'</span>;</span><br><span class="line">customName(); <span class="comment">// 'foo'</span></span><br></pre></td></tr></table></figure><p>export和import的组合使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;foo,bar&#125; <span class="keyword">from</span> <span class="string">'my_module'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以简单理解为</span></span><br><span class="line"><span class="keyword">import</span> &#123; foo, bar &#125; <span class="keyword">from</span> <span class="string">'my_module'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo, bar &#125;;</span><br></pre></td></tr></table></figure><p>上面的代码，相当于对外转发了两个接口，导致当前模块不能直接使用foo和bar</p><p>下面三种<code>import</code>语句，没有对应的复合写法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> someIdentifier <span class="keyword">from</span> <span class="string">"someModule"</span>;</span><br><span class="line"><span class="keyword">import</span> someIdentifier <span class="keyword">from</span> <span class="string">"someModule"</span>;</span><br><span class="line"><span class="keyword">import</span> someIdentifier, &#123; namedIdentifier &#125; <span class="keyword">from</span> <span class="string">"someModule"</span>;</span><br></pre></td></tr></table></figure><p> 　　　　　　为了做到形式的对称，现在有<a href="https://github.com/leebyron/ecmascript-export-default-from" target="_blank" rel="noopener">提案</a>，提出补上这三种复合写法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">as</span> someIdentifier <span class="keyword">from</span> <span class="string">"someModule"</span>;</span><br><span class="line"><span class="keyword">export</span> someIdentifier <span class="keyword">from</span> <span class="string">"someModule"</span>;</span><br><span class="line"><span class="keyword">export</span> someIdentifier, &#123; namedIdentifier &#125; <span class="keyword">from</span> <span class="string">"someModule"</span>;</span><br></pre></td></tr></table></figure><h3 id="vue-cli脚手架的使用"><a href="#vue-cli脚手架的使用" class="headerlink" title="vue-cli脚手架的使用"></a>vue-cli脚手架的使用</h3><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><p>cnpm install -g vue-cli</p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>vue init 模块名  项目名 》》vue init webpack my_project</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">模块：</span><br><span class="line">webpack：一个功能齐全的webpack+vue-loader设置，具有热重载，linting，测试和css提取的功能</span><br><span class="line">webpack-imple：一个简单的webpack+vue-loader设置，用于快速原型设计</span><br><span class="line">目前用的最多的就是上面的这两个，前一个的功能更加齐全，后面的简单一些</span><br></pre></td></tr></table></figure><h5 id="下载依赖"><a href="#下载依赖" class="headerlink" title="下载依赖"></a>下载依赖</h5><p>cnpm install</p><h5 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h5><p>npm run dev</p><h5 id="打包项目"><a href="#打包项目" class="headerlink" title="打包项目"></a>打包项目</h5><p>npm run build</p><p>创建的项目的几个文件夹的说明：</p><p>.babelrc很多浏览器不认识es6的代码，这个文件就是用来解析es6代码的</p><p>.editorconfig这个是我们当前的IDE的一些配置</p><p>.gitnore上传git的时候自动忽略其内部指定的文件</p><p>webpack.config.js文件的说明：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)  <span class="comment">//运入解析路径</span></span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="keyword">const</span> vueLoaderConfig = <span class="built_in">require</span>(<span class="string">'./vue-loader.conf'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span> (<span class="params">dir</span>) </span>&#123;<span class="comment">//__dirname是项目的绝对路径，resolve将他俩拼接了一下</span></span><br><span class="line">  <span class="keyword">return</span> path.join(__dirname, <span class="string">'..'</span>, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  context: path.resolve(__dirname, <span class="string">'../'</span>),</span><br><span class="line">  entry: &#123;  <span class="comment">//webpack打包时的入口文件，将来我们就先从这个文件开始玩咱们的项目</span></span><br><span class="line">    app: <span class="string">'./src/main.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;<span class="comment">//出口文件配置</span></span><br><span class="line">    path: config.build.assetsRoot,</span><br><span class="line">    filename: <span class="string">'[name].js'</span>,</span><br><span class="line">    publicPath: process.env.NODE_ENV === <span class="string">'production'</span></span><br><span class="line">      ? config.build.assetsPublicPath</span><br><span class="line">      : config.dev.assetsPublicPath</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span>,</span><br><span class="line">      <span class="string">'@'</span>: resolve(<span class="string">'src'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [<span class="comment">//可以写成loaders</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,  <span class="comment">//打包vue文件用的</span></span><br><span class="line">        loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">        options: vueLoaderConfig</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,  <span class="comment">//打包js文件用的</span></span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        include: [resolve(<span class="string">'src'</span>), resolve(<span class="string">'test'</span>), resolve(<span class="string">'node_modules/webpack-dev-server/client'</span>)]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,<span class="comment">//打包图片文件用的</span></span><br><span class="line">        loadaer: <span class="string">'url-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: <span class="number">10000</span>,</span><br><span class="line">          name: utils.assetsPath(<span class="string">'img/[name].[hash:7].[ext]'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/</span>,</span><br><span class="line">        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: <span class="number">10000</span>,</span><br><span class="line">          name: utils.assetsPath(<span class="string">'media/[name].[hash:7].[ext]'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(woff2?|eot|ttf|otf)(\?.*)?$/</span>,</span><br><span class="line">        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: <span class="number">10000</span>,</span><br><span class="line">          name: utils.assetsPath(<span class="string">'fonts/[name].[hash:7].[ext]'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  node: &#123;</span><br><span class="line">    <span class="comment">// prevent webpack from injecting useless setImmediate polyfill because Vue</span></span><br><span class="line">    <span class="comment">// source contains it (although only uses it if it's native).</span></span><br><span class="line">    setImmediate: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// prevent webpack from injecting mocks to Node native modules</span></span><br><span class="line">    <span class="comment">// that does not make sense for the client</span></span><br><span class="line">    dgram: <span class="string">'empty'</span>,</span><br><span class="line">    fs: <span class="string">'empty'</span>,</span><br><span class="line">    net: <span class="string">'empty'</span>,</span><br><span class="line">    tls: <span class="string">'empty'</span>,</span><br><span class="line">    child_process: <span class="string">'empty'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目的入口main.js文件:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>  <span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;, <span class="comment">//挂载App组件</span></span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span> </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>接着看咱们的App.vue文件的内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;img src=<span class="string">"./assets/logo.png"</span>&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'App'</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">#app &#123;</span></span><br><span class="line"><span class="regexp">  font-family: 'Avenir', Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="regexp">  -webkit-font-smoothing: antialiased;</span></span><br><span class="line"><span class="regexp">  -moz-osx-font-smoothing: grayscale;</span></span><br><span class="line"><span class="regexp">  text-align: center;</span></span><br><span class="line"><span class="regexp">  color: #2c3e50;</span></span><br><span class="line"><span class="regexp">  margin-top: 60px;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>现在我们正式我们的单页面应用</p><p>我们之前不是创建好了我们的项目了么。现在我们需要下载vue-router，我们的单页面需要它</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-router -S  <span class="comment">//-S的意思是下载到我们当前项目的依赖中，而不是全局，全局使用的是-g</span></span><br></pre></td></tr></table></figure><p>然后配置我们的路由，这个配置是在main.js文件里面操作的，单独放在一个文件里面，这样是方面将来我们的项目越做越大的时候我们方便处理，并且以后我们在开发的时候，只需要关注src文件夹里面的内容，所以路由和组件都放到src文件夹里面，我们看上面的图片就知道文件夹的作用</p><p>这里我么好就说这些文件和文件夹的作用，下面我们将使用webpack模块创建正式的项目，我们再去玩</p><h3 id="webpack创建项目的玩法"><a href="#webpack创建项目的玩法" class="headerlink" title="webpack创建项目的玩法"></a>webpack创建项目的玩法</h3><p>什么是webpack？它是一个现代的js应用程序的静态模块打包器，当webpack处理应用程序时，它会递归地构建一个依赖关系图，其中包含应用程序需要的每一个模块，然后将所有的这些模块打包层一个或多个bundle。vue-cli内部集成了wepack</p><p><img src="https://img2018.cnblogs.com/blog/988061/201904/988061-20190407192547454-1287752538.png" alt></p><p>webpack的四个核心概念：</p><p>入口：entry，入口起点知识webpack应该使用哪个模块，来作为其内部构建依赖图的开始，进入起点入口后，webpack会找到哪些模块和库是入口起点依赖的。（可以通过webpack配置中配置entry属性，来执行一个入口或者多个入口起点，默认值为./src）</p><p>出口：output，该属性告诉webpack在哪里输出它所创建的bundles，以及如何命名这些文件，默认值为./dist。基本上整个应用程序结构，都会编译到我们指定的输出路径的文件夹中。我们就是通过在配置中指定一个output字段来配置助理过程。</p><p>在webpack.dev.config.js文件下面编写内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="comment">//入口配置</span></span><br><span class="line">    entry:&#123;</span><br><span class="line">        <span class="string">'main'</span>:<span class="string">'./main.js'</span>  <span class="comment">//入口文件路径</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output:&#123;</span><br><span class="line">        <span class="string">'filename'</span>:<span class="string">'./bundle.js'</span>  <span class="comment">//出口文件名称和路径</span></span><br><span class="line">    &#125;，</span><br><span class="line">    <span class="comment">//监听，实时监听代码的变动，一旦代码改动了，自动进行打包，那么就不要我们手动执行npm run dev指令了</span></span><br><span class="line">    watch:<span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>loader：文件类型转换器,它让webpack能够处理那些非js文件，它可以将多有类型的文件转换为webpack能够处理的有效模块，然后我们利用webpack的打包能力，对它进行处理。webpack.dev.config.js里面的module里面的loaders就是我们的配置文件（这里面对图片、视频、音频、文件等进行定义 ）</p><p>插件：plugins，插件可以执行范围更广的任务，它包括从打包优化和压缩，一直到从新定义环境中的变量。我们想使用一个插件，只需要require()，然后把它添加到plugins数组中，多数插件可以通过选项option自定义，当然，我们也可以在一个配置文件中，因为不同目的而多次谁用同一个插件，这个时候通过使用new的方式创建它的一个实例。也是在web.dev.config.js里面配置的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入我们下载好的html文件的插件包</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="comment">//配置插件</span></span><br><span class="line">plugins:[</span><br><span class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line"><span class="comment">//插件的执行运行与元素索引有关</span></span><br><span class="line">template:<span class="string">'./index.html'</span>, <span class="comment">//参照物，也就是将来打包的时候，打包哪个html文件啊，要给他一个参照</span></span><br><span class="line">&#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我们将来进行组件化开发，写.vue结尾的文件组件的结构的内容是这个样子的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//组件的模板结构</span><br><span class="line">//template是个标签，通过它来编辑这个标签的内容，而我们下载的vue-loader是解析vue文件的</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;&#123; text &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">//组件的业务逻辑</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&apos;App&apos; //给这个组件起一个名字</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            text:&apos;hello Single file&apos;                </span><br><span class="line">        &#125;</span><br><span class="line">    //之前我们在组件里面都会写一个template的属性，现在不用写了，因为我们下载的工具自动会帮助我们创建一个template模板标签，我们在上面的直接使用就可以</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">//组件的样式</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body&#123;</span><br><span class="line">        background-color: green;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>在main.js里面我们之前是引入App.js，现在我们的文件改名字了，所以我们引入的地方也需要修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import App from &apos;./App.vue&apos;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">   el:&apos;#app&apos;,</span><br><span class="line">   data()&#123;</span><br><span class="line">       return&#123;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   template:</span><br><span class="line">       `</span><br><span class="line">       &lt;div&gt;</span><br><span class="line">            &lt;div&gt;我是Vue实例对象&lt;/div&gt;</span><br><span class="line">            &lt;App&gt;&lt;/App&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">       `,</span><br><span class="line">    components:&#123;</span><br><span class="line">       App,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>我们将来所写的组件没我们都可以放到这个src的文件夹下的一个叫做components的文件夹中</strong></p><p>做单页面应用会用到vue-router,我们之前使用的方式都是导入文件的形式来做的，但是以后我们就直接使用npm来进行这些模块的管理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install vue@2.5.16 vue-router -S</span><br><span class="line">//注意：下载的vue-router和vue的版本要求是一致的</span><br></pre></td></tr></table></figure><p>其实这些都是DIY的内容，很多东西，我们在创建项目工程的时候直接为我们做好了，所以我们就更加关注后面的内容吧</p><h5 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h5><p>vue init webpack webpack-project</p><p><img src="https://img2018.cnblogs.com/blog/988061/201904/988061-20190410152649867-1878951036.png" alt></p><h5 id="启动项目-1"><a href="#启动项目-1" class="headerlink" title="启动项目"></a>启动项目</h5><p>npm run dev</p><h5 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h5><p><img src="https://img2018.cnblogs.com/blog/988061/201904/988061-20190410162320739-222616468.png" alt></p><p>对于上面的文件夹，我们其实都可以不用管他们，我们只需要去专注玩我们的src文件夹里面的内容能就可以。</p><p>在src文件夹里面我们连main.js文件都不需要去管他，我们只需要在我们的src文件夹里面的App.vue组件写一写，然后把components文件下的组件写一写、分一分，然后把router文件夹下的index.js路由配置信息改一改就完事了</p><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'@/components/HelloWorld'</span></span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> Course <span class="keyword">from</span> <span class="string">'@/components/Course'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'@/components/Home'</span></span><br><span class="line"><span class="comment">//给vue添加vue-router功能，使用别人提供的功能都要Vue来use一下</span></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建路由对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="comment">//配置路由信息</span></span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      redirect:<span class="string">'./home'</span> <span class="comment">//直接跳转到Home名字对应的path路径上</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/home'</span>,</span><br><span class="line">      name: <span class="string">'Home'</span>,</span><br><span class="line">      component: Home</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path:<span class="string">'./course'</span>,</span><br><span class="line">      name:<span class="string">'Course'</span>,</span><br><span class="line">      component:Course</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-link :to=&quot;&#123;name:&apos;Home&apos;&#125;&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link :to=&quot;&#123;name:&apos;Course&apos;&#125;&quot;&gt;免费课程&lt;/router-link&gt;</span><br><span class="line">    &lt;!--组件出口--&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;App&apos;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: &apos;Avenir&apos;, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>Home.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        首页</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&apos;Home&apos;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="element-ui的使用，需实战"><a href="#element-ui的使用，需实战" class="headerlink" title="element-ui的使用，需实战***"></a>element-ui的使用，需实战***</h3><p>他是饿了么开发的一套前端的框架，类似bootstrap，但是它使协同vue进行开发的，它提供了很多vue能够直接下载使用的组件，组件里面封装好了html/css/js代码，我们直接拿来就可以会用</p><p>下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure><h3 id="axios的使用，需实战"><a href="#axios的使用，需实战" class="headerlink" title="axios的使用，需实战***"></a>axios的使用，需实战***</h3><p>解释：它是一个基于promise的HTTP库，可以在浏览器和node.js中，promise是es6里面的用法。</p><p>作用：</p><ul><li>从浏览器中创建XMLHttpRequests</li><li>从node.js创建http请求</li><li>支持PromiseAPI</li><li>拦截请求和响应</li><li>取消请求</li><li>自动转换JSON数据</li><li>客户端支持防御XSRF</li></ul><h5 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h5><p>方式一：使用npm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">安装：npm install axios -S</span><br></pre></td></tr></table></figure><p>方式二：使用cdn</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`&lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;`</span><br></pre></td></tr></table></figure><h5 id="axiosAPI"><a href="#axiosAPI" class="headerlink" title="axiosAPI"></a>axiosAPI</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">axios.request(config)</span><br><span class="line"><span class="comment">//获取数据</span></span><br><span class="line">axios.get(url[, config])  </span><br><span class="line"><span class="comment">//删除数据</span></span><br><span class="line">axios.delete(url[, config])</span><br><span class="line"></span><br><span class="line">axios.head(url[, config])</span><br><span class="line"><span class="comment">//提交数据（表单数据+文件上传）</span></span><br><span class="line">axios.post(url[, data[, config]])</span><br><span class="line"><span class="comment">//更新数据（所有数据推送到后端）</span></span><br><span class="line">axios.put(url[, data[, config]])</span><br><span class="line"><span class="comment">//更新数据（只将修改的数据推送到后端）</span></span><br><span class="line">axios.patch(url[, data[, config]])</span><br></pre></td></tr></table></figure><h5 id="执行get请求"><a href="#执行get请求" class="headerlink" title="执行get请求"></a>执行get请求</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'/user?ID=12345'</span>)</span><br><span class="line"><span class="comment">//数据请求成功</span></span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(response)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//数据请求失败</span></span><br><span class="line">.catch((<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br><span class="line">第二种方式</span><br><span class="line">axios.get(<span class="string">'/user'</span>,</span><br><span class="line">params:&#123;</span><br><span class="line">        ID:<span class="number">12345</span></span><br><span class="line">    &#125;</span><br><span class="line">)&#125;</span><br><span class="line"><span class="comment">//数据请求成功</span></span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(response)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//数据请求失败</span></span><br><span class="line">.catch((<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="执行post请求"><a href="#执行post请求" class="headerlink" title="执行post请求"></a>执行post请求</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">'/user'</span>, &#123;</span><br><span class="line">    firstName: <span class="string">'Fred'</span>,</span><br><span class="line">    lastName: <span class="string">'Flintstone'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h5 id="执行多个并发请求"><a href="#执行多个并发请求" class="headerlink" title="执行多个并发请求"></a>执行多个并发请求</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserAccount</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> axios.get(<span class="string">'/user/12345'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserPremissions</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> axios.get(<span class="string">'/user/12345/permissions'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.all([getUserAccount(),getUserPremissions()])</span><br><span class="line">.then(axios.spread(<span class="function"><span class="keyword">function</span>(<span class="params">acct,perms</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//两个请求现在都执行完成</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h5 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h5><p>axios.all(iterable)</p><p>axios.spread(callback)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// `url` 是用于请求的服务器 URL</span></span><br><span class="line">  url: <span class="string">'/user'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `method` 是创建请求时使用的方法</span></span><br><span class="line">  method: <span class="string">'get'</span>, <span class="comment">// 默认是 get</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span></span><br><span class="line">  <span class="comment">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span></span><br><span class="line">  baseURL: <span class="string">'https://some-domain.com/api/'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `transformRequest` 允许在向服务器发送前，修改请求数据</span></span><br><span class="line">  <span class="comment">// 只能用在 'PUT', 'POST' 和 'PATCH' 这几个请求方法</span></span><br><span class="line">  <span class="comment">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span></span><br><span class="line">  transformRequest: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对 data 进行任意转换处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class="line">  transformResponse: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对 data 进行任意转换处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `headers` 是即将被发送的自定义请求头</span></span><br><span class="line">  headers: &#123;<span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `params` 是即将与请求一起发送的 URL 参数</span></span><br><span class="line">  <span class="comment">// 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span></span><br><span class="line">  params: &#123;</span><br><span class="line">    ID: <span class="number">12345</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `paramsSerializer` 是一个负责 `params` 序列化的函数</span></span><br><span class="line">  <span class="comment">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class="line">  paramsSerializer: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Qs.stringify(params, &#123;<span class="attr">arrayFormat</span>: <span class="string">'brackets'</span>&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `data` 是作为请求主体被发送的数据</span></span><br><span class="line">  <span class="comment">// 只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'</span></span><br><span class="line">  <span class="comment">// 在没有设置 `transformRequest` 时，必须是以下类型之一：</span></span><br><span class="line">  <span class="comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class="line">  <span class="comment">// - 浏览器专属：FormData, File, Blob</span></span><br><span class="line">  <span class="comment">// - Node 专属： Stream</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Fred'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `timeout` 指定请求超时的毫秒数(0 表示无超时时间)</span></span><br><span class="line">  <span class="comment">// 如果请求话费了超过 `timeout` 的时间，请求将被中断</span></span><br><span class="line">  timeout: <span class="number">1000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `withCredentials` 表示跨域请求时是否需要使用凭证</span></span><br><span class="line">  withCredentials: <span class="literal">false</span>, <span class="comment">// 默认的</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `adapter` 允许自定义处理请求，以使测试更轻松</span></span><br><span class="line">  <span class="comment">// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span></span><br><span class="line">  adapter: <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `auth` 表示应该使用 HTTP 基础验证，并提供凭据</span></span><br><span class="line">  <span class="comment">// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头</span></span><br><span class="line">  auth: &#123;</span><br><span class="line">    username: <span class="string">'janedoe'</span>,</span><br><span class="line">    password: <span class="string">'s00pers3cret'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `responseType` 表示服务器响应的数据类型，可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'</span></span><br><span class="line">  responseType: <span class="string">'json'</span>, <span class="comment">// 默认的</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称</span></span><br><span class="line">  xsrfCookieName: <span class="string">'XSRF-TOKEN'</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `xsrfHeaderName` 是承载 xsrf token 的值的 HTTP 头的名称</span></span><br><span class="line">  xsrfHeaderName: <span class="string">'X-XSRF-TOKEN'</span>, <span class="comment">// 默认的</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `onUploadProgress` 允许为上传处理进度事件</span></span><br><span class="line">  onUploadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对原生进度事件的处理</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `onDownloadProgress` 允许为下载处理进度事件</span></span><br><span class="line">  onDownloadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对原生进度事件的处理</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `maxContentLength` 定义允许的响应内容的最大尺寸</span></span><br><span class="line">  maxContentLength: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte</span></span><br><span class="line">  validateStatus: <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">// 默认的</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目</span></span><br><span class="line">  <span class="comment">// 如果设置为0，将不会 follow 任何重定向</span></span><br><span class="line">  maxRedirects: <span class="number">5</span>, <span class="comment">// 默认的</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：</span></span><br><span class="line">  <span class="comment">// `keepAlive` 默认没有启用</span></span><br><span class="line">  httpAgent: <span class="keyword">new</span> http.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">  httpsAgent: <span class="keyword">new</span> https.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 'proxy' 定义代理服务器的主机名称和端口</span></span><br><span class="line">  <span class="comment">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span></span><br><span class="line">  <span class="comment">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span></span><br><span class="line">  proxy: &#123;</span><br><span class="line">    host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port: <span class="number">9000</span>,</span><br><span class="line">    auth: : &#123;</span><br><span class="line">      username: <span class="string">'mikeymike'</span>,</span><br><span class="line">      password: <span class="string">'rapunz3l'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `cancelToken` 指定用于取消请求的 cancel token</span></span><br><span class="line">  <span class="comment">// （查看后面的 Cancellation 这节了解更多）</span></span><br><span class="line">  cancelToken: <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> (<span class="params">cancel</span>) </span>&#123;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// `data` 由服务器提供的响应</span></span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `status` 来自服务器响应的 HTTP 状态码</span></span><br><span class="line">  status: <span class="number">200</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `statusText` 来自服务器响应的 HTTP 状态信息</span></span><br><span class="line">  statusText: <span class="string">'OK'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `headers` 服务器响应的头</span></span><br><span class="line">  headers: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `config` 是为请求提供的配置信息</span></span><br><span class="line">  config: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理响应</span></span><br><span class="line">axios.get(<span class="string">'/user/12345'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.data);</span><br><span class="line">    <span class="built_in">console</span>.log(response.status);</span><br><span class="line">    <span class="built_in">console</span>.log(response.statusText);</span><br><span class="line">    <span class="built_in">console</span>.log(response.headers);</span><br><span class="line">    <span class="built_in">console</span>.log(response.config);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>配置全局默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL = &apos;https://api.example.com&apos;;</span><br><span class="line">axios.defaults.headers.common[&apos;Authorization&apos;] = AUTH_TOKEN;</span><br><span class="line">axios.defaults.headers.post[&apos;Content-Type&apos;] = &apos;application/x-www-form-urlencoded&apos;;</span><br></pre></td></tr></table></figure><p>自定义实例默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 创建实例时设置配置的默认值</span><br><span class="line">var instance = axios.create(&#123;</span><br><span class="line">  baseURL: &apos;https://api.example.com&apos;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 在实例已创建后修改默认值</span><br><span class="line">instance.defaults.headers.common[&apos;Authorization&apos;] = AUTH_TOKEN;</span><br></pre></td></tr></table></figure><h5 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h5><p>在请求或响应被 <code>then</code> 或 <code>catch</code> 处理前拦截它们。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>移除拦截器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var myInterceptor = axios.interceptors.request.use(function () &#123;/*...*/&#125;);</span><br><span class="line">axios.interceptors.request.eject(myInterceptor);</span><br></pre></td></tr></table></figure><h5 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'/user/12345'</span>)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error.response) &#123;</span><br><span class="line">      <span class="comment">// 请求已发出，但服务器响应的状态码不在 2xx 范围内</span></span><br><span class="line">      <span class="built_in">console</span>.log(error.response.data);</span><br><span class="line">      <span class="built_in">console</span>.log(error.response.status);</span><br><span class="line">      <span class="built_in">console</span>.log(error.response.headers);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Something happened in setting up the request that triggered an Error</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Error'</span>, error.message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(error.config);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h5 id="取消请求cancel-token"><a href="#取消请求cancel-token" class="headerlink" title="取消请求cancel token"></a>取消请求cancel token</h5><p>频繁切换页面的时候，那些未完成数加载的页面还会在一定的时间内请求数据，这样会极大影响页面的性能，我们在页面切换的时候使用取消请求的方式解决</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'Hello Axios!'</span>,</span><br><span class="line">    source: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sendRequest () &#123;</span><br><span class="line">      <span class="keyword">this</span>.source = <span class="keyword">this</span>.axios.CancelToken.source(); <span class="comment">// 这里初始化source对象</span></span><br><span class="line">      <span class="keyword">this</span>.axios.get(url, &#123;</span><br><span class="line">        cancelToken: <span class="keyword">this</span>.source.token <span class="comment">// 这里声明的cancelToken其实相当于是一个标记，</span></span><br><span class="line">        <span class="comment">// 当我们要取消请求的时候，可以通过这个找到该请求</span></span><br><span class="line">      &#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 你的逻辑</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 如果调用了cancel方法，那么这里的res就是cancel传入的信息</span></span><br><span class="line">          <span class="comment">// 你的逻辑</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    cancel () &#123;</span><br><span class="line">      <span class="keyword">this</span>.source.cancel(<span class="string">'这里你可以输出一些信息，可以在catch中拿到'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="全局的axios默认值"><a href="#全局的axios默认值" class="headerlink" title="全局的axios默认值"></a>全局的axios默认值</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`axios.defaults.baseURL = 'https://api.example.com';axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';`</span></span><br></pre></td></tr></table></figure><h5 id="实战应用"><a href="#实战应用" class="headerlink" title="实战应用***"></a>实战应用***</h5><p>分三步走：</p><p>第一步：IE兼容性处理（这一步我先不做了）</p><p>第二步：封装、配置axios</p><p>第三步：把它挂到vue的prototype上（这样做是使用this的时候直接可以找到API，不需要每个文件都引入了）</p><h6 id="封装axios"><a href="#封装axios" class="headerlink" title="封装axios"></a>封装axios</h6><p>建议在src下新建一个文件夹api来存放接口相关的文件和配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├── api</span><br><span class="line">    ├── unsplash</span><br><span class="line">        ├── index.js</span><br><span class="line">        └── urls.js</span><br><span class="line">    ├── apiList.js</span><br><span class="line">    ├── axios.js</span><br><span class="line">    ├── index.js</span><br><span class="line">    └── install.js</span><br></pre></td></tr></table></figure><p>axios.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> browser <span class="keyword">from</span> <span class="string">'../common/browser'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 axios 实例</span></span><br><span class="line"><span class="keyword">let</span> http = axios.create(&#123;</span><br><span class="line">  timeout: <span class="number">60000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 post、put 默认 Content-Type</span></span><br><span class="line">http.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/json'</span></span><br><span class="line">http.defaults.headers.put[<span class="string">'Content-Type'</span>] = <span class="string">'application/json'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建统一封装过的 axios 实例</span></span><br><span class="line"><span class="comment"> * @return &#123;AxiosInstance&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> http</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="封装请求方法"><a href="#封装请求方法" class="headerlink" title="封装请求方法"></a>封装请求方法</h6><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'./axios'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> instance = axios()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="keyword">get</span> (url, params, headers) &#123;</span><br><span class="line">    <span class="keyword">let</span> options = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> (params) &#123;</span><br><span class="line">      options.params = params</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (headers) &#123;</span><br><span class="line">      options.headers = headers</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance.get(url, options)</span><br><span class="line">  &#125;,</span><br><span class="line">  post (url, params, headers) &#123;</span><br><span class="line">    <span class="keyword">let</span> options = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> (headers) &#123;</span><br><span class="line">      options.headers = headers</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance.post(url, params, options)</span><br><span class="line">  &#125;,</span><br><span class="line">  put  (url, params, headers) &#123;</span><br><span class="line">    <span class="keyword">let</span> options = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> (headers) &#123;</span><br><span class="line">      options.headers = headers</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance.put(url, params, options)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">delete</span> (url, params, headers) &#123;</span><br><span class="line">    <span class="keyword">let</span> options = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> (params) &#123;</span><br><span class="line">      options.params = params</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (headers) &#123;</span><br><span class="line">      options.headers = headers</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance.delete(url, options)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="模块划分"><a href="#模块划分" class="headerlink" title="模块划分"></a>模块划分</h6><p>接下来我们把接口的URL和调用方法也写在这个文件夹里，建议按模块划分文件夹。</p><p>unsplash/url.js</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> baseUrl = <span class="string">'https://api.unsplash.com'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 图片列表</span></span><br><span class="line">  photos: baseUrl + <span class="string">'/photos'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import api <span class="keyword">from</span> <span class="string">'../index'</span></span><br><span class="line">import urls <span class="keyword">from</span> <span class="string">'./urls'</span></span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> &#123;</span><br><span class="line">  viewPhotos (<span class="keyword">params</span>) &#123;</span><br><span class="line">    <span class="comment">// return出去了一个promise</span></span><br><span class="line">    <span class="keyword">return</span> api.<span class="keyword">get</span>(urls.photos, <span class="keyword">params</span>, header)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="模块整合"><a href="#模块整合" class="headerlink" title="模块整合"></a>模块整合</h6><p>apiList.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有多少import多少</span></span><br><span class="line"><span class="keyword">import</span> unsplash <span class="keyword">from</span> <span class="string">'./unsplash'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  unsplash</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="挂载Vue的prototype"><a href="#挂载Vue的prototype" class="headerlink" title="挂载Vue的prototype"></a>挂载Vue的prototype</h6><p>install.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入模块</span></span><br><span class="line"><span class="keyword">import</span> apiList <span class="keyword">from</span> <span class="string">'./apiList'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (install.installed) <span class="keyword">return</span></span><br><span class="line">  install.installed = <span class="literal">true</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperties(Vue.prototype, &#123;</span><br><span class="line">    $api: &#123;</span><br><span class="line">      <span class="keyword">get</span> () &#123;</span><br><span class="line">        <span class="keyword">return</span> apiList</span><br><span class="line">      &#125;,</span><br><span class="line">      enumerable: <span class="literal">false</span>, <span class="comment">// 不可枚举</span></span><br><span class="line">      configurable: <span class="literal">false</span> <span class="comment">// 不可重写</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  install</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h6><p>main.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'babel-polyfill'</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">'./api/install'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"></span><br><span class="line">Vue.use(api)</span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span>,</span><br><span class="line">  components: &#123; App &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"waterfall"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'waterfall'</span>,</span></span><br><span class="line">    data () &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        photosList: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created () &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.getPhotos()</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mounted () &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// async await 是ES7新特性，本质上是generator函数的语法糖</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">async</span> getPhotos () &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 这里用try catch包裹，请求失败的时候就执行catch里的</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> params = &#123;</span></span><br><span class="line">            page: 1,</span><br><span class="line">            per_page: 1,</span><br><span class="line"><span class="javascript">            order_by: <span class="string">'latest'</span></span></span><br><span class="line">          &#125;</span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.$api.unsplash.viewPhotos(params)</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.photosList = res</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(res)</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(e)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="vuex使用，需实战"><a href="#vuex使用，需实战" class="headerlink" title="vuex使用，需实战***"></a>vuex使用，需实战***</h3><p>解释：Vuex是一个专为Vue.js应用程序开发的状态管理模式。它采用集中储存管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><p>上面的都是屁话，简单的说vuex就是一个临时数据仓库，能够帮助我们保存各个组件中的数据，也就是每个组件都能使用这个仓库里面的数据，只要哦修改了数据仓库里面的数据，使用了仓库中这个数据的组件中的这个数据都会跟着发生变化，非常适合各组件的<strong>传值</strong>，之前我们的父子和平行传值比较麻烦，这个vuex帮助我们做了一个更加方方便的数据仓库来实现组件传值和各组间之间数据的共享，<strong>一般对于小型项目使用比较合适，但是对于大型的项目还是使用组件传值的方式，因为这个仓库对于大型项目来讲，比较笨重，共享数据如果太大的话也会对页面性能有所影响</strong></p><p><img src="https://img2018.cnblogs.com/blog/988061/201904/988061-20190411223636717-1074100950.png" alt></p><h5 id="五大特征"><a href="#五大特征" class="headerlink" title="五大特征"></a>五大特征</h5><p>state：状态</p><p>mutations：更改Vuex的stroe（仓库）中的状态的唯一方法是提交mutation。它非常类似于事件，它都有宇哥字符串的事件类型和一个回调函数，这个回调函数就是我们实际进行状态更改的地方，并且它会接收state作为第一个参数，但是所有修改数据的操作通过它都是串行操作，目的就是为了保证数据安全。</p><p>actions：类似于mutations，不同的是Action提交的是mutation，也就是提交的是mutations里面的函数，而不是直接变更状态，Action可以包含任意异步操作。1.操作数据–&gt; commit –&gt;mutations(同步)     2.操作数据–&gt; dispatch –&gt;actions(异步)–&gt; commit –&gt;mutations(同步)，如果将异步任务直接交给mutations，就会出现数据混乱不可靠的问题。</p><p>getters：相当于stroe的计算属性（不重要）</p><p>modules：模块（不重要）</p><p><img src="https://img2018.cnblogs.com/blog/988061/201904/988061-20190412095258124-1107156669.png" alt></p><p>安装</p><p>cnpm install vuex -S</p><p>由于vuex这个仓库多有组件都要使用，所以我们需要将她挂载到我们的全局vue实例里面，vue实例是在我们的main.js里面引入创建的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入Vue</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="comment">//引入路由</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="comment">//引入element-ui</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class="line">Vue.use(ElementUI)</span><br><span class="line"><span class="comment">//引入axios</span></span><br><span class="line"><span class="keyword">import</span> Axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="comment">//Axios.defaults.baseURL = 'https://www.luffycity.com/api/v1/';</span></span><br><span class="line"><span class="comment">//引入vuex</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vuex实例</span></span><br><span class="line"><span class="keyword">const</span> stroe = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="comment">//这里面使用vuex的五大悍将</span></span><br><span class="line">  state:&#123;</span><br><span class="line">    num:<span class="number">1</span> <span class="comment">//state状态num=1，也就是有个共享数据num=1，组件中使用它</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations:&#123;</span><br><span class="line">    <span class="comment">//它里面的函数的第一个参数及时上面的state属性，其他的参数是调用这个函数时传递的值</span></span><br><span class="line">    setNum(state,val)&#123;</span><br><span class="line">      state.num += val;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  actions:&#123;</span><br><span class="line">    <span class="comment">//此时还没有用到actions异步提交仓库的一些数据的任务</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Vue.prototype.$http = Axios;</span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  stroe, <span class="comment">//必须将创建的vuex.Stroe对象挂载到vue实例中，就相当于给我们的vue对象添加了一个$stroe属性，将来组件中使用this.$stroe就能调用这个对象，this虽然是组件对象，但是组件对象相当于继承了vue对象，和this.$router的用法是相似的</span></span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>同步传值</p><p>异步传值（以后操作都使用异步操作，同步的也可以使用异步的）</p><p>通过脚手架的webpack模块创建完项目之后，下面这几个必须要有，没有的自己npm安装一下：</p><p><img src="https://img2018.cnblogs.com/blog/988061/201904/988061-20190412213633259-1726630323.png" alt></p><h3 id="vue操作cookie"><a href="#vue操作cookie" class="headerlink" title="vue操作cookie"></a>vue操作cookie</h3><h5 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h5><p>cnpm install vue-cookies  -S</p><h5 id="引入并安装"><a href="#引入并安装" class="headerlink" title="引入并安装"></a>引入并安装</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入cookie</span></span><br><span class="line"><span class="keyword">import</span> VueCookies <span class="keyword">from</span> <span class="string">'vue-cookies'</span></span><br><span class="line">Vue.use(VueCookies)</span><br></pre></td></tr></table></figure><h5 id="操作cookie"><a href="#操作cookie" class="headerlink" title="操作cookie"></a>操作cookie</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置cookie</span></span><br><span class="line"><span class="keyword">this</span>.$cookies.set(<span class="string">'keyName'</span>,value[,...])</span><br><span class="line"><span class="comment">//获取cookie</span></span><br><span class="line"><span class="keyword">this</span>.$cookies.get(keyName)</span><br><span class="line"><span class="comment">//删除cookie</span></span><br><span class="line"><span class="keyword">this</span>.$cookies.remove(keyName,[,...])</span><br><span class="line"><span class="comment">//判断cookie是否存在</span></span><br><span class="line"><span class="keyword">this</span>.$cookies.isKey(keyName)</span><br><span class="line"><span class="comment">//获取cookie名字</span></span><br><span class="line"><span class="keyword">this</span>.$cookies.keys()</span><br></pre></td></tr></table></figure><p>注意：cookies关键名称不能设置为expirse/max_age/path/domain/secure</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>require和import加载的区别？</p><p>import是和python的加载时一样的。require相当于module.exports的传送门，module.exports后面的结果是什么require的结果就是什么。</p><p>说的简单一点就是可以将任何内容直接引入并实现赋值。</p><p>优点：实现js文件的异步加载，避免页面失去响应；管理模块之间的依赖性，便于代码的编写和维护。（加载的内容可以是对象、数字、字符串、函数…）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">require(&apos;./a&apos;)(); // a模块是一个函数，立即执行a模块函数</span><br><span class="line"></span><br><span class="line">var data = require(&apos;./a&apos;).data; // a模块导出的是一个对象</span><br><span class="line"></span><br><span class="line">var a = require(&apos;./a&apos;)[0]; // a模块导出的是一个数组</span><br></pre></td></tr></table></figure><p>在理解上，require是赋值过程，import是结构过程，他们是完全不同的两个概念。</p><p>总结：常用API</p><h4 id="全局配置（3）"><a href="#全局配置（3）" class="headerlink" title="全局配置（3）"></a>全局配置（3）</h4><p>Vue.config是一个对象，包含Vue的全局配置。在main.js文件里面配置。</p><ul><li><p>silent</p><ul><li>默认值：false</li><li>用法：Vue.config.silent=true</li><li>功能：取消Vue所有的日志与警告</li></ul></li><li><p>devtools</p><ul><li>默认值：true</li><li>用法：Vue.config.devtools=false</li><li>功能：配置是否允许vue-devtools检查代码。开发版本默认是true，生产版本默认是false</li></ul></li><li><p>keyCodes</p><ul><li><p>默认值：{}</p></li><li><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.keyCodes = &#123;</span><br><span class="line">v:86,</span><br><span class="line">f:222,</span><br><span class="line">up:[38,87]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; @keyup.media-play-pause=&quot;method&quot;&gt;</span><br></pre></td></tr></table></figure></li><li><p>功能：给<code>v-on</code>自定义键位别名</p></li></ul></li></ul><h4 id="全局API（10）"><a href="#全局API（10）" class="headerlink" title="全局API（10）"></a>全局API（10）</h4><ul><li><p>Vue.extend(options)</p><ul><li><p>用法：Vue.extend()中必须是函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;mount-point&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// 创建构造器</span><br><span class="line">var Profile = Vue.extend(&#123;</span><br><span class="line">  template: &apos;&lt;p&gt;&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125; aka &#123;&#123;alias&#125;&#125;&lt;/p&gt;&apos;,</span><br><span class="line">  data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      firstName: &apos;Walter&apos;,</span><br><span class="line">      lastName: &apos;White&apos;,</span><br><span class="line">      alias: &apos;Heisenberg&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 创建 Profile 实例，并挂载到一个元素上。</span><br><span class="line">new Profile().$mount(&apos;#mount-point&apos;)</span><br><span class="line"></span><br><span class="line">&lt;p&gt;Walter White aka Heisenberg&lt;/p&gt;</span><br></pre></td></tr></table></figure></li><li><p>所属：组件</p></li></ul></li><li><p>Vue.nextTick([callback,context])：更新队列</p></li><li><p>Vue.set(对象、数组、字符串、数字)</p><ul><li><p>返回值：设置的值</p></li><li><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vue.set（this.myObject.newProperty = &apos;hi&apos;）</span><br><span class="line">//注意，对象不能是Vue实例，或者Vue实例的根数据对象。</span><br></pre></td></tr></table></figure></li><li><p>功能：向响应式对象中添加一个属性，并保证这个新属性是响应式的，且触发视图更新。它必须用于向响应式对象上添加新属性。</p></li><li><p>所属：深入响应式原理</p></li></ul></li><li><p>Vue.delete(对象、数组、字符串、数字)</p><ul><li>功能：删除对象的属性，如果对象是响应式的，确保删除能触发更新视图，用的少。</li><li>所属：深入响应式原理</li></ul></li><li><p>Vue.directive(id,[defintion])</p><ul><li><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 注册</span><br><span class="line">Vue.directive(&apos;my-directive&apos;, &#123;</span><br><span class="line">  bind: function () &#123;&#125;,</span><br><span class="line">  inserted: function () &#123;&#125;,</span><br><span class="line">  update: function () &#123;&#125;,</span><br><span class="line">  componentUpdated: function () &#123;&#125;,</span><br><span class="line">  unbind: function () &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 注册 (指令函数)</span><br><span class="line">Vue.directive(&apos;my-directive&apos;, function () &#123;</span><br><span class="line">  // 这里将会被 `bind` 和 `update` 调用</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// getter，返回已注册的指令</span><br><span class="line">var myDirective = Vue.directive(&apos;my-directive&apos;)</span><br></pre></td></tr></table></figure></li><li><p>所属：自定义指令</p></li></ul></li><li><p>Vue.filter(id,[definition])</p><ul><li><p>用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 注册</span><br><span class="line">Vue.filter(&apos;my-filter&apos;, function (value) &#123;</span><br><span class="line">  // 返回处理后的值</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// getter，返回已注册的过滤器</span><br><span class="line">var myFilter = Vue.filter(&apos;my-filter&apos;)</span><br></pre></td></tr></table></figure></li><li><p>所属：过滤器</p></li></ul></li><li><p>Vue.component(id,[definition])</p><ul><li><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 注册组件，传入一个扩展过的构造器</span><br><span class="line">Vue.component(&apos;my-component&apos;, Vue.extend(&#123; /* ... */ &#125;))</span><br><span class="line"></span><br><span class="line">// 注册组件，传入一个选项对象 (自动调用 Vue.extend)</span><br><span class="line">Vue.component(&apos;my-component&apos;, &#123; /* ... */ &#125;)</span><br><span class="line"></span><br><span class="line">// 获取注册的组件 (始终返回构造器)</span><br><span class="line">var MyComponent = Vue.component(&apos;my-component&apos;)</span><br></pre></td></tr></table></figure></li><li><p>功能：注册或获取全局组件</p></li><li><p>所属：组件</p></li></ul></li><li><p>Vue.use(plugin)</p><ul><li>功能：安装Vue.js插件。</li><li>所属：插件</li></ul></li><li><p>Vue.compile(template)</p><ul><li>功能：将一个模板字符串编译成render函数</li><li>所属：渲染函数</li></ul></li><li><p>Vue.version</p><ul><li><p>功能：提供字符串形式的Vue安装版本号。</p></li><li><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var version = Number(Vue.version.split(&apos;.&apos;)[0])</span><br><span class="line"></span><br><span class="line">if (version === 2) &#123;</span><br><span class="line">  // Vue v2.x.x</span><br><span class="line">&#125; else if (version === 1) &#123;</span><br><span class="line">  // Vue v1.x.x</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  // Unsupported versions of Vue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="选项和数据（6）"><a href="#选项和数据（6）" class="headerlink" title="选项和数据（6）"></a>选项和数据（6）</h4><ul><li><p>data</p><ul><li><p>类型：object|function</p></li><li><p>限制：组件的定义只接收function</p></li><li><p>功能：Vue实例的数据对象，Vue将会递归将data的属性转换成getter/setter，从而让data的属性能够响应数据变化。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="comment">//创建一个实例</span></span><br><span class="line"><span class="keyword">var</span> data = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">data:data</span><br><span class="line">&#125;)</span><br><span class="line">vm.a</span><br><span class="line">:<span class="number">1</span></span><br><span class="line">vm.$data === data</span><br><span class="line">:<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Vue.extend里面的data必须是函数</span></span><br><span class="line"><span class="keyword">var</span> Component = Vue.extend(&#123;</span><br><span class="line">    data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>特殊：如果data属性使用了箭头函数，则this不会指向这个组件的实例，不过我们仍然可以将其实例作为函数的第一个参数来访问。<code>data:vm =&gt; ({a:vm.myProp})</code></p></li></ul></li><li><p>props</p><ul><li><p>类型：Array|Object</p></li><li><p>props可以是数组或者对象，用于接收来自父组件的数据。props可以是简单的数组或者对象。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单语法</span></span><br><span class="line">Vue.component(<span class="string">'props-demo-simple'</span>, &#123;</span><br><span class="line">  props: [<span class="string">'size'</span>, <span class="string">'myMessage'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//完整语法</span></span><br><span class="line">Vue.component(<span class="string">'props-demo-advanced'</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 检测类型</span></span><br><span class="line">    height: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 检测类型 + 其他验证</span></span><br><span class="line">    age: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">0</span>,</span><br><span class="line">      required: <span class="literal">true</span>,</span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value &gt;= <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//参数解释：</span></span><br><span class="line">type：数组或对象（基本涵盖所有的数据类型）</span><br><span class="line"><span class="keyword">default</span>：微为该prop指定一个默认值，如果prop没有传入就直接使用这个默认值</span><br><span class="line">required：定义该prop是否是必填项。（<span class="literal">true</span>表示是必须传入）</span><br><span class="line">validator：自定义验证函数将该prop的值作为唯一的参数带入，在生产环境中一旦验证错误就会抛出警告。</span><br></pre></td></tr></table></figure></li></ul></li><li><p>propsData</p><ul><li><p>类型：字典</p></li><li><p>限制：只用于new创建的实例中</p></li><li><p>功能：创建实例时传递props，主要作用是方便测试。</p></li><li><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var Comp = Vue.extend(&#123;</span><br><span class="line">  props: [&apos;msg&apos;],</span><br><span class="line">  template: &apos;&lt;div&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;&apos;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var vm = new Comp(&#123;</span><br><span class="line">  propsData: &#123;</span><br><span class="line">    msg: &apos;hello&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>computed</p><ul><li><p>功能：计算属性将被混入到Vue实例中，所有getter和setter的this上下文自动绑定为Vue实例。计算属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。</p></li><li><p>用法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="comment">// 仅读取</span></span><br><span class="line">    aDouble: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.a * <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 读取和设置</span></span><br><span class="line">    aPlus: &#123;</span><br><span class="line">      <span class="keyword">get</span>: function () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">set</span>: function (v) &#123;</span><br><span class="line">        <span class="keyword">this</span>.a = v - <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.aPlus   <span class="comment">// =&gt; 2</span></span><br><span class="line">vm.aPlus = <span class="number">3</span></span><br><span class="line">vm.a       <span class="comment">// =&gt; 2</span></span><br><span class="line">vm.aDouble <span class="comment">// =&gt; 4</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>methods</p><ul><li><p>功能：methods将被混入到Vue实例中。可以直接通过vm实例访问这些方法，或者在指令表达式中使用，方法中的this自动绑定Vue实例。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    plus: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.a++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.plus()</span><br><span class="line">vm.a <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>watch</p><ul><li><p>功能：一个对象，键是需要观察表达式，值是对应回调函数。Vue实例将会在实例化时调用<code>$watch()</code>，遍历watch对象的每一个属性。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span>,</span><br><span class="line">    d: <span class="number">4</span>,</span><br><span class="line">    e: &#123;</span><br><span class="line">      f: &#123;</span><br><span class="line">        g: <span class="number">5</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    a: <span class="function"><span class="keyword">function</span> (<span class="params">val, oldVal</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'new: %s, old: %s'</span>, val, oldVal)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 方法名</span></span><br><span class="line">    b: <span class="string">'someMethod'</span>,</span><br><span class="line">    <span class="comment">// 该回调会在任何被侦听的对象的 property 改变时被调用，不论其被嵌套多深</span></span><br><span class="line">    c: &#123;</span><br><span class="line">      handler: <span class="function"><span class="keyword">function</span> (<span class="params">val, oldVal</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">      deep: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 该回调将会在侦听开始之后被立即调用</span></span><br><span class="line">    d: &#123;</span><br><span class="line">      handler: <span class="string">'someMethod'</span>,</span><br><span class="line">      immediate: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    e: [</span><br><span class="line">      <span class="string">'handle1'</span>,</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">handle2</span> (<span class="params">val, oldVal</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        handler: <span class="function"><span class="keyword">function</span> <span class="title">handle3</span> (<span class="params">val, oldVal</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">        <span class="comment">/* ... */</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// watch vm.e.f's value: &#123;g: 5&#125;</span></span><br><span class="line">    <span class="string">'e.f'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">val, oldVal</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.a = <span class="number">2</span> <span class="comment">// =&gt; new: 2, old: 1</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="选项和DOM（4）"><a href="#选项和DOM（4）" class="headerlink" title="选项和DOM（4）"></a>选项和DOM（4）</h4><ul><li><p>el</p><ul><li>类型：字符串或者Element</li><li>限制：只在创建实例时生效</li><li>功能：提供一个在页面上已存在的DOM元素作为Vue实例的挂载目标</li></ul></li><li><p>template</p><ul><li>类型：字符串</li><li>功能：一个字符串模板作为Vue实例的标识使用，模板将会替换挂载的元素。挂载元素的内容都将被忽略，除非模板的内容有分发插槽。</li></ul></li><li><p>render</p><ul><li>功能：字符串模板的代替方案，允许我们发挥js最大的编程能力。Vue选项中的render函数若存在，则Vue构造函数不会从template选项或者el选项指定的挂载元素中提取出的HTML模板编译渲染函数。</li></ul></li><li><p>renderError</p><ul><li><p>功能：只在开发者环境下工作。当render函数遭遇错误时，提供另外一种渲染输出，其错误将会作为第二个参数传递到renderError。这个功能配合hot-reload非常实用。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render (h) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'oops'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  renderError (h, err) &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">'pre'</span>, &#123; <span class="attr">style</span>: &#123; <span class="attr">color</span>: <span class="string">'red'</span> &#125;&#125;, err.stack)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="选项和生命周期钩子（11）"><a href="#选项和生命周期钩子（11）" class="headerlink" title="选项和生命周期钩子（11）"></a>选项和生命周期钩子（11）</h4><p>所有的生命周期钩子自动绑定this上下文到实例中，因此我们可以访问数据，对属性和方法进行运算。</p><ul><li>beforeCreate：在实例化初始化之后，数据观测和event/watcher事件配置之前被调用。</li><li>created：在实例创建完成之后立即调用。这一阶段数据观测，属性和方法的运算，watch/event事件回调，挂载阶段还没有开始。</li><li>beforeMount：在挂载开始之前被调用，相关的render函数首次被调用。</li><li>mounted：实例被挂载之后调用，这时el被新创建的vm.$el替换了。</li><li>brforeUpdate：数据更新时调用，发生在虚拟DOM打补丁之前，这里适合在更新之前访问现有的DOM，比如手动溢出已添加的事件监听器。</li><li>updated：数据更改导致的虚拟的DOM重新渲染和打补丁，在这之后会调用该钩子。</li><li>activated：被keep-alive缓存的组件激活时调用。</li><li>deactivated：被keep-alive缓存的组件停用时调用。</li><li>beforeDestroy：实例销毁之前调用，在这一步实例仍然完全可用。</li><li>destroyed：实例销毁之后调用。</li><li>errorCaptured：当捕获一个来自子孙组件错误时被调用</li></ul><h4 id="选项和资源（3）"><a href="#选项和资源（3）" class="headerlink" title="选项和资源（3）"></a>选项和资源（3）</h4><ul><li>directives：包含Vue实例可用指令的哈希表。</li><li>filters：包含Vue实例可用过滤器的哈希表。</li><li>components：包含Vue实例可用组件的哈希表</li></ul><h4 id="选项和组合（3）"><a href="#选项和组合（3）" class="headerlink" title="选项和组合（3）"></a>选项和组合（3）</h4><ul><li><p>parent：指定已创建的实例之父实例，在两者之间建立父子关系。子实例可以用<code>this.$parent</code>访问父实例，子实例被推入父实例的<code>$children</code>数组中。(使用他们的主要目的是访问组件的应急方法，更加推荐使用props和events实现父子组件通信)</p></li><li><p>mixins：mixins选项接收一个混入对象的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mixin = &#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">1</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">2</span>) &#125;,</span><br><span class="line">  mixins: [mixin]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// =&gt; 1</span></span><br><span class="line"><span class="comment">// =&gt; 2</span></span><br></pre></td></tr></table></figure></li><li><p>exends：便于扩展单文件组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CompA = &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在没有调用 `Vue.extend` 时候继承 CompA</span></span><br><span class="line"><span class="keyword">var</span> CompB = &#123;</span><br><span class="line">  extends: CompA,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h4><ul><li><p>vm.$data</p><ul><li>类型：Object</li><li>功能：Vue实例观察的数据对象，就是通过ta访问实例数据对象</li></ul></li><li><p>vm.$props</p><ul><li>类型：Object</li><li>功能：当前数组接受到的props对象</li></ul></li><li><p>vm.$el</p><ul><li>类型：Element</li><li>只读</li><li>功能：Vue实例使用的根DOM元素</li></ul></li><li><p>vm.$options</p><ul><li>类型：Object</li><li>只读</li><li>功能：当前Vue实例的初始化选项</li></ul></li><li><p>vm.$parent</p><ul><li>类型：Vue instance</li><li>只读</li><li>功能：父实例</li></ul></li><li><p>vm.$root</p><ul><li>类型：Vue instance</li><li>只读</li><li>功能：当前组件树的根Vue实例，如果当前实例没有父实例，此实例将会是其自己</li></ul></li><li><p>vm.$children</p><ul><li>类型：Array<code>&lt;Vue instance&gt;</code></li><li>只读</li><li>功能：当前实例的直接子组件。</li></ul></li><li><p>vm.$slots</p><ul><li><p>类型：字典</p></li><li><p>只读</p></li><li><p>功能：用来访问被插槽分发的内容，每个具名插槽有其相应的属性。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;blog-post&gt;</span><br><span class="line">  &lt;template v-slot:header&gt;</span><br><span class="line">    &lt;h1&gt;About Me&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;p&gt;Here<span class="string">'s some page content, which will be included in vm.$slots.default, because it'</span>s not inside a named slot.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;template v-slot:footer&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;Copyright 2016 Evan You&lt;/</span>p&gt;</span><br><span class="line">  &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;p&gt;If I have some content down here, it will also be included in vm.$slots.default.&lt;/</span>p&gt;.</span><br><span class="line">&lt;<span class="regexp">/blog-post&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Vue.component('blog-post', &#123;</span></span><br><span class="line"><span class="regexp">  render: function (createElement) &#123;</span></span><br><span class="line"><span class="regexp">    var header = this.$slots.header</span></span><br><span class="line"><span class="regexp">    var body   = this.$slots.default</span></span><br><span class="line"><span class="regexp">    var footer = this.$slots.footer</span></span><br><span class="line"><span class="regexp">    return createElement('div', [</span></span><br><span class="line"><span class="regexp">      createElement('header', header),</span></span><br><span class="line"><span class="regexp">      createElement('main', body),</span></span><br><span class="line"><span class="regexp">      createElement('footer', footer)</span></span><br><span class="line"><span class="regexp">    ])</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>vm.$scopedSlots</p><ul><li>类型：字典</li><li>只读</li><li>功能：用来访问作用域插槽。对于包含默认solt在内的每一个插槽，该对象都包含一个返回响应的VNode的函数</li></ul></li><li><p>vm.$refs</p><ul><li>类型：Object</li><li>只读</li><li>功能：一个对象，持有注册过ref特性的所有DOM元素和组件实例</li></ul></li><li><p>vm.$isServer</p><ul><li>类型：Boolean</li><li>只读</li><li>功能：当前Vue实例是否运行于服务器</li></ul></li><li><p>vm.$attrs</p><ul><li>类型：字典</li><li>只读</li><li>功能：包含了父作用域中不作为prop被识别的特性绑定。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (<code>class</code> 和 <code>style</code> 除外)，并且可以通过 <code>v-bind=&quot;$attrs&quot;</code> 传入内部组件——在创建高级别的组件时非常有用</li></ul></li></ul><h4 id="实例方法和事件（4）"><a href="#实例方法和事件（4）" class="headerlink" title="实例方法和事件（4）"></a>实例方法和事件（4）</h4><ul><li><p>vm.$on(event,callback)</p><ul><li><p>参数：</p><ul><li>event：字符串或数组</li><li>callback：函数</li></ul></li><li><p>功能：监听当前实例上的自定义事件。事件可以由vm.$emit触发。回调函数会接收所有传入事件触发函数的额外参数</p></li><li><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vm.$on(&apos;test&apos;, function (msg) &#123;</span><br><span class="line">  console.log(msg)</span><br><span class="line">&#125;)</span><br><span class="line">vm.$emit(&apos;test&apos;, &apos;hi&apos;)</span><br><span class="line">// =&gt; &quot;hi&quot;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>vm.$once(event,callback)</p><ul><li>参数：<ul><li>event：字符串</li><li>callback：函数</li></ul></li><li>功能：监听一个自定义事件，但是只触发一次，一旦触发之后，监听器就会被移除</li></ul></li><li><p>vm.$off([event,callback])</p><ul><li>参数：<ul><li>event：字符串或数组</li><li>callback：函数</li></ul></li><li>功能：移除自定义事件监听器</li><li>特点:<ul><li>如果没有提供参数，则移除所有的事件监听器；</li><li>如果只提供了事件，则移除该事件所有的监听器；</li><li>如果同时提供了事件与回调，则只移除这个回调的监听器。</li></ul></li></ul></li><li><p>vm.$emit(eventName,[…ags])</p><ul><li>参数：<ul><li>event：字符串</li><li>xxx</li></ul></li><li>功能：触发当前实例上的事件，附加参数都会传给监听器回调</li></ul></li></ul><h4 id="指令（14）"><a href="#指令（14）" class="headerlink" title="指令（14）"></a>指令（14）</h4><ul><li><p>v-text</p><ul><li><p>类型：字符串</p></li><li><p>功能：更新元素的 <code>textContent</code></p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span v-text=<span class="string">"msg"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;!-- 和下面的一样 --&gt;</span><br><span class="line">&lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>v-html</p><ul><li>类型：字符串</li><li>功能：更新元素的 <code>innerHTML</code> </li></ul></li><li><p>v-show</p><ul><li>类型：any</li><li>功能：根据表达式之真假值，切换元素的 <code>display</code> CSS 属性。当条件变化时该指令触发过渡效果。</li></ul></li><li><p>v-if</p><ul><li>类型：any</li><li>当和 <code>v-if</code> 一起使用时，<code>v-for</code> 的优先级比 <code>v-if</code> 更高</li></ul></li><li><p>v-else</p><ul><li>限制：前一兄弟元素必须有 <code>v-if</code> 或 <code>v-else-if</code></li></ul></li><li><p>v-else-if</p><ul><li>前一兄弟元素必须有 <code>v-if</code> 或 <code>v-else-if</code></li></ul></li><li><p>v-for</p><ul><li><p>类型：Array | Object | number | string | Iterable </p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-<span class="keyword">for</span>=<span class="string">"item in items"</span>&gt;</span><br><span class="line">  &#123;&#123; item.text &#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;div v-for="(item, index) in items"&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;div v-<span class="keyword">for</span>=<span class="string">"(val, key) in object"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div v-<span class="keyword">for</span>=<span class="string">"(val, name, index) in object"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;div v-<span class="keyword">for</span>=<span class="string">"item in items"</span> :key=<span class="string">"item.id"</span>&gt;</span><br><span class="line">  &#123;&#123; item.text &#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>v-on</p><ul><li><p>缩写：@</p></li><li><p>类型：对象，方法</p></li><li><p>参数：event</p></li><li><p>修饰符：</p><ul><li><code>.stop</code> - 调用 <code>event.stopPropagation()</code>。</li><li><code>.prevent</code> - 调用 <code>event.preventDefault()</code>。</li><li><code>.capture</code> - 添加事件侦听器时使用 capture 模式。</li><li><code>.self</code> - 只当事件是从侦听器绑定的元素本身触发时才触发回调。</li><li><code>.{keyCode | keyAlias}</code> - 只当事件是从特定键触发时才触发回调。</li><li><code>.native</code> - 监听组件根元素的原生事件。</li><li><code>.once</code> - 只触发一次回调。</li><li><code>.left</code> - (2.2.0) 只当点击鼠标左键时触发。</li><li><code>.right</code> - (2.2.0) 只当点击鼠标右键时触发。</li><li><code>.middle</code> - (2.2.0) 只当点击鼠标中键时触发。</li><li><code>.passive</code> - (2.3.0) 以 <code>{ passive: true }</code> 模式添加侦听器</li></ul></li><li><p>功能：绑定会事件监听</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 方法处理器 --&gt;</span><br><span class="line">&lt;button v-on:click=<span class="string">"doThis"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 动态事件 (<span class="number">2.6</span><span class="number">.0</span>+) --&gt;</span><br><span class="line">&lt;button v-on:[event]=<span class="string">"doThis"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 内联语句 --&gt;</span><br><span class="line">&lt;button v-on:click=<span class="string">"doThat('hello', $event)"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;button @click=<span class="string">"doThis"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 动态事件缩写 (<span class="number">2.6</span><span class="number">.0</span>+) --&gt;</span><br><span class="line">&lt;button @[event]=<span class="string">"doThis"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 停止冒泡 --&gt;</span><br><span class="line">&lt;button @click.stop=<span class="string">"doThis"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 阻止默认行为 --&gt;</span><br><span class="line">&lt;button @click.prevent=<span class="string">"doThis"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 阻止默认行为，没有表达式 --&gt;</span><br><span class="line">&lt;form @submit.prevent&gt;<span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--  串联修饰符 --&gt;</span><br><span class="line">&lt;button @click.stop.prevent=<span class="string">"doThis"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 键修饰符，键别名 --&gt;</span><br><span class="line">&lt;input @keyup.enter=<span class="string">"onEnter"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 键修饰符，键代码 --&gt;</span><br><span class="line">&lt;input @keyup<span class="number">.13</span>=<span class="string">"onEnter"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 点击回调只会触发一次 --&gt;</span><br><span class="line">&lt;button v-on:click.once=<span class="string">"doThis"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 对象语法 (<span class="number">2.4</span><span class="number">.0</span>+) --&gt;</span><br><span class="line">&lt;button v-on=<span class="string">"&#123; mousedown: doThis, mouseup: doThat &#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在子组件上监听自定义事件（当子组件触发my-event时调用事件处理器）</span></span><br><span class="line">&lt;my-component @my-event=<span class="string">"handleThis"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 内联语句 --&gt;</span><br><span class="line">&lt;my-component @my-event=<span class="string">"handleThis(123, $event)"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 组件中的原生事件 --&gt;</span><br><span class="line">&lt;my-component @click.native=<span class="string">"onClick"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>v-bind</p><ul><li><p>缩写：<code>：</code></p></li><li><p>类型：any</p></li><li><p>修饰符：</p><ul><li><code>.prop</code> - 作为一个 DOM property 绑定而不是作为 attribute 绑定。(<a href="https://stackoverflow.com/questions/6003819/properties-and-attributes-in-html#answer-6004028" target="_blank" rel="noopener">差别在哪里？</a>)</li><li><code>.camel</code> - (2.1.0+) 将 kebab-case 特性名转换为 camelCase. (从 2.1.0 开始支持)</li><li><code>.sync</code> (2.3.0+) 语法糖，会扩展成一个更新父组件绑定值的 <code>v-on</code> 侦听器。</li></ul></li><li><p>功能：动态绑定一个或多个特性，或一个组件prop到表达式</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 绑定一个属性 --&gt;</span><br><span class="line">&lt;img v-bind:src=<span class="string">"imageSrc"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 动态特性名 (<span class="number">2.6</span><span class="number">.0</span>+) --&gt;</span><br><span class="line">&lt;button v-bind:[key]=<span class="string">"value"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;img :src=<span class="string">"imageSrc"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 动态特性名缩写 (<span class="number">2.6</span><span class="number">.0</span>+) --&gt;</span><br><span class="line">&lt;button :[key]=<span class="string">"value"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 内联字符串拼接 --&gt;</span><br><span class="line">&lt;img :src=<span class="string">"'/path/to/images/' + fileName"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="class"><span class="keyword">class</span> 绑定 --&gt;</span></span><br><span class="line">&lt;div :class="&#123; red: isRed &#125;"&gt;&lt;/div&gt;</span><br><span class="line">&lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">"[classA, classB]"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">"[classA, &#123; classB: isB, classC: isC &#125;]"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- style 绑定 --&gt;</span><br><span class="line">&lt;div :style=<span class="string">"&#123; fontSize: size + 'px' &#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div :style=<span class="string">"[styleObjectA, styleObjectB]"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 绑定一个有属性的对象 --&gt;</span><br><span class="line">&lt;div v-bind=<span class="string">"&#123; id: someProp, 'other-attr': otherProp &#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 通过 prop 修饰符绑定 DOM 属性 --&gt;</span><br><span class="line">&lt;div v-bind:text-content.prop=<span class="string">"text"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- prop 绑定。“prop”必须在 my-component 中声明。--&gt;</span><br><span class="line">&lt;my-component :prop=<span class="string">"someThing"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 通过 $props 将父组件的 props 一起传给子组件 --&gt;</span><br><span class="line">&lt;child-component v-bind=<span class="string">"$props"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- XLink --&gt;</span><br><span class="line">&lt;svg&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:xlink:special</span>=<span class="string">"foo"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>v-model</p><ul><li>限制<ul><li><code>&lt;input&gt;</code></li><li><code>&lt;select&gt;</code></li><li><code>&lt;textarea&gt;</code></li><li>components</li></ul></li><li>修饰符：<ul><li><a href="https://cn.vuejs.org/v2/guide/forms.html#lazy" target="_blank" rel="noopener"><code>.lazy</code></a> - 取代 <code>input</code> 监听 <code>change</code> 事件</li><li><a href="https://cn.vuejs.org/v2/guide/forms.html#number" target="_blank" rel="noopener"><code>.number</code></a> - 输入字符串转为有效的数字</li><li><a href="https://cn.vuejs.org/v2/guide/forms.html#trim" target="_blank" rel="noopener"><code>.trim</code></a> - 输入首尾空格过滤</li></ul></li><li>用法：在表单控件或者组件上创建双向绑定</li></ul></li><li><p>v-slot</p><ul><li><p>缩写：<code>#</code></p></li><li><p>限制：</p><ul><li><code>&lt;template&gt;</code></li><li><a href="https://cn.vuejs.org/v2/guide/components-slots.html#独占默认插槽的缩写语法" target="_blank" rel="noopener">组件</a> (对于一个单独的带 prop 的默认插槽)</li></ul></li><li><p>功能：提供具名插槽或者需要接受prop的插槽</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 具名插槽 --&gt;</span><br><span class="line">&lt;base-layout&gt;</span><br><span class="line">  &lt;template v-slot:header&gt;</span><br><span class="line">    Header content</span><br><span class="line">  &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  Default slot content</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;template v-slot:footer&gt;</span></span><br><span class="line"><span class="regexp">    Footer content</span></span><br><span class="line"><span class="regexp">  &lt;/</span>template&gt;</span><br><span class="line">&lt;<span class="regexp">/base-layout&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- 接收 prop 的具名插槽 --&gt;</span></span><br><span class="line"><span class="regexp">&lt;infinite-scroll&gt;</span></span><br><span class="line"><span class="regexp">  &lt;template v-slot:item="slotProps"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="item"&gt;</span></span><br><span class="line"><span class="regexp">      &#123;&#123; slotProps.item.text &#125;&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;/i</span>nfinite-scroll&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 接收 prop 的默认插槽，使用了解构 --&gt;</span><br><span class="line">&lt;mouse-position v-slot=<span class="string">"&#123; x, y &#125;"</span>&gt;</span><br><span class="line">  Mouse position: &#123;&#123; x &#125;&#125;, &#123;&#123; y &#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/mouse-position&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>v-pre</p><ul><li><p>功能：跳过这个元素和它的子元素的编译过程。跳过大量没有指令的节点会加快编译。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span v-pre&gt;&#123;&#123; <span class="keyword">this</span> will not be compiled &#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>v-cloak</p><ul><li><p>功能：保持在元素上直接关联实例结束编译。和 CSS 规则如 <code>[v-cloak] { display: none }</code> 一起用时，这个指令可以隐藏未编译的 Mustache 标签直到实例准备完毕。</p></li><li><p>用法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[v-cloak]</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">div</span> <span class="selector-tag">v-cloak</span>&gt;</span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>v-once</p><ul><li><p>功能：只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。</p></li><li><p>用法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单个元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>This will never change: &#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 有子元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-once</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>comment<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-once</span> <span class="attr">:comment</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- `v-for` 指令--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"i in list"</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="特殊特性（3）"><a href="#特殊特性（3）" class="headerlink" title="特殊特性（3）"></a>特殊特性（3）</h4><ul><li><p>key</p><ul><li><p>类型：数字或者字符串</p></li><li><p>功能：key的特殊属性主要在Vue的虚拟DOM算法，在新旧nodes对比时辨识VNodes。如果不使用key，Vue会使用一种最大限度减少动态元素并且尽可能的尝试修改、复用相同类型元素的算法。使用key时，它会基于key的变化重新排列元素顺序，并且会溢出key不存在的元素。有相同父元素的子元素必须拥有独特的key。最常见的用例就是结合<code>v-for</code>使用</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-<span class="keyword">for</span>=<span class="string">"item in items"</span> :key=<span class="string">"item.id"</span>&gt;...&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>ref</p><ul><li><p>类型：字符串</p></li><li><p>功能：ref被用来给元素或者子组件注册引用信息。引用信息将会注册在父组件的$refs对象上。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="string">`vm.$refs.p`</span> will be the DOM node --&gt;</span><br><span class="line">&lt;p ref=<span class="string">"p"</span>&gt;hello&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- `vm.$refs.child` will be the child component instance --&gt;</span></span><br><span class="line"><span class="regexp">&lt;child-component ref="child"&gt;&lt;/</span>child-component&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>is</p><ul><li><p>类型：字符串或者对象</p></li><li><p>功能：用于动态组件且基于DOM内模板的限制工作</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 当 <span class="string">`currentView`</span> 改变时，组件也跟着改变 --&gt;</span><br><span class="line">&lt;component v-bind:is=<span class="string">"currentView"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 这样做是有必要的，因为 <span class="string">`&lt;my-row&gt;`</span> 放在一个 --&gt;</span><br><span class="line">&lt;!-- <span class="string">`&lt;table&gt;`</span> 内可能无效且被放置到外面 --&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr is=<span class="string">"my-row"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/table&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="内置的组件（4）"><a href="#内置的组件（4）" class="headerlink" title="内置的组件（4）"></a>内置的组件（4）</h4><ul><li><p>component</p><ul><li><p>功能：渲染一个元组件为动态组件。依据<code>is</code>的值来决定你哪个组件被渲染。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 动态组件由 vm 实例的属性值 <span class="string">`componentId`</span> 控制 --&gt;</span><br><span class="line">&lt;component :is=<span class="string">"componentId"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 也能够渲染注册过的组件或 prop 传入的组件 --&gt;</span><br><span class="line">&lt;component :is=<span class="string">"$options.components.child"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>transition</p><ul><li><p>props：</p><ul><li>name（string）用于自动生成CSS过度类名</li><li>appear（boolean）是否在初始渲染时使用过度，默认false</li><li>css（boolean）是否使用CSS过度类，默认为true</li><li>type（string）指定过度事件类型，侦听过度何时结束，有效值为 <code>&quot;transition&quot;</code> 和 <code>&quot;animation&quot;</code></li><li>mode（string）控制离开/进入过度的时间序列。有效的模式有 <code>&quot;out-in&quot;</code> 和 <code>&quot;in-out&quot;</code>；默认同时进行</li><li>duration（number | { <code>enter</code>: number, <code>leave</code>: number } ）指定过渡的持续时间</li><li><code>enter-class</code> - string</li><li><code>leave-class</code> - string</li><li><code>appear-class</code> - string</li><li><code>enter-to-class</code> - string</li><li><code>leave-to-class</code> - string</li><li><code>appear-to-class</code> - string</li><li><code>enter-active-class</code> - string</li><li><code>leave-active-class</code> - string</li><li><code>appear-active-class</code> - string</li></ul></li><li><p>事件</p><ul><li><code>before-enter</code></li><li><code>before-leave</code></li><li><code>before-appear</code></li><li><code>enter</code></li><li><code>leave</code></li><li><code>appear</code></li><li><code>after-enter</code></li><li><code>after-leave</code></li><li><code>after-appear</code></li><li><code>enter-cancelled</code></li><li><code>leave-cancelled</code> (<code>v-show</code> only)</li><li><code>appear-cancelled</code></li></ul></li><li><p>功能：<code>&lt;transition&gt;</code> 元素作为<strong>单个</strong>元素/组件的过渡效果。<code>&lt;transition&gt;</code> 只会把过渡效果应用到其包裹的内容上，而不会额外渲染 DOM 元素，也不会出现在可被检查的组件层级中。</p></li><li><p>用法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 简单元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>toggled content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"fade"</span> <span class="attr">mode</span>=<span class="string">"out-in"</span> <span class="attr">appear</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"view"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事件钩子 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"transition-demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> @<span class="attr">after-enter</span>=<span class="string">"transitionComplete"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"ok"</span>&gt;</span>toggled content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  ...</span><br><span class="line">  methods: &#123;</span><br><span class="line">    transitionComplete: function (el) &#123;</span><br><span class="line">      // 传入 'el' 这个 DOM 元素作为参数。</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;).$mount('#transition-demo')</span><br></pre></td></tr></table></figure></li></ul></li><li><p>keep-alive</p><ul><li><p>props</p><ul><li>include（字符串或者正则表达式）只有名称匹配的组件会被缓存</li><li>exclude（字符串或者正则表达式）任何名称匹配的组件都不会被缓存</li><li>max（数字）最多可以缓存多少组件实例</li></ul></li><li><p>功能：<code>&lt;keep-alive&gt;</code> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 逗号分隔字符串 --&gt;</span><br><span class="line">&lt;keep-alive include=<span class="string">"a,b"</span>&gt;</span><br><span class="line">  &lt;component :is=<span class="string">"view"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/keep-alive&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- 正则表达式 (使用 `v-bind`) --&gt;</span></span><br><span class="line"><span class="regexp">&lt;keep-alive :include="/</span>a|b/<span class="string">"&gt;</span></span><br><span class="line"><span class="string">  &lt;component :is="</span>view<span class="string">"&gt;&lt;/component&gt;</span></span><br><span class="line"><span class="string">&lt;/keep-alive&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;!-- 数组 (使用 `v-bind`) --&gt;</span></span><br><span class="line"><span class="string">&lt;keep-alive :include="</span>[<span class="string">'a'</span>, <span class="string">'b'</span>]<span class="string">"&gt;</span></span><br><span class="line"><span class="string">  &lt;component :is="</span>view<span class="string">"&gt;&lt;/component&gt;</span></span><br><span class="line"><span class="string">&lt;/keep-alive&gt;</span></span><br><span class="line"><span class="string">//匹配首先检查组件自身的 name 选项，如果 name 选项不可用，则匹配它的局部注册名称 (父组件 components 选项的键值)。匿名组件不能被匹配。</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>solt</p><ul><li>props<ul><li>name（string）用于命名插糟</li><li>功能：<code>&lt;slot&gt;</code> 元素作为组件模板之中的内容分发插槽。<code>&lt;slot&gt;</code> 元素自身将被替换</li></ul></li></ul></li></ul><h3 id="什么是SSR服务端渲染"><a href="#什么是SSR服务端渲染" class="headerlink" title="什么是SSR服务端渲染"></a>什么是SSR服务端渲染</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;js回顾&quot;&gt;&lt;a href=&quot;#js回顾&quot; class=&quot;headerlink&quot; title=&quot;js回顾&quot;&gt;&lt;/a&gt;js回顾&lt;/h3&gt;&lt;h5 id=&quot;定时器&quot;&gt;&lt;a href=&quot;#定时器&quot; class=&quot;headerlink&quot; title=&quot;定时器&quot;&gt;&lt;/a&gt;定时器&lt;/h5&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#一次定时(2s之后执行该函数里面的内容)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;,&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#循环执行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setlnterval(cb,&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="https://pl1649947109.github.io/pl1649947109/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>centos7+docker19.03.5+Django1.11.9项目部署</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/12/07/django%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/centos7+docker19.03.5+Django1.11.9%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/12/07/django项目部署/centos7+docker19.03.5+Django1.11.9项目部署/</id>
    <published>2019-12-07T12:30:00.000Z</published>
    <updated>2019-12-09T07:23:51.377Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker部署最简单的django项目"><a href="#docker部署最简单的django项目" class="headerlink" title="docker部署最简单的django项目"></a>docker部署最简单的django项目</h2><h3 id="一、安装docker"><a href="#一、安装docker" class="headerlink" title="一、安装docker"></a>一、安装docker</h3><p>基于源安装，这种方式会自动安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>执行使用阿里镜像源下载</span><br><span class="line">wget http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">#</span>yum.repos.d是源的配置文件，如果使yum生效必须配置在该文件夹下才能生效（安装yum源）</span><br><span class="line">mv docker-ce.repo /etc/yum.repos.d</span><br><span class="line"><span class="meta">#</span>安装docker（基于阿里源）</span><br><span class="line">yum install -y docker-ce</span><br><span class="line"><span class="meta">#</span>安装docker-compose</span><br><span class="line">pip3 install docker-compose -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure><a id="more"></a><p>自定义的方式安装，可能会出现组件找不到的情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-17.09.0.ce-1.el7.centos.x86_64.rpm</span><br><span class="line"></span><br><span class="line">yum localinstall docker-ce-17.09.0.ce-1.el7.centos.x86_64.rpm</span><br></pre></td></tr></table></figure><p>查看是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>如果安装成功，该命令会展示一些信息</span><br><span class="line"><span class="meta">$</span>docker info  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>查看版本信息</span><br><span class="line"><span class="meta">$</span>docker -v</span><br></pre></td></tr></table></figure><h3 id="二、设置镜像仓库源"><a href="#二、设置镜像仓库源" class="headerlink" title="二、设置镜像仓库源"></a>二、设置镜像仓库源</h3><p>默认的镜像仓库是国外的，拉取镜像的速度很慢，所以为了方便镜像的获取，可以更改镜像源，这就需要配置一个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>新建文件</span><br><span class="line"><span class="meta">$</span>sudo vi /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>配置信息</span><br><span class="line">&#123;</span><br><span class="line">"registry-mirrors": ["https://i1el1i0w.mirror.aliyuncs.com"]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>重启容器服务</span><br><span class="line"><span class="meta">$</span>systemctl raemon-reload</span><br><span class="line"><span class="meta">$</span>systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>检查是否配置成功</span><br><span class="line"><span class="meta">$</span>docker info</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; Registry Mirrors:</span><br><span class="line">    https://i1el1i0w.mirror.aliyuncs.com/</span><br><span class="line">'''现在，我们发现镜像已经配置到了国内，我们就可以拉取镜像了'''</span><br></pre></td></tr></table></figure><h3 id="三、制作镜像"><a href="#三、制作镜像" class="headerlink" title="三、制作镜像"></a>三、制作镜像</h3><p><strong>Dockerfile</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> This my first django Dockerfile</span><br><span class="line"><span class="meta">#</span> Version 1.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Base images 基础镜像</span><br><span class="line">FROM centos:centos7.5.1804</span><br><span class="line"><span class="meta">#</span>这个centos系统就相当于是虚拟机之上的系统，就是集装箱，这是一个干净的系统，什么都没有</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>MAINTAINER 维护者信息</span><br><span class="line">LABEL maintainer="inspur_lyx@hotmail.com"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>ENV 设置环境变量</span><br><span class="line">ENV VERSION v1.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>RUN 执行以下命令（安装pytohn环境）</span><br><span class="line">RUN yum install -y wget</span><br><span class="line"></span><br><span class="line">RUN wget -P /etc/yum.repos.d/ http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"></span><br><span class="line">RUN yum install -y  python36 python3-devel gcc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>工作目录（集装箱的/opt目录）</span><br><span class="line">WORKDIR /opt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>拷贝文件至工作目录（虚拟机下的项目目录）</span><br><span class="line">COPY . /opt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>这里只使用到了django模块，如果是真正的项目，应该下载-r requirements.txt </span><br><span class="line">RUN pip3 install -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com Django==2.1.8</span><br><span class="line"></span><br><span class="line">RUN rm -rf ~/.cache/pip</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>EXPOSE 映射端口</span><br><span class="line">EXPOSE 8000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>容器启动时执行命令</span><br><span class="line">CMD ["python3", "manage.py", "runserver", "0.0.0.0:8000"]</span><br></pre></td></tr></table></figure><p><strong>项目目录</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-docker_test </span><br><span class="line">    -docker  </span><br><span class="line">    <span class="comment">#配置的文件</span></span><br><span class="line">    -Dockerfile  </span><br><span class="line">    -docker_test  </span><br><span class="line">    -manage.py  </span><br><span class="line">    -requirements.txt  </span><br><span class="line">    -templates</span><br></pre></td></tr></table></figure><p><strong>创建镜像</strong></p><p>在该项目下执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>docker build . -f Dockerfile -t my-helloworld:20191209</span><br><span class="line"><span class="meta">#</span>参数说明</span><br><span class="line">.表示本项目</span><br><span class="line">-f告诉docker运行什么文件</span><br><span class="line">-t表示给镜像起一个名称</span><br><span class="line">:20191209表示镜像的tag</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>我们检查一下镜像是否创建成功</span><br><span class="line"><span class="meta">$</span>docker images</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt;REPOSITORY  TAG  IMAGE ID CREATED  SIZE</span><br><span class="line">my-helloworld 20191209 ea926bbce8f5 3hoursago 583MB</span><br></pre></td></tr></table></figure><p>对于镜像我们可以知己制作，也可以拉仓库里面的（前提是配好源）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker pull pl/my-helloworld:20191110</span><br></pre></td></tr></table></figure><p>制作好的镜像，我们也可以推到镜像仓库（前提是配好源）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker push pl/my-helloworld:20191110</span><br></pre></td></tr></table></figure><h3 id="四、启动容器"><a href="#四、启动容器" class="headerlink" title="四、启动容器"></a>四、启动容器</h3><p>启动命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run --name helloworld -d -p 8000:8000 my-helloworld:20191110</span><br><span class="line"><span class="meta">#</span>参数解释：</span><br><span class="line">--name后面是容器的名字</span><br><span class="line">-d是后台运行</span><br><span class="line">-p是端口映射（前面的8000是容器内部的端口，后面的8000是虚拟机的8000端口）</span><br><span class="line">最后的参数就是我们刚刚创建好的镜像</span><br></pre></td></tr></table></figure><p>在虚拟机访问项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>curl 127.0.0.1:8000</span><br><span class="line">'''</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;</span><br><span class="line">  &lt;title&gt;pl&lt;/title&gt;</span><br><span class="line">  &lt;meta name="robots" content="NONE,NOARCHIVE"&gt;</span><br><span class="line">  &lt;style type="text/css"&gt;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;p&gt;hello word!&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">'''</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>这就表明我们的项目已经启动起来了，如果我们的虚拟机有外网ip就可以使用ip+port访问了</span><br></pre></td></tr></table></figure><p>进入容器调试项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>docker exec -ti 容器的hash值  bash</span><br><span class="line">我们输入上面的命令就进入了集装箱的内部，自动/opt目录下，也就是我们的django项目下面，我们这里的操作一样，可以下载模块，调试项目也可以使用curl进行项目的访问</span><br></pre></td></tr></table></figure><p>到这里，一个简单的项目算是部署成功了，但是这里面没有涉及太多的内容，后面，我会部署一个完整的比较大一点的项目（会用docker-compose的方式搭建）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;docker部署最简单的django项目&quot;&gt;&lt;a href=&quot;#docker部署最简单的django项目&quot; class=&quot;headerlink&quot; title=&quot;docker部署最简单的django项目&quot;&gt;&lt;/a&gt;docker部署最简单的django项目&lt;/h2&gt;&lt;h3 id=&quot;一、安装docker&quot;&gt;&lt;a href=&quot;#一、安装docker&quot; class=&quot;headerlink&quot; title=&quot;一、安装docker&quot;&gt;&lt;/a&gt;一、安装docker&lt;/h3&gt;&lt;p&gt;基于源安装，这种方式会自动安装依赖&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;执行使用阿里镜像源下载&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;yum.repos.d是源的配置文件，如果使yum生效必须配置在该文件夹下才能生效（安装yum源）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mv docker-ce.repo /etc/yum.repos.d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;安装docker（基于阿里源）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install -y docker-ce&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;安装docker-compose&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip3 install docker-compose -i http://pypi.douban.com/simple --trusted-host pypi.douban.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="django项目部署" scheme="https://pl1649947109.github.io/pl1649947109/tags/django%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>知识大总结</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/12/02/%E5%B0%8F%E7%BB%BF%E6%9C%AC/%E9%9D%A2%E8%AF%95%E5%A4%87%E6%88%98/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/12/02/小绿本/面试备战/</id>
    <published>2019-12-02T12:00:00.000Z</published>
    <updated>2020-03-08T04:02:30.291Z</updated>
    
    <content type="html"><![CDATA[<h3 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h3><h4 id="编程语言之间区别"><a href="#编程语言之间区别" class="headerlink" title="编程语言之间区别"></a>编程语言之间区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C语言：像C# 、Java、Python等高级语言底层均是由C语言开发完成的。</span><br><span class="line">C++：是C语言的加强版，在C语言上进行类库等功能的扩展。</span><br><span class="line">Java：全球应用最广泛的编程语言。</span><br><span class="line">C#：由微软开发，以前只能运行在windowns服务器（windows服务器花钱）。</span><br><span class="line">PHP：主要应用于网站的快速开发。</span><br><span class="line">Go: 是谷歌开发一门编程语言，主要用于后端的开发（容器时代+并发性能高）。</span><br><span class="line">Python：</span><br><span class="line">从诞生至今自然生长，多年的累积致使他在各个领域都积累了大量类库。</span><br><span class="line">语言简洁。</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="py2和py3的区别"><a href="#py2和py3的区别" class="headerlink" title="py2和py3的区别"></a>py2和py3的区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">-字符串不同</span><br><span class="line">py2中有两种数据类型：unicode    str</span><br><span class="line">py3中有两种数据类型：str   bytes</span><br><span class="line"></span><br><span class="line">py2中的str，就是py3中的bytes</span><br><span class="line">py2中的unicode，就是py3中str</span><br><span class="line">例如：</span><br><span class="line">py2:</span><br><span class="line">val = u&quot;changxinzuoxia&quot; =&gt; unicode</span><br><span class="line">val = &quot;changxinzuoxia&quot;  =&gt; str</span><br><span class="line">py3:</span><br><span class="line">val = &quot;chanxin&quot;=&gt; str</span><br><span class="line">val = b&quot;chanxin&quot;        =&gt; bytes</span><br><span class="line">-默认解释器编码</span><br><span class="line">py2: acsii</span><br><span class="line">py3: utf-8</span><br><span class="line"></span><br><span class="line">-range:</span><br><span class="line">py2: range    xrange</span><br><span class="line">py3:  range </span><br><span class="line"></span><br><span class="line">-类型：</span><br><span class="line">py2:</span><br><span class="line">intlong</span><br><span class="line">p3:</span><br><span class="line">int</span><br><span class="line"></span><br><span class="line">-字典：</span><br><span class="line">v = &#123;&quot;k1&quot;:1,&quot;k2&quot;:2&#125;</span><br><span class="line">py2,立即将数据放到内存。</span><br><span class="line">v.keys()，得到列表</span><br><span class="line">v.values()，得到列表</span><br><span class="line">v.items()，得到列表</span><br><span class="line">py3:</span><br><span class="line">v.keys()，迭代器</span><br><span class="line">v.values()，迭代器</span><br><span class="line">v.items()，迭代器</span><br><span class="line"></span><br><span class="line">-map、filter</span><br><span class="line">py2: 立即得到结果</span><br><span class="line">py3: 迭代器</span><br><span class="line"></span><br><span class="line">-类：</span><br><span class="line">py2: 经典类、新式类（直接或间接继承object）</span><br><span class="line">py3: 新式类</span><br></pre></td></tr></table></figure><h4 id="and和or"><a href="#and和or" class="headerlink" title="and和or"></a>and和or</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v2 = <span class="number">3</span> <span class="keyword">and</span> <span class="number">7</span> <span class="keyword">or</span> <span class="number">9</span> <span class="keyword">and</span> <span class="number">0</span></span><br><span class="line"><span class="comment">#结果是7（为什么结果不是0，因为先算完and之后再算or，所以结果是7）</span></span><br></pre></td></tr></table></figure><h4 id="字符串反转"><a href="#字符串反转" class="headerlink" title="字符串反转"></a>字符串反转</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"asd"</span></span><br><span class="line"><span class="comment">#最简单的方法:切片实现</span></span><br><span class="line">a[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h4 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">在Python中拷贝的目的就是要再创建一份，拷贝都是针对可变类型而言。 </span><br><span class="line">例如：</span><br><span class="line">data = [1,2,[11,22]]</span><br><span class="line"></span><br><span class="line">浅拷贝, 只拷贝第一层.</span><br><span class="line">new_data = copy.copy(data)</span><br><span class="line">相当于：[1拷贝一份,2拷贝一份,[11,22]用原来的内存地址] 理论</span><br><span class="line">相当于：[1,2,[11,22]用原来的内存地址] 实际</span><br><span class="line"></span><br><span class="line">深拷贝，所有层都拷贝。</span><br><span class="line">new_data = copy.deepcopy(data)</span><br><span class="line">相当于：[1,2,[11,22]重新拷贝一份]</span><br><span class="line"></span><br><span class="line">总结：Python中所有的拷贝都是针对可变类型而言，浅拷贝就是指拷贝数据的第一层，遇到可变类型只能拷贝他的内存地址，数据不会重新创建。 而对于深拷贝，会将所有的可变类型数据都拷贝一份。</span><br></pre></td></tr></table></figure><h4 id="一行打印99乘法表"><a href="#一行打印99乘法表" class="headerlink" title="一行打印99乘法表"></a>一行打印99乘法表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = <span class="string">"\n"</span>.join([<span class="string">" "</span>.join([ <span class="string">"%s*%s=%s "</span> %(i,j,i*j) <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,i+<span class="number">1</span>)]) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>)])</span><br></pre></td></tr></table></figure><h4 id="读大文件"><a href="#读大文件" class="headerlink" title="读大文件"></a>读大文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一行行的读</span></span><br><span class="line"><span class="comment">#利用sek、tell读（如果只有一行数据使用它来读）</span></span><br></pre></td></tr></table></figure><p>#### </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#filter、map、reduce注意它他们的格式和返回值</span></span><br><span class="line">filter:满足条件的留下来list(filter(<span class="keyword">lambda</span> x:x&gt;<span class="number">2</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br><span class="line">map():映射list(map(<span class="keyword">lambda</span> x:x+<span class="number">2</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br><span class="line">reduce:累加</span><br><span class="line">    <span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">    reduce(lambda x,y:x+y,[1,2,3,4,5])  ==&gt;15</span><br></pre></td></tr></table></figure><h4 id="迭代器、迭代对象、生成器"><a href="#迭代器、迭代对象、生成器" class="headerlink" title="迭代器、迭代对象、生成器"></a>迭代器、迭代对象、生成器</h4><p><a href="https://blog.csdn.net/qq_40890660/article/details/97618316" target="_blank" rel="noopener">https://blog.csdn.net/qq_40890660/article/details/97618316</a></p><h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#完整的装饰器</span></span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(f)</span>:</span></span><br><span class="line"><span class="meta">    @functools.wraps(f)  #保留元数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line"><span class="keyword">return</span> f(*args,**kwargs)</span><br><span class="line"><span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(a,b)</span></span></span><br><span class="line"><span class="function"><span class="title">return</span> <span class="title">a</span>+<span class="title">b</span></span></span><br><span class="line"><span class="function"><span class="title">print</span> <span class="params">(index.__name__)</span></span></span><br><span class="line"><span class="function">#带参数的装饰器</span></span><br><span class="line"><span class="function"><span class="title">import</span> <span class="title">functools</span></span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">func</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(f)</span>:</span></span><br><span class="line"><span class="meta">        @functools.wraps(f)  #保留元数据（打印index函数相关的信息其实返回的是inner的信息，因为，这个时候index就是inner，所以加这个方法就是为了避免这种情况的发生）</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> f(*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@func("xx")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(a,b)</span></span></span><br><span class="line"><span class="function"><span class="title">return</span> <span class="title">a</span>+<span class="title">b</span></span></span><br><span class="line"><span class="function"><span class="title">print</span> <span class="params">(index.__name__)</span></span></span><br></pre></td></tr></table></figure><h4 id="查找目录下所有文件"><a href="#查找目录下所有文件" class="headerlink" title="查找目录下所有文件"></a>查找目录下所有文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">for</span> a,b,c <span class="keyword">in</span> os.walk(目录地址):</span><br><span class="line">    <span class="comment"># a -&gt; 当前查看的目录</span></span><br><span class="line">    <span class="comment"># b -&gt; 当前查看的目录下的所有文件夹</span></span><br><span class="line">    <span class="comment"># c -&gt; 当前查看目录下的所有文件</span></span><br><span class="line"><span class="keyword">for</span> file_name <span class="keyword">in</span> c:</span><br><span class="line">file_path = os.path.join(a,file_name)</span><br><span class="line">    print(file_path)</span><br><span class="line"><span class="comment">#注意listdir只能找到目录的第一层文件，如果嵌套目录的话只能使用walk进行查找</span></span><br></pre></td></tr></table></figure><h4 id="re的match和search区别"><a href="#re的match和search区别" class="headerlink" title="re的match和search区别"></a>re的match和search区别</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">正则匹配针对的是字符串</span><br><span class="line"><span class="comment">#match：从开始的位置开始查找，找到一个就返回</span></span><br><span class="line"><span class="comment">#secrch：从任意的位置开始查找，找到一个就返回</span></span><br></pre></td></tr></table></figure><h4 id="super的作用"><a href="#super的作用" class="headerlink" title="super的作用"></a>super的作用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">按照mro的顺序查找父类的属性和方法</span><br></pre></td></tr></table></figure><h4 id="staticmethod和-classmethod的区别"><a href="#staticmethod和-classmethod的区别" class="headerlink" title="@staticmethod和@classmethod的区别"></a>@staticmethod和@classmethod的区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@staticmethod是静态方法，它可以没有参数，它的调用方式可以通过类名也可以通过实例化对象</span><br><span class="line">@classmethod是类方法，它最少有一个cls参数，它的调用方式只能通过类名</span><br></pre></td></tr></table></figure><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">单例模式确保一个类只有一个实例，像django中的settings配置文件就是一中单例模式</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Rlock</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span>:</span></span><br><span class="line">    _instance = <span class="literal">None</span></span><br><span class="line">    lock = Rolck()</span><br><span class="line">    <span class="comment">#__new__方法就是创建实例的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls.*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="comment">#实例存在就直接返回</span></span><br><span class="line">        <span class="keyword">if</span> cls._instance:</span><br><span class="line">            retuern cls._instance</span><br><span class="line">        <span class="comment">#加锁的原因是有人已经获取了这个对象，这个时候我们就需要等一下再去获取这个对象，防止发生冲突</span></span><br><span class="line">        <span class="keyword">with</span> cls.lock:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cls._instance:</span><br><span class="line">                <span class="comment">#创建实例，继承了object</span></span><br><span class="line">                cls._instance = super().__new__(cls)</span><br><span class="line">            <span class="keyword">return</span> cls._instance</span><br></pre></td></tr></table></figure><h4 id="python内存管理机制"><a href="#python内存管理机制" class="headerlink" title="python内存管理机制"></a>python内存管理机制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.由于python的一切皆对象，所以python的储存问题就是对象的储存问题，并且对于每个对象python会分配一块内存空间去储存他们；</span><br><span class="line">2.对于整数和短小的字符，python会执行缓存机制（小数据池），就是将这些对象进行缓存，不会为相同的对象分配多个内存空间；</span><br><span class="line">3.对于容器对象，比如列表、字典和集合等，储存的仅仅是这些对象的引用（也就是地址），而不是这些对象本身</span><br></pre></td></tr></table></figure><h4 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">以引用计数器为主、标记清除和分代回收为辅。</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_40890660/article/details/100529621" target="_blank" rel="noopener">https://blog.csdn.net/qq_40890660/article/details/100529621</a></p><h4 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">匹配一个字符串没有节制，能匹配多少就去匹配多少，知道没有匹配的为止，点是贪婪问号是非贪婪</span><br></pre></td></tr></table></figure><h3 id="socket和并发编程"><a href="#socket和并发编程" class="headerlink" title="socket和并发编程"></a>socket和并发编程</h3><p><a href="https://www.cnblogs.com/clschao/articles/10065920.html" target="_blank" rel="noopener">https://www.cnblogs.com/clschao/articles/10065920.html</a></p><h4 id="OSI7层模型"><a href="#OSI7层模型" class="headerlink" title="OSI7层模型"></a>OSI7层模型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">物理层：基于物理链路发送比特流</span><br><span class="line">数据链路层：定义电信号的分组方式</span><br><span class="line">网络层：引入网络地址来区分不同的广播域或子网</span><br><span class="line">传输层：建立端口到端口的通信</span><br><span class="line">会话层：建立客户端到服务端的通信</span><br><span class="line">表示层：对来自应用层的命令和数据进行解释，按照一定的格式传递给会话层</span><br><span class="line">应用层：规定应用程序的数据格式</span><br></pre></td></tr></table></figure><h4 id="BS于CS架构"><a href="#BS于CS架构" class="headerlink" title="BS于CS架构"></a>BS于CS架构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BS架构是浏览器与服务器模式</span><br><span class="line">CS架构是客户端与服务器模式</span><br><span class="line">CS用户固定，需要有相对应的操作系统；BS用户不固定，只要有浏览器就可以了，和操作平台无关</span><br><span class="line">CS需要客户端的电脑要求配置要高；BS则对客户端的电脑没有太大要求</span><br><span class="line">CS需要安装必须的软件；BS不需要安装，只要有浏览器就可以，易推广</span><br><span class="line">CS的网络更加稳定，波动性小；BS网络不太稳定，波动性大</span><br><span class="line">CS对权限进行了多层校验，提供了更安全的存储模式；</span><br></pre></td></tr></table></figure><h4 id="socket套接字"><a href="#socket套接字" class="headerlink" title="socket套接字"></a>socket套接字</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scoket是位于应用层与TCP/IP协议簇通信中间的软件抽象层，它是一组接口。在设计模式中，Socket是一个8门面模式，它把复杂的TCP/IP协议簇隐藏在Socket接口后面，对用户来说，一组简单的接口就是一切，让socket去组织数据，以符合指定的协议。</span><br><span class="line"></span><br><span class="line">通信的建立：</span><br><span class="line">服务端：创建socket对象，使用bind()绑定ip和端口号，设置最大的连接数listen()，accept()与客户的connect()创建双向管道，等待连接，使用recv()和send()接发消息，使用close()关闭连接。</span><br><span class="line">客户端：创建scoket对象，connect()与服务端accept()创建双向管道，使用send()和recv()接发消息，最后close()关闭连接。</span><br></pre></td></tr></table></figure><h4 id="GIL锁"><a href="#GIL锁" class="headerlink" title="GIL锁"></a>GIL锁</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">首先，GIL锁（全局解释器锁）在是python解释器的特性，它的本质是一把互斥锁，由于在进程中，线程之间的数据是共享的，为了保证解释器内部数据的安全，就有了GIL锁，保证在同一时刻，只能有一个线程获得GIL锁并进入解释器运行，只有得等到该线程遇到阻塞释放锁，或者等到一定的时间自动释放锁，才允许其他的线程进入获得GIL锁。实现了在一个进程内线程之间的串行运行。</span><br><span class="line"></span><br><span class="line">缺点：由于这个原因，python无法利用cpu的多核资源，所以python在性能上面受到了一定的限制。</span><br><span class="line"></span><br><span class="line">解决办法：利用多进程的方式，因为每一个进程都有以吧GIL锁，但是进程之间的通信是一个比较麻烦的事情，因为进程之间是数据隔离的，只能通过其他的方式解决这个问题，同时进程消耗的资源也是非常巨大的。</span><br><span class="line">还有一种方法就是换解释器来解决这个问题，比如Jpython和Ironpython，它们是没有GIL锁的，但是他们就不能使用c里面的一些特性</span><br><span class="line"></span><br><span class="line">拓展1：这里我们将一下并发和并行的问题，只要有一个cpu那么程序永远不可能并行执行，多核到底是个什么东西？多进程可以利用多核，但是多线程不能利用多核。因为进程的开启可以cpu给他们分配内核去执行，这里不同的进程可能分配不同的核心，所以他们是可以利用多核资源的。而线程是运行在进程内部的，由于GIL锁的原因，对于多线程每次只能有一个线程获得核心运行，但是这些线程不论怎么并发执行都是使用一个核心。所以说多线程是利用不了多核的优势的。</span><br><span class="line"></span><br><span class="line">拓展二：GIL锁个普通的lock锁有什么区别呢？我们应该明确，锁的目的就是为了保护共享的数据，同一时间只能有一个线程来修改共享的数据。那么，我们就知道了不同的数据就应该加不同的锁。</span><br><span class="line">前者GIL保护的是解释器级别的数据安全，后者保护的是自己开发的应用程序的数据，所以，GIL锁根本不管应用级别的数据安全。</span><br></pre></td></tr></table></figure><p><img src="http://9017499461.linshutu.top/GIL.png" alt></p><h4 id="进程、线程、线程池"><a href="#进程、线程、线程池" class="headerlink" title="进程、线程、线程池"></a>进程、线程、线程池</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">并发：指cpu在同一时刻只能执行一条指令，我们看到的多个任务好像同时执行其实也是并发的效果，多个进程执行被cpu快速轮询执行，在我们宏观的角度上看像是同时执行的。（这是单cpu+多道技术实现的）</span><br><span class="line"></span><br><span class="line">多道技术：（多到技术针对单核而言）多道技术中的多道指的就是多个程序，多道技术就是为了解决多个程序之间的合理调度问题，解决的方式就是多路复用，多路复用分为空间上的复用和时间上的复用；在空间上，将内存分区域，一个内存可以同时加载多个进程；在时间上，实现cpu在多个进程之间来回切换，并且保留状态。</span><br><span class="line"></span><br><span class="line">进程：它是系统进行资源分配的最小单位、开销大、数据隔离（使用multiprocessing模块中的Process模块）</span><br><span class="line"></span><br><span class="line">线程：线程是进程的一个实体，是CPU调度的基本单位，是最小的执行单元。所有的线程的创建、撤销、切换的开销都远小于进程，一个进程可以拥有多个线程、数据共享（使用threading的Thread模块）。</span><br><span class="line"></span><br><span class="line">线程池的作用：（限制线程数）</span><br><span class="line">1.创建/销毁线程伴随着系统的开销，过于频繁地创建/销毁线程，在很大的成度上会影响处理效率</span><br><span class="line">2.线程并发数量过多，抢占系统资源，从而导致系统阻塞</span><br><span class="line">3.线程池能够很容易管理线程</span><br><span class="line">我们之前说的池就是解决计算机压力的问题，其实这里就可以很好的体现，比如在python里面，由于解释器的GIL锁的原因，每次只能有1个线程执行，那么开10000个线程的话，而且每个线程都会阻塞的话，由于GIL锁的因素（遇到IO阻塞线程就切换），那么这10000个之间的切换就会耗费很大的资源，会计算机造成极大的压力，所以，有了池的概念，并发的数量控制在一定的数量之内，内容以管理的同时，线程切换的时候直接调用池里面的线程，用完还回去，线程并不关闭，而是将线程放进池子里面继续等待任务，如果池子里面的线程数量不够用，那么任务就等着，等线程结束了再获取线程使用，这样对于计算机来说不会怎加操作系统的调度难度，还接生了线程开关的时间，在一定程度上还实现了并发（使用concurrent.futures下的PeocessPoolExecutor模块和ThreadPoolExecutor模块）</span><br><span class="line">池总结：</span><br><span class="line"> -不会额外开启其他进/线程、提高操作系统效率、减少空间占用</span><br><span class="line"></span><br><span class="line">拓展：</span><br><span class="line">进程中的关键字：</span><br><span class="line">p.deamon:守护进程，主进程挂了守护进程也就挂了（在进程开始之前设置）</span><br><span class="line">p.join():子进程结束之后再执行下一步，就是阻塞（好多时候，主进程需要子进程的执行结果，所以必须等待，join感觉就像是子进程和主进程拼接起来的一样，将异步改成了同步执行）</span><br><span class="line">僵尸进程（有害）：子进程结束后再被父进程回收前之前都会进入僵尸状态（解决办法：直接杀死父进程由init接管回收或者对开启的子进程使用join）</span><br><span class="line">孤儿进程（无害）：父进程挂了，子进程没结束（杀死父进程由init进行回收）</span><br><span class="line">互斥锁：from threading import Lock</span><br><span class="line">mutex = Lock()</span><br><span class="line">递归锁（from threading import RLock）:它的作用是用来解决死锁现象的,它的内部维护了一个Lock和一个counter变量，它记录获得锁的次数，直到counter=0下一个线程才能获得锁</span><br></pre></td></tr></table></figure><p><strong>线程的生命周期（进程的三态模型）</strong></p><p><img src="http://9017499461.linshutu.top/%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.JPG" alt></p><p>跳出阻塞：</p><ul><li>对于sleep来说，睡眠的时间过去之后就自动跳出了阻塞状态</li><li>对于wait来说，获得等待的通知时，就自动跳出了线程的阻塞状态</li></ul><h4 id="进程的调度"><a href="#进程的调度" class="headerlink" title="进程的调度"></a>进程的调度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#时间片轮询法</span></span><br><span class="line">它的大致思路就是让每个进程在就绪队列中的等待时间与享受服务的时间成比例。将cpu的处理时间分成固定大小的时间片，比如几十毫秒~几百毫秒。如果一个进程在被调度选中之后用完了系统规定的时间片，但是任务又未完成任务，那么它就释放自己所占有的cpu资源而排到了就绪队列的末尾，等待下一次的调度；同时，进程调度程序又去调度当前就绪队列中的第一个进程。这个过程和上面的线程的生命周期是一致的</span><br><span class="line"><span class="comment">#因为cpu的操作是非常快的，所以我们感觉多个程序像是同时执行的，其实还是并发执行的。这种方式会降低cpu的性能，若果对于一直没有IO的操作，就是计算密集型的运算，切换的时候就会降低性能。</span></span><br></pre></td></tr></table></figure><h4 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#并发的本质就是：cpu的切换+保存状态</span></span><br><span class="line">协程：单线程下实现并发，有程序自己切换，执行效率极高。</span><br><span class="line">协程是程序员自己抽象出来的，操作系统根本不知道协程的存在，也就是说一个线程遇到了IO，线程内部直接自己切换到别的任务上了，操作系统根本就发现不了，也就实现了单线程下效率最高。</span><br><span class="line">缺点：只要有一个阻塞，整个系统都会跟着阻塞，并且用不了多核的优势。（这个阻塞的意思就是对于两个切换的任务，他们如果都有阻塞的话，那么这个cpu就会一直在他两个之间进行切换，相当于死锁了）</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用greenlet模块进程任务之间的切换，比yield方便，实例化，调用switch就可以实现</span></span><br><span class="line"><span class="comment">#Gevent模块实现的就是遇到IO就自动切换，但是这种IO是自己程序内部的IO，所以，为了加强这个模块的功能，可以给它打一补丁。使用monkey里买呢的patch_all()方法打补丁就可以识别所有的IO阻塞，这样就能实现遇到IO自动切换执行。</span></span><br></pre></td></tr></table></figure><p>python中协程的发展史：</p><p><a href="https://blog.csdn.net/qq_40890660/article/details/100173367" target="_blank" rel="noopener">https://blog.csdn.net/qq_40890660/article/details/100173367</a></p><h4 id="yield实现一个协程"><a href="#yield实现一个协程" class="headerlink" title="yield实现一个协程"></a>yield实现一个协程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consume</span><span class="params">()</span>:</span></span><br><span class="line">r = <span class="string">''</span><span class="comment">#4</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:<span class="comment">#5</span></span><br><span class="line">n = <span class="keyword">yield</span> r<span class="comment">#6#14#18</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> n:  <span class="comment">#7</span></span><br><span class="line">            <span class="comment">#这一句的代码就是用于启动生成器的时候使用的</span></span><br><span class="line"><span class="keyword">return</span><span class="comment">#8</span></span><br><span class="line">print(<span class="string">f"consume:<span class="subst">&#123;n&#125;</span>"</span>)<span class="comment">#15</span></span><br><span class="line">time.sleep(<span class="number">1</span>) <span class="comment">#这个没有什么意义，就是为了显示的时候便于观察使用的   #16</span></span><br><span class="line">r = <span class="string">"执行"</span><span class="comment">#17</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">produce</span><span class="params">(c)</span>:</span></span><br><span class="line">next(c)  <span class="comment">#启动生成器 #3</span></span><br><span class="line">n = <span class="number">0</span><span class="comment">#9</span></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">5</span>:<span class="comment">#10</span></span><br><span class="line">n += <span class="number">1</span><span class="comment">#11</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">f'produce:<span class="subst">&#123;n&#125;</span>'</span>)<span class="comment">#12</span></span><br><span class="line">r = c.send(n)<span class="comment">#13#19</span></span><br><span class="line">print(<span class="string">f"consume return:<span class="subst">&#123;r&#125;</span>"</span>)<span class="comment">#20</span></span><br><span class="line">c.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">c = consume()<span class="comment">#1</span></span><br><span class="line">produce(c)<span class="comment">#2</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">produce:1</span></span><br><span class="line"><span class="string">consume:1</span></span><br><span class="line"><span class="string">consume return:执行</span></span><br><span class="line"><span class="string">produce:2</span></span><br><span class="line"><span class="string">consume:2</span></span><br><span class="line"><span class="string">consume return:执行</span></span><br><span class="line"><span class="string">produce:3</span></span><br><span class="line"><span class="string">consume:3</span></span><br><span class="line"><span class="string">consume return:执行</span></span><br><span class="line"><span class="string">produce:4</span></span><br><span class="line"><span class="string">consume:4</span></span><br><span class="line"><span class="string">consume return:执行</span></span><br><span class="line"><span class="string">produce:5</span></span><br><span class="line"><span class="string">consume:5</span></span><br><span class="line"><span class="string">consume return:执行</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">首先，线程里面多个任务之间切换执行就是协程（程序级别的切换代替系统级别的切换）</span><br><span class="line"></span><br><span class="line">代码执行流程：</span><br><span class="line"><span class="number">1.</span>首先调用consume函数，consume函数的返回是一个生成器，把这个生成器传入produce函数。</span><br><span class="line"><span class="number">2.</span>produce函数中调用next(c)启动生成器。</span><br><span class="line"><span class="number">3.</span>.计算 n = n+<span class="number">1</span> 生成数据，一旦生产了数据，调用 c.send(n) 切换到consume执行。</span><br><span class="line"><span class="number">4.</span>consume函数中拿到数据后赋值给n，继续执行<span class="keyword">yield</span>后面的语句。</span><br><span class="line"><span class="number">5.</span>consume函数中打印消费的数据，并设置返回值r，又回到循环的开始，通过<span class="keyword">yield</span>把结果传回。</span><br><span class="line"><span class="number">6.</span>produce拿到consume返回的值，继续生产下一个数据。</span><br><span class="line"><span class="number">7.5</span>个数据生产完毕后，循环结束，通过c.close()关闭consume，结束全过程。</span><br><span class="line"></span><br><span class="line"><span class="comment">#一种简单的方式实现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = <span class="keyword">yield</span></span><br><span class="line">        print(<span class="string">'处理数据%s'</span> % n)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">()</span>:</span></span><br><span class="line">    cg = consumer()</span><br><span class="line">    next(cg)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        print(<span class="string">'生产了一个%s'</span>%i)</span><br><span class="line">        cg.send(i)</span><br><span class="line"></span><br><span class="line">producer()</span><br></pre></td></tr></table></figure><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">进程的同步：也就是锁的概念</span><br><span class="line">当多进程或者多线程共同去操作同一共享的数据时，对于数据的安全是没有保障的，这个时候使用锁去控制进程或者线程串行执行，这样虽然降低了性能，但是却提高了数据的安全性。（所以使用队列可以提高性能）</span><br><span class="line"></span><br><span class="line">死锁就是指多个进程或者线程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象（互相挂起等待），若无外力作用，他们将无法推进下去。</span><br><span class="line">现象：</span><br><span class="line"> - 自己将自己锁死（多次acquire加锁）</span><br><span class="line"> - 锁嵌套引起死锁（你抢我的我抢你的）</span><br><span class="line"></span><br><span class="line"><span class="comment">#解决死锁</span></span><br><span class="line">使用Rlock（递归锁）来解决这个问题，这个递归多在内部维护了一个计数的功能，只能这个计数值等于<span class="number">0</span>才能让其他线程去竞争锁。</span><br></pre></td></tr></table></figure><h4 id="异步非阻塞"><a href="#异步非阻塞" class="headerlink" title="异步非阻塞"></a>异步非阻塞</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">这里就有几个概念问题:</span><br><span class="line">同步：就是作完一件事之后，直到返回结果，再去开启下一件事情</span><br><span class="line">异步：异步操作发起后，在没有得到结果之前，开启下一件事情</span><br><span class="line">阻塞：不会占用cpu，线程挂起</span><br><span class="line">非阻塞：就是占用cpu，没有io发生</span><br><span class="line"></span><br><span class="line">这个分为两部分来解释：</span><br><span class="line">异步的核心思想就是（回调函数）的使用，因为它在没有得到返回结果之前就去开启下一个事件，所以等上一个事件有返回结果的时候去通知之前的线程进行相应的处理。</span><br><span class="line">非阻塞就是说不会发生阻塞，继续执行下去进行其他的操作，不管其他的进程的状态</span><br><span class="line">简单的说就是：可以启动多线程，同时和多个人通信，并且在过程中没有阻塞。（阻塞与非阻塞主要是线程等待消息通知时的状态角度来说的）</span><br></pre></td></tr></table></figure><h4 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h4><p><strong>IO模型分为四种</strong>：同步阻塞IO、同步非阻塞IO、IO多路复用、异步IO</p><p><img src="https://img-blog.csdnimg.cn/20190609064420992.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20190609064131587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd4aW5kb25nMTE=,size_16,color_FFFFFF,t_70" alt></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">解释：对于网络中多个外部连接请求连接，服务器使用一个或者少量的线程来处理这些连接。</span><br><span class="line"></span><br><span class="line">为什么会有这个模型：当大量的并发的时候，我们前面学的可以使用多线程、进程、线程池解决，但是他们的处理能力也是有极限的，对于超大并发就没有办法处理，这个时候就可以使用IO多路复用来解决</span><br><span class="line"></span><br><span class="line">首先得明确两点内容：</span><br><span class="line"> - 等待数据准备</span><br><span class="line"> - 将数据从内核拷贝到进程中</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">文件描述符fd：可以接受数据的对象或者连接都可以叫做文件描述符。</span></span><br><span class="line">select大致的流程（如上图）：当用户进程调用select，这个进程就会被block，同时，kernel（内核）会监视所有的select负责的socket（也可以说select会不断轮询其负责的所有socket），当任何一个socket中的数据准备好，select就会返回数据报准备好；然后用户进程调用recvfrom操作，将数据从内核空间拷贝到用户进程。</span><br><span class="line"></span><br><span class="line">对比select/poll和epoll：</span><br><span class="line">poll和select的机制一样：（上述）,但是poll对监听列表里面的数量没有限制，而select默认限制个数是1024个。他们两个都是操作系统轮询每一个被监听的文件描述符（如果文件描述符过大效果就不好），查看是否有可读操作。</span><br><span class="line">epoll：它的监听机制就不一样，它给每一个监听的对象绑定一个回调函数，这个对象一旦有了消息，就会触发回调函数给用户发消息，用户就会进行系统调用来内核拷贝数据。（它并不会轮询监听所有的对象，这样效率就会很高）</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">select监听fd变化的过程分析</span></span><br><span class="line">首先，用户创建socket对象，拷贝监听的fd到内核空间，每一个fd会对应一张系统文件表，内核空间的fd响应数据后，就会发送信号给用户进程，告诉它数据已到；</span><br><span class="line">然后，用户进程再发送系统带哦用，将内核空间的数据copy到用户空间，同时将内核空间的数据清除，这样监听时fd再有新的数据又可以响应了。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">总结：</span></span><br><span class="line">（1）select，poll实现需要自己不断轮询所有fd集合，直到设备就绪，期间可能要睡眠和唤醒多次交替。而epoll其实也需要调用 epoll_wait不断轮询就绪链表，期间也可能多次睡眠和唤醒交替，但是它是设备就绪时，调用回调函数，把就绪fd放入就绪链表中，并唤醒在 epoll_wait中进入睡眠的进程。虽然都要睡眠和交替，但是select和poll在“醒着”的时候要遍历整个fd集合，而epoll在“醒着”的 时候只要判断一下就绪链表是否为空就行了，这节省了大量的CPU时间，这就是回调机制带来的性能提升。</span><br><span class="line"></span><br><span class="line">（2）select，poll每次调用都要把fd集合从用户态往内核态拷贝一次，并且要把current往设备等待队列中挂一次，而epoll只要 一次拷贝，而且把current往等待队列上挂也只挂一次（在epoll_wait的开始，注意这里的等待队列并不是设备等待队列，只是一个epoll内 部定义的等待队列），这也能节省不少的开销。</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/clschao/articles/9713797.html" target="_blank" rel="noopener">https://www.cnblogs.com/clschao/articles/9713797.html</a></p><h4 id="生产和消费者模型"><a href="#生产和消费者模型" class="headerlink" title="生产和消费者模型"></a>生产和消费者模型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在并发编程中使用生产者和消费者模型能够解决绝大多数并发问题，该模式通过平衡生产线程和消费线程的工作能力来提高程序的整体处理数据的速度。</span><br><span class="line">该模型就是通过一个容器（这里使用队列来实现）来解决生产者和消费者之间的强耦合关系。</span><br><span class="line">模型：生产者&lt;--&gt;队列&lt;——&gt;消费者</span><br></pre></td></tr></table></figure><h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">场景：进程池中任何一个任务一旦处理完了，就立即通知主进程，我准备好了，主进程则会调用一个函数去处理该结果，这个函数就是回调函数，这个是进程池特有的。</span><br></pre></td></tr></table></figure><h3 id="计算机操作系统"><a href="#计算机操作系统" class="headerlink" title="计算机操作系统"></a>计算机操作系统</h3><h4 id="三次握手和四次挥手的流程"><a href="#三次握手和四次挥手的流程" class="headerlink" title="三次握手和四次挥手的流程"></a>三次握手和四次挥手的流程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">三次握手的流程：</span><br><span class="line">建立连接时，客户端发送SYN包（syn=x）到服务端，并进入SYN_SENT状态，等待服务器确认</span><br><span class="line">服务端收到SYN包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（syn=y），并进入SYN_RECV状态</span><br><span class="line">客户端接受到服务端发来的SYN+ACK包，并向服务器发送确认包ACK（ack=y+1），这个包发送完毕，客户端和服务端表示建立握手完成。</span><br><span class="line"></span><br><span class="line">四次挥手的流程：</span><br><span class="line">客户端发送释放报文FIN，并携带序列号seq=u</span><br><span class="line">服务端接受到客户端的请求释放报文，并向客户端发送确认报文ACK=1和ack=u+1，并携带自己的序列号seq=v</span><br><span class="line">等到服务端发送完最后的数据，它就向客户端发送FIN请求释放报文，ack=u+1以及现在的序列号seq=w</span><br><span class="line">客户端接受到服务端发来的释放请求后，发出确认ACK=1，ack=w+1，此时客户端进入TIME_WAIT状态，等2MSL之后客户端还没有接受到FIN信号，表示挥手完成TCP断开连接</span><br><span class="line"></span><br><span class="line">客户端TCP状态迁移：        </span><br><span class="line">CLOSED-&gt;SYN_SENT-&gt;ESTABLISHED-&gt;FIN_WAIT_1-&gt;FIN_WAIT_2-&gt;TIME_WAIT-&gt;CLOSED</span><br><span class="line">服务器TCP状态迁移：      </span><br><span class="line">CLOSED-&gt;LISTEN-&gt;SYN收到-&gt;ESTABLISHED-&gt;CLOSE_WAIT-&gt;LAST_ACK-&gt;CLOSED</span><br></pre></td></tr></table></figure><h4 id="http和https"><a href="#http和https" class="headerlink" title="http和https"></a>http和https</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">http的理解：</span><br><span class="line">-超文本传输协议，一次请求一次响应之后就断开连接，这也体现出了http协议的无状态和短链接的特点。</span><br><span class="line">-它的格式包含请求和响应两个部分，请求包含请求头和请求体，\r\n用来分隔请求头和请求头；\r\n\r\n用来分隔请求头和请求体，同理响应部分。</span><br><span class="line">http和https协议都是网络传输协议，但是http协议是基于明文传输的，所以它的传输是不安全的，而https的消息传输是经过了加密的，所以，它的消息传输相对来说是安全的。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">对称改密</span></span><br><span class="line">服务端给客户端发加密消息的同时把解密的密钥发给而客户端；</span><br><span class="line">客户端给服务端回加密消息的时候也会把解密的密钥发给服务端；</span><br><span class="line">缺点：这种方式传递消息相当于把锁和钥匙放在一起，那么密钥被截获了那么这种加密的方式就失效了</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">非对称加密+动态对称密钥</span></span><br><span class="line">为了防止上面的局面，于是就想出了这种办法。</span><br><span class="line">首先在服务端生成一对公私钥，客户端向服务器请求获得公钥，服务器把公钥返回给客户端，客户端自己生成一个对称密钥，然后使用从服务器获取来的公钥对这个对称密钥进行加密发给服务端，服务端使用私钥进行解密获取这个公钥，然后双方现在都有了对称密钥，接下来的信息传输都是用它</span><br><span class="line">缺点：这种情况看起来没什么问题，但是黑客在客户端请求的时候把它的公钥给客户端，那么下面客户端发送的对称密钥黑客就可以获取到了，那么对于这种加密来说也是不安全的</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">https的最终原理（CA证书）：</span></span><br><span class="line">在网站开发完毕，先去证书认证机构申请证书，然后该机构会给申请者发方私钥和证书（包含公钥和企业的相关信息），服务器将私钥和证书部署到服务器。</span><br><span class="line">1.浏览器发出安全请求，获取证书</span><br><span class="line">2.服务器发送数字证书给客户端（证书包括服务器的公钥和相关信息）</span><br><span class="line">3.浏览器使用预置的CA证书列表（本地缓存）验证服务器发来的证书，如果验证不通过，则提示访问该网站有风险</span><br><span class="line">4.证书安正通过，浏览器生产随机的对称密钥，用服务器的公钥进行加密发给服务端</span><br><span class="line">5.服务器用自己的私钥进行其解密，得到对称密钥</span><br><span class="line">6.现在双方都知道了对称密钥，以后双方进行的消息传输都使用这个对称密钥进行数据的加密（建立了安全连接）</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">协议：SSL/TLS</span></span><br><span class="line">SSL（安全套接字层）：SSL是位于TCP/IP协议与各种应用层协议之间，为数据通讯提供安全支持。</span><br><span class="line">TSL（传输层安全协议）：用于两个应用程序之间提供保密性和数据完整性。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">解释一些概念</span></span><br><span class="line">对称加密：加密解密使用相同的密钥</span><br><span class="line">非对称密钥：加密和解密使用不同的密钥</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/wupeiqi/p/11647089.html" target="_blank" rel="noopener">https://www.cnblogs.com/wupeiqi/p/11647089.html</a></p><h4 id="为什么连接的时候是三次握手？关闭是四次挥手？"><a href="#为什么连接的时候是三次握手？关闭是四次挥手？" class="headerlink" title="为什么连接的时候是三次握手？关闭是四次挥手？"></a>为什么连接的时候是三次握手？关闭是四次挥手？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在建立连接的时候，服务端收到客户端的SYN连接请求报文后，可以直接发送SYN+ACK报文来应答，ACK是用来应答的，SYN是用来同步的。</span><br><span class="line"></span><br><span class="line">在断开连接的时候，服务端收到FIN报文，并不会立即就关闭SOCKET连接，所以就先回复确认报文ACK，接着等服务端发送完所有的报文之后再发送FIN报文，同步断开连接。</span><br></pre></td></tr></table></figure><h4 id="为什么TIME-WAIT状态需要经过2MSL才能返回CLOSE状态？"><a href="#为什么TIME-WAIT状态需要经过2MSL才能返回CLOSE状态？" class="headerlink" title="为什么TIME_WAIT状态需要经过2MSL才能返回CLOSE状态？"></a>为什么TIME_WAIT状态需要经过2MSL才能返回CLOSE状态？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">首先，这个MSL是一个单位，表示一个数据包在网络中存在的最长时间，那么2MSL就表示一个数据包在网络中一个来回存在的最长的时间 。</span><br><span class="line">我们最后的客户端发出ACK，有可能丢失，但是经过2MSL客户端还没有接受到FIN，表示ACK被服务端成功接收，TCP连接关闭。</span><br><span class="line">同时也是为了清除在上次连接在网络中可能迷路的包。下次连接的时候就不会出现出现连接上次包的情况的发生</span><br></pre></td></tr></table></figure><h4 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.TCP是面向连接（发送消息之前需要先建立连接），UDP是无连接的（发送消息之前不需要建立连接）</span><br><span class="line">2.TCP是面向字节流的（就是一串无结构的字节流），UDP是面向报文的</span><br><span class="line">3.TCP提供可靠的服务，UDP不保证可靠的服务，但是它的速度快</span><br><span class="line">4.TCP只能点到点传输，UDP可以进行一对一、一对多、多对多的通信</span><br><span class="line">5.TCP的协议头开销20个字节；UDP的协议头只开销8个字节</span><br><span class="line">总结：</span><br><span class="line">tcp面向连接、传输可靠、速度相对于较慢</span><br><span class="line">udp面向报文、可靠性差、速度快</span><br></pre></td></tr></table></figure><h4 id="粘包的了解"><a href="#粘包的了解" class="headerlink" title="粘包的了解"></a>粘包的了解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">粘包是由于接收数据方不知道发送方发送数据的界限，不知道一次性取多少字节的数据量，导致多条分散发送的数据粘合在一起变成了一条数据。</span><br><span class="line"></span><br><span class="line">粘包发生有两种情况，对于发送方，短时间内连续多次send()数据，造成多个数据连在一起发送出去造成粘包；对于接收方，接收缓冲区的大小小于发送过来的数据，只能分两次去取数据，但是，剩下的数据就会和下次发来的数据粘在一起发生粘包现象</span><br><span class="line"></span><br><span class="line">UDP永远不是发生粘包现象：说白了还是因为UDP传输是基于报文传输的而不是基于流传输的，它对数据进行了简单的封装（就是消息头），一个recv必须对应一个send，收到的数据不够就把包丢弃（这也是UDP不可靠的原因，而TCP对于没有没有收完的包下次接着收，只有等到收到ack时才会清除缓冲区），这种面向消息的通信是有消息保护边界的</span><br><span class="line"></span><br><span class="line">解决办法:把报头做成字典，字典里面包含将要发送的真实数据的描述新信息（大小等等）,然后json序列化，然后使用struck模块将序列化后的数据打包称4个字节。发送的时候先发送报头的长度；再编码报头发送；最后发送真实的数据。解码的时候反着解码就可以了。</span><br></pre></td></tr></table></figure><h4 id="虚拟内存和物理内存的区别"><a href="#虚拟内存和物理内存的区别" class="headerlink" title="虚拟内存和物理内存的区别"></a>虚拟内存和物理内存的区别</h4><p><a href="https://blog.csdn.net/lvyibin890/article/details/82217193" target="_blank" rel="noopener">https://blog.csdn.net/lvyibin890/article/details/82217193</a></p><h4 id="进程的三态模型"><a href="#进程的三态模型" class="headerlink" title="进程的三态模型"></a>进程的三态模型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">进程的生命周期可分为三种进程状态：</span><br><span class="line">运行态：占用CPU的时间，</span><br><span class="line">就绪态：具备运行的条件，等待系统分配处理器以便运行，</span><br><span class="line">阻塞态：不具备运行条件，正在等待某个事件的完成。</span><br><span class="line">运行遇到阻塞(运行态)--&gt;阻塞态  </span><br><span class="line">事件执行完成(阻塞态)--&gt;就绪态</span><br><span class="line">进程被选中(就绪态)--&gt;运行态</span><br></pre></td></tr></table></figure><h4 id="进程间的通信方式有哪些"><a href="#进程间的通信方式有哪些" class="headerlink" title="进程间的通信方式有哪些"></a>进程间的通信方式有哪些</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#基于文件</span></span><br><span class="line">这种方式的开销是非常大的，每次的操作都伴随着文件的开启和关闭，这是一个耗时的动作而且开销也很大，安全性也不高。</span><br><span class="line"><span class="comment">#队列（Queue）</span></span><br><span class="line">用于两个进程之间的通讯，首先在一个进程中中创建一个消息队列，然后再往消息队列中写数据，另一个进程中这个队列中取数据。一般推荐使用这种方式，因为它在内部使用了锁机制，保证了数据共享的安全。</span><br><span class="line"><span class="comment">#基于第三方工具</span></span><br><span class="line">比如使用redis来共享数据，但是这种方式的开销也很大，还借助了第三方的工具。</span><br><span class="line"><span class="comment">#管道</span></span><br><span class="line">管道是一种半双工的通信方式，数据只能单向流动，并且只能在父子进程之间使用。它是由内核管理的一个缓冲区，速度慢，容量有限</span><br><span class="line"><span class="comment">#信号量</span></span><br><span class="line">信号量是一个计数器，可以用来控制多个进程对共享资源的访问。</span><br><span class="line">它常作为一种锁机制，防止某进程正在访问共享资源时，其他 进程也访问该资源。因此，它主要作为进程间以及同一进程内不同线程之间的同步手段</span><br><span class="line"><span class="comment">#socket套接字</span></span><br><span class="line">套接字也是一种进程间的通信机制，与其他通信机制不同的是，它可用于不同机器间的进程通信</span><br><span class="line"><span class="comment">#IPC通信机制</span></span><br><span class="line">就是进程间通信或者跨进程通信，IPC不是指那个系统独有的，任何一个操作系统都需要相应的IPC机制，如windows里面的剪贴板、管道等。</span><br></pre></td></tr></table></figure><h3 id="数据库（mysql）"><a href="#数据库（mysql）" class="headerlink" title="数据库（mysql）"></a>数据库（mysql）</h3><h4 id="数据库引擎"><a href="#数据库引擎" class="headerlink" title="数据库引擎"></a>数据库引擎</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">什么是数据库引擎？</span><br><span class="line">每种数据库的数据格式，内部实现机制都是不同的，要利用一种开发工具访问数据库，就必须通过一种中介程序，这种开发工具与数据库之间的中介程序就叫做数据库引擎。</span><br><span class="line"></span><br><span class="line">常见的数据库引擎有有Innodb、MyISAM、Memory</span><br><span class="line">Innodb是mysql5.5版本之后默认使用的数据库引擎，它的特点就是支持事务、支持行级锁定、支持外键约束（正是由于它的这些特性，在数据一致性要求较高（事务性）或者数据交互比较频繁的场景下优势是比较明显的（行级锁定对高并发有很好的适应能力））</span><br><span class="line">MyISAM是mysql5.5版本之前默认使用的数据库引擎，它不支持事务，它支持表级锁定，它也没有外键但是支持全文索引（MyISAM有一个专门储存表索引的文件，所以说在查询速度方面来说MyISAM的效率还是可观的）</span><br><span class="line">对于Memory数据库引擎，它的数据都放在内存里面，所以它的速度是天生的快，但是它的缺点也是致命的，只要服务器宕机了或者mysqld服务挂掉了，数据就全部丢失了（所以说它主要储存的是一些临时文件和一些不是十分重要的信息）</span><br></pre></td></tr></table></figure><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">什么是事务？</span><br><span class="line">就是指逻辑上的一组sql语句操作，要么这组操作全部执行成功，要么全部失败。</span><br><span class="line"></span><br><span class="line">四大特性：</span><br><span class="line">原子性：原子性是我们对事务最直观的理解，事务中所有的sql操作要么全部执行，要么全部都不执行；</span><br><span class="line">一致性：就是值事务在执行前和执行后的状态要保持一致（比如我们事务提交到数据库了，数据还没有来的及写到磁盘，电脑宕机了，我们修好电脑并重启服务之后仍然能够将数据刷到数据库）；</span><br><span class="line">隔离性：事务在执行的时候不被其他的事务干扰，也就是说事务之间是彼此隔离的；</span><br><span class="line">持久性：事务一旦执行成功，就会永久写进磁盘，不能撤销事务，我们只能通过补偿事务的方式去变相的撤销事务（这个补偿事务就是针对我们的事务相反功能的sql语句）</span><br></pre></td></tr></table></figure><h4 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">未提交读：在一个事务中，可以读取到其他事务未提交的数据变化（引起脏读）；</span><br><span class="line">已提交读：在一个事务中，可以读取到其他事务已提交的输数据变化，这种也叫做不可重复读，因为两次查询可能会得到不一样的结果（引起幻读）；</span><br><span class="line">可重复读：这个是mysql默认的隔离级别，在一个事务中，直到事务结束前，都可以返回读取到事务刚开始读到的数据，并一直不会发生变化（就是说第一次读的时候创建了快照，以后每次查询都是第一次的快照数据），这种情况解决不了幻读的问题。</span><br><span class="line">串行化：这个是事务中最高的隔离级别，它强制事务串行化执行，避免了前面的幻读现象。（效率低下，锁的问题）</span><br><span class="line"></span><br><span class="line">扩展：</span><br><span class="line">脏读：事务A读取事务B已经修改但尚未提交的数据。若事务B回滚，事务A中的数据就会出现不一致的问题。</span><br><span class="line">幻读：事务A根据相同的条件第二次查询事务B提交的数据，两次得到的数据不一致。</span><br></pre></td></tr></table></figure><h4 id="B树和B-树"><a href="#B树和B-树" class="headerlink" title="B树和B+树"></a>B树和B+树</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">对于B+树，叶子结点只保存索引，不保存记录；对于B树叶子节点和非叶子节点都储存索引和行记录；这样的话，同样的空间，B+树能储存更多的索引，这也就意味了B+树更加矮胖，那么它的IO更少；</span><br><span class="line">对于B+树，它的所有数据都储存在叶子节点，那么，它查询的时候都会查询到叶子节点，所以查询来说更加稳定；而B树叶子节点和非叶子结点都存在记录，所以所它查询到的数据可能在叶子结点也可能在非叶子结点，那么，它的查询就不稳定</span><br><span class="line">B+树在对于范围查询时非常简便的；B树的范围查询就很复杂</span><br><span class="line"></span><br><span class="line">总结：</span><br><span class="line">B+树的IO次数更少、B+树的查询更加稳定、B+树的范围查询更加简便</span><br><span class="line"></span><br><span class="line">了解：</span><br><span class="line">B树的搜索，从根节点开始，对节点内的关键字（数据）进行二分查找，如果命中就结束查找，否则就往下一层查找直到叶子节点。</span><br><span class="line">B+树的搜索只有到达叶子结点才能命中，其性能也等价于在关键字全集做了一次二分查找。</span><br><span class="line"></span><br><span class="line">磁盘上的储存（了解索引的问题）：</span><br><span class="line">索引的读写比例一般在10:1，这里的索引就是我们的常用的键（聚焦索引、唯一索引、普通索引），它能够减少IO次数，加速查询；但是索引也不能太多，索引过多查询索引的时间就花费了很多就是在做无用功。</span><br><span class="line">B+树索引并不能找到行，只能找到行所在的页，通过把整页读入内存，再在内存中查找。而且IO的范围一般都是2-4层。考虑到磁盘IO是非常耗时的操作，所以在操作IO的时候，不光把当前磁盘地址的数据读到内存，而且把相邻的数据也读到内存中（这也是预读），每一次IO读取的数据我们称之为一页，这一页的数据量是由系统来决定的，一般为4k或者16k。</span><br><span class="line"></span><br><span class="line">补充：说一点hash吧，在MySQL里面所以有两种方式，一种是Btree的方式，还有一种是hash的方式，对于，hash的方式，它的最大的优势就是确定条件查询，毕竟这是hash的优势所在，但是让他去做范围查询就很难受了。</span><br></pre></td></tr></table></figure><p>B树：</p><p><img src="http://9017499461.linshutu.top/B%E6%A0%91.JPG" alt></p><p>B+树：</p><p><img src="http://9017499461.linshutu.top/B+%E6%A0%91.JPG" alt></p><h4 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">数据库锁的机制简单的说就是为了保证数据的一致性。</span><br><span class="line">乐观锁：</span><br><span class="line">简单的说，就是从应用系统层面上做并发控制，去加锁。实现的方式就是在数据表中增加版本号字段，每次对一条数据做更新之前，先查出该条数据的版本号，每次更新数据都会对版本号进行更新。在更新时，把之前查出的版本号根数据库中的数据的版本号进行对比，如果相同就说明该条数据没被修改过，执行更新；否则就不更新，并进行相应的提示给用户。</span><br><span class="line"></span><br><span class="line">悲观锁：</span><br><span class="line">简单的说，就是从数据库层面上做并发控制，去加锁。</span><br><span class="line">悲观锁的实现方式有两种：共享锁(读锁)和排他锁(写锁)，共享锁的实现方式是在sql后面加lock in share mode.&quot;select ... lock in share mode&quot;；排他锁实现的方式是sql后面加for update.&quot;select ... for update&quot;</span><br><span class="line"></span><br><span class="line">mysql的Innodb引擎默认的修改数据语句：update、delete、insert都会自动给涉及到的数据加上排他锁；select语句默认不会加任何类型的锁。</span><br></pre></td></tr></table></figure><h4 id="数据库优化"><a href="#数据库优化" class="headerlink" title="数据库优化"></a>数据库优化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">选用最适合的字段属性（你如邮编使用char(6)就可以了）</span><br><span class="line">使用join来代替子查询（不需要在内存创建临时表，子查询需要创建）</span><br><span class="line">使用事务（保证数据的一致性和完整性）</span><br><span class="line">使用外键（保证数据的关联性）</span><br><span class="line">使用索引（以索引为查找依据，比没有索引的效率要高很多）</span><br><span class="line">优化查询语句（sql语句使用的不恰当也会影响性能）</span><br><span class="line">进行读写分离</span><br><span class="line">分库</span><br><span class="line">分表</span><br></pre></td></tr></table></figure><h4 id="优化sql语句"><a href="#优化sql语句" class="headerlink" title="优化sql语句"></a>优化sql语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.避免使用select *</span><br><span class="line">2.使用count(1)代替count(*),他们的效果是一样的</span><br><span class="line">3.创建表的时候尽量使用char代替varchar（以空间换时间）</span><br><span class="line">4.使用组合索引并遵循最左匹配原则</span><br><span class="line">5.尽量使用短索引</span><br><span class="line">6.使用join代替子查询</span><br></pre></td></tr></table></figure><h4 id="索引失效（无法命中索引）"><a href="#索引失效（无法命中索引）" class="headerlink" title="索引失效（无法命中索引）"></a>索引失效（无法命中索引）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">索引的本质：通过不断缩小想要获取的数据的范围来筛选出最终想要的数据结果</span><br><span class="line"></span><br><span class="line">先说说索引：它的作用就是加速查询，但是主键、唯一索引和联合索引还有约束的效果。</span><br><span class="line"></span><br><span class="line">B+树索引的分类：聚集索引（就是主键）和辅助索引（除了主键都是辅助索引，有唯一索引、普通索引、联合索引）</span><br><span class="line">索引未命中：</span><br><span class="line">1.对于or查询的时候，只要有一个条件没有使用索引就无法命中</span><br><span class="line">2.对于like模糊查询，以“%”开头，索引都不会命中</span><br><span class="line">3.对于数据类型不一致的情况，比如select num from biao where num=&quot;pl&quot;，我们查询的num是一个整数类型，但是查询的时候匹配的是字符串类型，这肯定是无法命中索引的；</span><br><span class="line">4.没有查询条件或者查询条件没有建立索引也无法命中索引</span><br><span class="line">5.对于&gt;、&lt;、！=、between ... and ...这类的范围查询，如果查询的范围越大，那么消耗的时间也就也多，那么和全表扫描就没有什么区别了，所以说范围查询过大也无法命中索引；</span><br><span class="line">6.索引参与计算，也会导致索引无法命中（如果参加计算，索引都要和其他元素比较的话，显然成本太大）</span><br><span class="line">7.没有遵循联合索引最左匹配原则也会造成无法命中索引的情况</span><br><span class="line">比如index(a,b,c)这个组合索引，如果查询条件是a,a\b,a\c,c\a,c\b,a\b\c,都是可以命中索引的（ca的情况是数据库为我们做了优化），但是我们查询条件只是b..或者c..就无法命中索引。</span><br><span class="line">8.使用not in或not exist也无法命中索引</span><br><span class="line"></span><br><span class="line">扩展：组合索引最左匹配原则</span><br><span class="line">B+树是按照从左到右的顺序来建立搜索树的，比如(&quot;pl&quot;,18，&quot;男&quot;)这样的数据在检索的时候，B+树会优先比较name来确定下一步的搜索方向（就是说name匹配满足的情况下，接下来才会依次比较age和sex，最后得到检索的数据），这就是索引的最左匹配原则。</span><br></pre></td></tr></table></figure><h4 id="执行计划"><a href="#执行计划" class="headerlink" title="执行计划"></a>执行计划</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在实际数据库项目开发中，由于我们不知道实际查询时数据库里面发生了什么，也不知道数据库是如何扫描表，如何使用索引的，我们唯一能感知的就是sql语句执行的时间，使用explain关键字模拟优化器执行sql查询语句，从而知道MySQL是如何处理sql语句的。（简单的说就是分析我们写的sql语句的执行效率，对于它进行分析优化的）</span><br><span class="line">使用的话很简单，就是在我们执行的sql语句前面加上（explain）</span><br><span class="line">“explain select * from table_name;”</span><br></pre></td></tr></table></figure><h4 id="视图…"><a href="#视图…" class="headerlink" title="视图…"></a>视图…</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">视图：视图是存放在数据库里面的一张虚拟的表，一般只做查询，效率比较低。</span><br><span class="line"></span><br><span class="line">触发器：触发器也是出车呢在数据库中的sql执行，它的功能就是在我们对一张表数据进行增、删、改操作之前或者之后自动触发执行的行为。</span><br><span class="line"></span><br><span class="line">储存过程：我们操作数据库的方式有三种，一种就是纯sql操作，第二种就是ORM对象关系映射、最后一种就是储存过程，我们将sql语句保存到数据库并命名，以后我们执行该操作的时候直接调用该名称就可以执行相应的sql语句了，这个过程就是储存过程。</span><br><span class="line"></span><br><span class="line">函数：就是mysql提供给我们的许多内置函数，但是我们只能在sql语句中使用，不能单独调用。（比如数序函数、聚合函数、字符串函数等）</span><br></pre></td></tr></table></figure><h4 id="慢日志"><a href="#慢日志" class="headerlink" title="慢日志"></a>慢日志</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">什么是慢日志？</span><br><span class="line">慢日志也叫做慢查询日志，它是指sql语句执行的时间超过我们预设阀值的时间，那么就把这条sql语句记录在日志里面，存放这个sql记录的日志就叫做慢日志。这样，我们在以后做sql优化的时候就有了依据</span><br></pre></td></tr></table></figure><h4 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SQL注入就是指web应用程序对用户输入的数据内容的合法性没有进行过滤和校验，攻击者可以将自己定义的sql语句添加到web应用程序事先定义好的查询语句的结尾（比如进行登录的条件里面加一个1=True，这个条件永远成立），在管理员不知情的情况下实现非法的操作，一次来实现欺骗数据库服务器执行非授权的任意查询等操作</span><br><span class="line"></span><br><span class="line">XSS攻击：比如我们在网页进行评论，就可以将恶意的代码放到评论框中提交，这样前端和后台对我们提交的内容没有做任何的检测和过滤，我们的代码可以是一段javascript的代码，这段代码在页面展示出来可能就会对网页进行修改，某一些敏感的输入框的提交地址可以设置为我们自己的服务器，其他的用户输入一些敏感的信息我们就可以获取</span><br></pre></td></tr></table></figure><h4 id="数据库导出导入"><a href="#数据库导出导入" class="headerlink" title="数据库导出导入"></a>数据库导出导入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">导出：mysqldump -u root -p password dn_name &gt; 地址</span><br><span class="line">导入：</span><br><span class="line">方式一：</span><br><span class="line">mysql -u root -p password db_name &lt; 地址</span><br><span class="line">方式二：</span><br><span class="line">首先进入数据库mysql -u root -p password</span><br><span class="line">创建数据库create database db_name;</span><br><span class="line">进入数据库use db_name;</span><br><span class="line">导入数据source F:/db_name.sql（导入数据库的绝对路径）</span><br></pre></td></tr></table></figure><h4 id="ORM和原生SQL区别"><a href="#ORM和原生SQL区别" class="headerlink" title="ORM和原生SQL区别"></a>ORM和原生SQL区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ORM使用起来更加方便，简单，容易理解和使用，但是对于非常复杂的查询语句它是完成不了的（比如子查询+连表查询它就实现不了）</span><br><span class="line">原生SQL虽然写起来比较麻烦，但是它的速度是非常可观的。</span><br></pre></td></tr></table></figure><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#表操作</span><br><span class="line">create table t1(</span><br><span class="line">id int primary key,</span><br><span class="line">name char(32),</span><br><span class="line">pid int,</span><br><span class="line">forigen key(pid) references t2(id), #外键</span><br><span class="line">)</span><br><span class="line">#约束：</span><br><span class="line">not null不为空</span><br><span class="line">default 默认值</span><br><span class="line">unique 唯一</span><br><span class="line">primary key 主键</span><br><span class="line">index(id,name)联合</span><br><span class="line">auto_increment自增</span><br><span class="line"></span><br><span class="line">多对多的新建</span><br><span class="line">create table t3(</span><br><span class="line">id int primary key,</span><br><span class="line">sid int,</span><br><span class="line">pid int,</span><br><span class="line">foreign key(pid) references t1(id), #关联t1表</span><br><span class="line">foreign key(sid) references t2(id),#关联t2表</span><br><span class="line">)</span><br><span class="line">表的增删改查：alter table tb_name (add,drop,change)...</span><br><span class="line"></span><br><span class="line">#记录操作</span><br><span class="line">插入：insert into tb_name(字段) values(值)</span><br><span class="line">改：update tb_name set 字段=值...</span><br><span class="line">删：delete from db_name清空表（从删除的位置开始自增）</span><br><span class="line">truncate db_name清空表（从1开始自增）</span><br><span class="line">查：</span><br><span class="line">from</span><br><span class="line">where</span><br><span class="line">group by</span><br><span class="line">having</span><br><span class="line">select </span><br><span class="line">distinct</span><br><span class="line">order by</span><br><span class="line">limit</span><br><span class="line"></span><br><span class="line">#多表记录操作</span><br><span class="line">inner join</span><br><span class="line">left join</span><br><span class="line">right join</span><br><span class="line">union（全连接，连接左连接和右连接的）</span><br><span class="line">select * form dep inner join emp on dep.id=emp.pid..</span><br><span class="line">子查询（这个很好用，但是能使用上面代替的话就尽量不要使用）</span><br></pre></td></tr></table></figure><h4 id="连表查询"><a href="#连表查询" class="headerlink" title="连表查询"></a>连表查询</h4><p><img src="http://9017499461.linshutu.top/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%83%E4%B9%A0.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line">1、查询所有的课程的名称以及对应的任课老师姓名</span><br><span class="line">select course.cname,teacher.tname from course inner join teacher on teacher.tid=course.teacher_id;</span><br><span class="line"></span><br><span class="line">2、查询学生表中男女生各有多少人(gender直接可以展示性别)</span><br><span class="line">select gender,count(1) from student group by gender;</span><br><span class="line"></span><br><span class="line">3、查询物理成绩等于100的学生的姓名</span><br><span class="line">#思路：先连成绩表和课程表确定学生的id</span><br><span class="line">select student.sname from student where sid in (</span><br><span class="line">select student_id from score inner join course on score.course_id = course.cid where course.cname = &apos;物理&apos; and score.num = 100);</span><br><span class="line"></span><br><span class="line">4、查询平均成绩大于八十分的同学的姓名和平均成绩</span><br><span class="line">#思路：将平均配求出来之后再和学生表联合查询</span><br><span class="line">select student.sname,t1.avg_num from student inner join (select student_id,avg(num) as avg_num from score group by student_id having avg(num) &gt; 80) as t1 on student.sid = t1.student_id;</span><br><span class="line"></span><br><span class="line">5、查询所有学生的学号，姓名，选课数，总成绩</span><br><span class="line">SELECT</span><br><span class="line">    student.sid,</span><br><span class="line">    student.sname,</span><br><span class="line">    t1.course_num,</span><br><span class="line">    t1.total_num</span><br><span class="line">FROM</span><br><span class="line">    student</span><br><span class="line">LEFT JOIN (</span><br><span class="line">    SELECT</span><br><span class="line">        student_id,</span><br><span class="line">        COUNT(course_id) course_num,</span><br><span class="line">        sum(num) total_num</span><br><span class="line">    FROM</span><br><span class="line">        score</span><br><span class="line">    GROUP BY</span><br><span class="line">        student_id</span><br><span class="line">) AS t1 ON student.sid = t1.student_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">7、 查询没有报李平老师课的学生姓名</span><br><span class="line">SELECT</span><br><span class="line">    student.sname</span><br><span class="line">FROM</span><br><span class="line">    student</span><br><span class="line">WHERE</span><br><span class="line">    sid NOT IN (</span><br><span class="line">        SELECT DISTINCT</span><br><span class="line">            student_id</span><br><span class="line">        FROM</span><br><span class="line">            score</span><br><span class="line">        WHERE</span><br><span class="line">            course_id IN (</span><br><span class="line">                SELECT</span><br><span class="line">                    course.cid</span><br><span class="line">                FROM</span><br><span class="line">                    course</span><br><span class="line">                INNER JOIN teacher ON course.teacher_id = teacher.tid</span><br><span class="line">                WHERE</span><br><span class="line">                    teacher.tname = &apos;李平老师&apos;</span><br><span class="line">            )</span><br><span class="line">    );</span><br><span class="line">8、 查询物理课程比生物课程高的学生的学号</span><br><span class="line">SELECT</span><br><span class="line">    t1.student_id</span><br><span class="line">FROM</span><br><span class="line">    (</span><br><span class="line">        SELECT</span><br><span class="line">            student_id,</span><br><span class="line">            num</span><br><span class="line">        FROM</span><br><span class="line">            score</span><br><span class="line">        WHERE</span><br><span class="line">            course_id = (</span><br><span class="line">                SELECT</span><br><span class="line">                    cid</span><br><span class="line">                FROM</span><br><span class="line">                    course</span><br><span class="line">                WHERE</span><br><span class="line">                    cname = &apos;物理&apos;</span><br><span class="line">            )</span><br><span class="line">    ) AS t1</span><br><span class="line">INNER JOIN (</span><br><span class="line">    SELECT</span><br><span class="line">        student_id,</span><br><span class="line">        num</span><br><span class="line">    FROM</span><br><span class="line">        score</span><br><span class="line">    WHERE</span><br><span class="line">        course_id = (</span><br><span class="line">            SELECT</span><br><span class="line">                cid</span><br><span class="line">            FROM</span><br><span class="line">                course</span><br><span class="line">            WHERE</span><br><span class="line">                cname = &apos;生物&apos;</span><br><span class="line">        )</span><br><span class="line">) AS t2 ON t1.student_id = t2.student_id</span><br><span class="line">WHERE</span><br><span class="line">    t1.num &gt; t2.num;</span><br><span class="line"></span><br><span class="line">9、 查询没有同时选修物理课程和体育课程的学生姓名</span><br><span class="line">SELECT</span><br><span class="line">    student.sname</span><br><span class="line">FROM</span><br><span class="line">    student</span><br><span class="line">WHERE</span><br><span class="line">    sid IN (</span><br><span class="line">        SELECT</span><br><span class="line">            student_id</span><br><span class="line">        FROM</span><br><span class="line">            score</span><br><span class="line">        WHERE</span><br><span class="line">            course_id IN (</span><br><span class="line">                SELECT</span><br><span class="line">                    cid</span><br><span class="line">                FROM</span><br><span class="line">                    course</span><br><span class="line">                WHERE</span><br><span class="line">                    cname = &apos;物理&apos;</span><br><span class="line">                OR cname = &apos;体育&apos;</span><br><span class="line">            )</span><br><span class="line">        GROUP BY</span><br><span class="line">            student_id</span><br><span class="line">        HAVING</span><br><span class="line">            COUNT(course_id) = 1</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">10、查询挂科超过两门(包括两门)的学生姓名和班级</span><br><span class="line">、查询选修了所有课程的学生姓名</span><br><span class="line">SELECT</span><br><span class="line">    student.sname,</span><br><span class="line">    class.caption</span><br><span class="line">FROM</span><br><span class="line">    student</span><br><span class="line">INNER JOIN (</span><br><span class="line">    SELECT</span><br><span class="line">        student_id</span><br><span class="line">    FROM</span><br><span class="line">        score</span><br><span class="line">    WHERE</span><br><span class="line">        num &lt; 60</span><br><span class="line">    GROUP BY</span><br><span class="line">        student_id</span><br><span class="line">    HAVING</span><br><span class="line">        count(course_id) &gt;= 2</span><br><span class="line">) AS t1</span><br><span class="line">INNER JOIN class ON student.sid = t1.student_id</span><br><span class="line">AND student.class_id = class.cid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">16、查询所有学生考出的成绩并按从高到低排序（成绩去重）</span><br><span class="line">SELECT DISTINCT</span><br><span class="line">    num</span><br><span class="line">FROM</span><br><span class="line">    score</span><br><span class="line">ORDER BY</span><br><span class="line">    num DESC;</span><br><span class="line"></span><br><span class="line">17、查询平均成绩大于85的学生姓名和平均成绩</span><br><span class="line">SELECT</span><br><span class="line">    sname,</span><br><span class="line">    t1.avg_num</span><br><span class="line">FROM</span><br><span class="line">    student</span><br><span class="line">INNER JOIN (</span><br><span class="line">    SELECT</span><br><span class="line">        student_id,</span><br><span class="line">        avg(num) avg_num</span><br><span class="line">    FROM</span><br><span class="line">        score</span><br><span class="line">    GROUP BY</span><br><span class="line">        student_id</span><br><span class="line">    HAVING</span><br><span class="line">        AVG(num) &gt; 85</span><br><span class="line">) t1 ON student.sid = t1.student_id;</span><br><span class="line">18、查询生物成绩不及格的学生姓名和对应生物分数</span><br><span class="line">SELECT</span><br><span class="line">    sname 姓名,</span><br><span class="line">    num 生物成绩</span><br><span class="line">FROM</span><br><span class="line">    score</span><br><span class="line">LEFT JOIN course ON score.course_id = course.cid</span><br><span class="line">LEFT JOIN student ON score.student_id = student.sid</span><br><span class="line">WHERE</span><br><span class="line">    course.cname = &apos;生物&apos;</span><br><span class="line">AND score.num &lt; 60;</span><br><span class="line">19、查询在所有选修了李平老师课程的学生中，这些课程(李平老师的课程，不是所有课程)平均成绩最高的学生姓名</span><br><span class="line">SELECT</span><br><span class="line">    sname</span><br><span class="line">FROM</span><br><span class="line">    student</span><br><span class="line">WHERE</span><br><span class="line">    sid = (</span><br><span class="line">        SELECT</span><br><span class="line">            student_id</span><br><span class="line">        FROM</span><br><span class="line">            score</span><br><span class="line">        WHERE</span><br><span class="line">            course_id IN (</span><br><span class="line">                SELECT</span><br><span class="line">                    course.cid</span><br><span class="line">                FROM</span><br><span class="line">                    course</span><br><span class="line">                INNER JOIN teacher ON course.teacher_id = teacher.tid</span><br><span class="line">                WHERE</span><br><span class="line">                    teacher.tname = &apos;李平老师&apos;</span><br><span class="line">            )</span><br><span class="line">        GROUP BY</span><br><span class="line">            student_id</span><br><span class="line">        ORDER BY</span><br><span class="line">            AVG(num) DESC</span><br><span class="line">        LIMIT 1</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h4 id="建表指定引擎"><a href="#建表指定引擎" class="headerlink" title="建表指定引擎"></a>建表指定引擎</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create table t1(id int) engine=innodb;</span><br><span class="line">create table t2(id int) engine=myisam;</span><br></pre></td></tr></table></figure><h4 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">#创建无参的储存过程</span><br><span class="line">delimiter //   /*定义结束符号*/</span><br><span class="line">create procedure p1()</span><br><span class="line">begin</span><br><span class="line">select * from blog;</span><br><span class="line">end //</span><br><span class="line">delimiter ;    /*恢复;的结束意义*/</span><br><span class="line">#调用，它的调用方法和sum聚合函数是很像的</span><br><span class="line">call p1()</span><br><span class="line">#在python中的调用</span><br><span class="line">cursor.callproc(&apos;p1&apos;)</span><br><span class="line"></span><br><span class="line">#创建有参数的储存过程</span><br><span class="line">参数类型：</span><br><span class="line">-in  仅用于传入参数用</span><br><span class="line">-out  仅用于返回值用</span><br><span class="line">-inout  即可以传入又可以当作返回值</span><br><span class="line"></span><br><span class="line">#in</span><br><span class="line">delimiter //</span><br><span class="line">create procedure p2(</span><br><span class="line">in n1 int,</span><br><span class="line">)</span><br><span class="line">begin </span><br><span class="line">select * from blog where id=n1;</span><br><span class="line">end //</span><br><span class="line">delimiter ;</span><br><span class="line">#调用</span><br><span class="line">call p2(5)</span><br><span class="line">#python中调用</span><br><span class="line">cursor.callproc(&apos;p2&apos;,(5))</span><br><span class="line"></span><br><span class="line">#out</span><br><span class="line">delimiter //</span><br><span class="line">create procedure p2(</span><br><span class="line">in n1 int,</span><br><span class="line">    out res int</span><br><span class="line">)</span><br><span class="line">begin </span><br><span class="line">select * from blog where id=n1;</span><br><span class="line">set res = 1;</span><br><span class="line">end //</span><br><span class="line">delimiter ;</span><br><span class="line">#调用</span><br><span class="line">set @res=0</span><br><span class="line">call p2(5,@res)</span><br><span class="line">select @res  /*查看返回值*/</span><br><span class="line">#python中调用</span><br><span class="line">cursor.callproc(&apos;p2&apos;,(5))</span><br><span class="line"></span><br><span class="line">#inout</span><br><span class="line">delimiter //</span><br><span class="line">create procedure p3(</span><br><span class="line">inout n1 int</span><br><span class="line">)</span><br><span class="line">begin </span><br><span class="line">select * from blog where id=n1;</span><br><span class="line">set n1 = 1; /*发回值*/</span><br><span class="line">end //</span><br><span class="line">delimiter ;</span><br><span class="line">#调用</span><br><span class="line">set @x=3;</span><br><span class="line">call p3(@x)</span><br><span class="line">select @x</span><br></pre></td></tr></table></figure><h4 id="binlog日志"><a href="#binlog日志" class="headerlink" title="binlog日志"></a>binlog日志</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">binlog是记录多有数据库表结构变更以及表数据修改的二进制日志。</span><br><span class="line">#开启binlog：</span><br><span class="line">在配置文件里面添加：log-bin=mysql-bin </span><br><span class="line">#在数据备份完整情况下，binlog日志也是完整的话完全可以恢复数据库。</span><br></pre></td></tr></table></figure><h3 id="前端（不全）"><a href="#前端（不全）" class="headerlink" title="前端（不全）"></a>前端（不全）</h3><h4 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">轮询与长轮询</span><br><span class="line"></span><br><span class="line">webscoket的长连接</span><br><span class="line">协议：WebSocket 是一种标准协议，用于在客户端和服务端之间进行双向数据传输。但它跟 HTTP 没什么关系，它是基于 TCP 的一种独立实现。用来弥补http协议在持久通信能力上的不足。</span><br><span class="line"></span><br><span class="line">原理：WebSocket是HTML5下一种新的协议。它实现了浏览器与服务器全双工通信，能更好的节省服务器资源和带宽并达到实时通讯的目的。它与HTTP一样通过已建立的TCP连接来传输数据，但是它和HTTP最大不同是：</span><br><span class="line">WebSocket是一种双向通信协议。在建立连接后，WebSocket服务器端和客户端都能主动向对方发送或接收数据，就像Socket一样；</span><br><span class="line">WebSocket需要像TCP一样，先建立连接，连接成功后才能相互通信。</span><br><span class="line"></span><br><span class="line">相比HTTP长连接，WebSocket有以下特点：</span><br><span class="line">1，是真正的全双工方式，建立连接后客户端与服务器端是完全平等的，可以互相主动请求。</span><br><span class="line">2，Websocket协议通过第一个request建立了TCP连接之后，之后交换的数据都不需要发送 HTTP header就能交换数据</span><br><span class="line">3，此外还有 multiplexing、不同的URL可以复用同一个WebSocket连接等功能</span><br><span class="line"></span><br><span class="line">Wesocket协议的优点：</span><br><span class="line">Websocket协议一旦建立后，互相沟通所消耗的请求头是很小的</span><br><span class="line">服务端可以向客户端推送消息了</span><br><span class="line">Wesocket协议的缺点：</span><br><span class="line">少部分浏览器不支持，浏览器支持的成都与方式有区别</span><br><span class="line"></span><br><span class="line">Wesocket协议的应用场景：</span><br><span class="line">即时聊天通信</span><br><span class="line">多玩家游戏</span><br><span class="line">在线协同编辑</span><br><span class="line">实时数据流的拉取与推送</span><br><span class="line">体育实况</span><br><span class="line">实时地图位置</span><br></pre></td></tr></table></figure><h4 id="vue（待学习）"><a href="#vue（待学习）" class="headerlink" title="vue（待学习）"></a>vue（待学习）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="django"><a href="#django" class="headerlink" title="django"></a>django</h3><h4 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">由于浏览器的同源策略（浏览器的安全技术），它规定两个通讯地址的协议、域名、端口必须相同，否则这两个地址之间的通讯将被浏览器视为不安全的，就会被浏览器block掉。</span><br><span class="line"></span><br><span class="line">解决办法：</span><br><span class="line">方式一：CORS（跨域资源共享）</span><br><span class="line">分为两个部分，简单请求和复杂请求，针对简单请求浏览器缺少什么参数我们就在后台给浏览器返回什么参数；针对复杂请求浏览器就先发一个options请求进行预检，通过了再发送正常的数据请求。</span><br><span class="line">    </span><br><span class="line">方式二：jsonp</span><br><span class="line">解释：jsonp（json padding）是一个非官方的协议，它的本质就是利用script标签的src属性进行跨域请求，只能用于<span class="keyword">get</span>请求。</span><br><span class="line">    function func(data)&#123;</span><br><span class="line">        #跨域请求到的数据</span><br><span class="line">        alert(data)</span><br><span class="line">    &#125;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">        url:<span class="string">"index"</span>,</span><br><span class="line">        dataType:<span class="string">"jsonp"</span>,</span><br><span class="line">        jsonp:<span class="string">"callbacks"</span>,</span><br><span class="line">        jsonpCallback:<span class="string">"func"</span></span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">            alert(<span class="string">"我就是跨域请求到的数据"</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">注意：这里必须指定dataType:<span class="string">"jsonp"</span>和jsonp:<span class="string">"callback"</span>这两个参数，这里jsonp的参数可以自己定义，callbacks就是定义一个存放回调函数的键。</span><br><span class="line">#url</span><br><span class="line">http:<span class="comment">//127.0.0.1:8001/sendajax/?callbacks=func</span></span><br><span class="line">#后台代码</span><br><span class="line">def sendajax(request):</span><br><span class="line">dic = &#123;<span class="string">'k1'</span>:<span class="string">'value'</span>&#125;</span><br><span class="line">callbacks = request.GET.get(<span class="string">'callbacks'</span>)</span><br><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">'%s(%s)'</span>%(callbacks,json.dumps(dic)))</span><br></pre></td></tr></table></figure><p>xss攻击和csrf攻击：<a href="http://linshutu.top/2018/10/11/%E4%B9%A6/Django/%E7%AC%AC%E4%B9%9D%E8%AE%B2%E2%80%94%E2%80%94Django%E4%B9%8Bajax%E4%B8%8Ecsrf_token/" target="_blank" rel="noopener">http://linshutu.top/2018/10/11/%E4%B9%A6/Django/%E7%AC%AC%E4%B9%9D%E8%AE%B2%E2%80%94%E2%80%94Django%E4%B9%8Bajax%E4%B8%8Ecsrf_token/</a></p><h4 id="http请求头"><a href="#http请求头" class="headerlink" title="http请求头"></a>http请求头</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">User-Agent:标识浏览器</span><br><span class="line">Content-type:标记请求体的数据格式，服务端针对它对数据进行解析</span><br><span class="line">cookies:记录用户的状态</span><br><span class="line">connections:keep-alive，保持长连接</span><br></pre></td></tr></table></figure><h4 id="http的缓存"><a href="#http的缓存" class="headerlink" title="http的缓存"></a>http的缓存</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">主要分为两个部分：</span><br><span class="line">强制缓存（状态码200）：服务端通知浏览器一个缓存时间，在这个缓存时间内，浏览器进行相同页面的请求就直接使用浏览器中的缓存数据，如果缓存过期了，就使用协商缓存</span><br><span class="line">协商缓存（状态码304）：浏览器将缓存信息中的Etag（浏览器当前资源在服务端的唯一标识）和Last-Modifile（浏览器资源的最后修改时间）通过请求发送给服务端，服务端进行校验，比较成功，就通知浏览器之间使用缓存</span><br></pre></td></tr></table></figure><p><img src="http://9017499461.linshutu.top/Http%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6.webp" alt></p><h4 id="memcached做缓存"><a href="#memcached做缓存" class="headerlink" title="memcached做缓存"></a>memcached做缓存</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在settings中配置</span></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">'default'</span>:&#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>:<span class="string">'dajngo.core.cache.banckkends.memcached.MemcachedCache'</span>,</span><br><span class="line">        <span class="string">'LOCATION'</span>:<span class="string">'127.0.0.1:11211'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#在视图中的使用</span></span><br><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    cache.set(<span class="string">'username'</span>,<span class="string">'pl'</span>)</span><br><span class="line">    username = cache.get(<span class="string">'username'</span>)</span><br><span class="line">    <span class="keyword">if</span> request.POST.get(<span class="string">'username'</span>) == username:</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>)</span><br></pre></td></tr></table></figure><h4 id="django和flask的区别"><a href="#django和flask的区别" class="headerlink" title="django和flask的区别"></a>django和flask的区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">django是个大而全的框架，flask是一个轻量级的框架。</span><br><span class="line"></span><br><span class="line">django内部为我们提供了非常多的组件：orm / session / cookie / admin / form / modelform / 路由 / 视图 / 模板 / 中间件 / 分页 / auth / contenttype / 缓存 / 信号 / 多数据库连接</span><br><span class="line"></span><br><span class="line">flask框架本身没有太多的功能：路由/视图/模板(jinja2)/session/中间件 ，第三方组件非常齐全。</span><br><span class="line">注意：</span><br><span class="line">-django的请求处理是逐一封装和传递；</span><br><span class="line">-flask的请求是利用上下文管理来实现的。</span><br></pre></td></tr></table></figure><h4 id="wsgi"><a href="#wsgi" class="headerlink" title="wsgi"></a>wsgi</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">他是web服务网关接口，是一套协议。</span><br><span class="line">通过它实现了wsgiref、uwsgi、werkzurg等模块。这些模块的本质都是socket服务端，用于监听请求，当请求一旦到来，它就将请求数据进行封装，然后交给web框架处理。</span><br></pre></td></tr></table></figure><h4 id="内置组件"><a href="#内置组件" class="headerlink" title="内置组件"></a>内置组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">form、modelform组件：</span><br><span class="line">-对用户请求的数据进行校验</span><br><span class="line">-生成HTML标签</span><br><span class="line">信号</span><br><span class="line">解释：dajngo中的信号就是django内部为开发者预留的一些自定制功能的钩子。只要在某个信号中注册了函数，那么django内部执行的过程中就会自动触发注册在信号中的函数。</span><br><span class="line">pre_init:model执行其构造方法前自动触发</span><br><span class="line">post_init:model执行其构造方法后自动触发</span><br><span class="line">pre_save:model对象保存前，自动触发</span><br><span class="line">post_save:model对象保存后自动触发</span><br><span class="line">#使用场景</span><br><span class="line">-在数据库某些表中添加数据时，可以进行日志的记录</span><br><span class="line">CSRF</span><br><span class="line">中间件</span><br><span class="line">cookie和session</span><br><span class="line">缓存</span><br><span class="line">常用的数据就放在返回里面，在中间件的process_request方法里面去缓存中去数据返回给前端，这样就不用去走浏览器视图了</span><br></pre></td></tr></table></figure><h4 id="cookie和session"><a href="#cookie和session" class="headerlink" title="cookie和session"></a>cookie和session</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cookie和session是用来保存用户状态的技术。</span><br><span class="line">cookie是保存在客户端浏览器的键值对，明文储存，个数限制300，大小限制4KB。</span><br><span class="line">session是保存在服务端的键值对，没有大小限制，基于cookie技术。</span><br><span class="line">session的两个功能：</span><br><span class="line">-将用户相关的信息储存在服务端的数据库中</span><br><span class="line">-生成随机字符串sessionid返回给浏览器，并保存在浏览器的cookie中，浏览器请求自动携带cookieid，和服务端保存的进行比较。</span><br><span class="line">操作：</span><br><span class="line">-设置session</span><br><span class="line">request.session[&apos;键&apos;] = 值</span><br><span class="line">-获取session</span><br><span class="line">request.session.get(&quot;键&quot;)</span><br><span class="line">-session</span><br><span class="line">            request.session.flush()</span><br></pre></td></tr></table></figure><h4 id="中间件middleware"><a href="#中间件middleware" class="headerlink" title="中间件middleware"></a>中间件middleware</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#自定义中间件</span><br><span class="line">1,在应用文件夹中创建一个文件夹，并在里面新建一个py文件</span><br><span class="line">2,py文件里面写如下内容</span><br><span class="line">form django.utils.dep... import MiddleWareMixin</span><br><span class="line">class Auth(MiddleWareMixin):</span><br><span class="line">def process_request(self,request):</span><br><span class="line">xx</span><br><span class="line">3,在settings配置文件里面的Middleware列表中加上我们的中间件的路径</span><br></pre></td></tr></table></figure><h4 id="模板系统"><a href="#模板系统" class="headerlink" title="模板系统"></a>模板系统</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#母板继承</span></span><br><span class="line">&#123;% extends <span class="string">'xx.html'</span> %&#125;</span><br><span class="line">&#123;% block xx %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"><span class="comment">#组件</span></span><br><span class="line"><span class="number">1</span>,创建一个zujian.html的文件</span><br><span class="line"><span class="number">2</span>,使用组件</span><br><span class="line">&#123;% include <span class="string">'zujian.html'</span> %&#125;</span><br><span class="line"><span class="comment">#自定义过滤器(最多传递两个参数)\标签（参数无限制）</span></span><br><span class="line"><span class="number">1</span>，在应用文件中创建一个templatetags的文件夹</span><br><span class="line"><span class="number">2</span>，在该文件夹下创建一个xx.py文件</span><br><span class="line"><span class="number">3</span>，在py文件里面写如下内容</span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line">    register = template.Library()</span><br><span class="line"><span class="meta">    @register.filter  #自定义过滤器</span></span><br><span class="line"><span class="meta">    @register.simple_tag  #自定义标签</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">oo</span><span class="params">(v1,v2)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> v1+v2</span><br><span class="line"><span class="comment">#过滤器的使用</span></span><br><span class="line">    &#123;% load xx %&#125;</span><br><span class="line">    &#123;&#123;变量|oo&#125;&#125;</span><br><span class="line">    <span class="comment">#标签的使用</span></span><br><span class="line">    &#123;% load xx%&#125;</span><br><span class="line">    &#123;% oo 参数<span class="number">1</span> 参数<span class="number">2</span> %&#125;</span><br></pre></td></tr></table></figure><h4 id="MVC-MTV-MVVM"><a href="#MVC-MTV-MVVM" class="headerlink" title="MVC\MTV\MVVM"></a>MVC\MTV\MVVM</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#MTV模式</span></span><br><span class="line">M:models</span><br><span class="line">T:template</span><br><span class="line">V:views</span><br><span class="line"><span class="comment">#MVC模式</span></span><br><span class="line">M:models</span><br><span class="line">V:views</span><br><span class="line">C:controller  <span class="comment">#它相当于MTV中的路由系统</span></span><br><span class="line"><span class="comment">#MVVM模式（vue即使这种模式开发的）</span></span><br><span class="line">解释：它的核心就是提供view和viewmodel的双向数据绑定，这样使viewmodel的状态改变可以自动传递给view，也就是常说的数据双向绑定。</span><br><span class="line">MVVM 由 Model、View、ViewModel 三部分构成。</span><br><span class="line">MV：model-view</span><br><span class="line">VM：viewmodel  <span class="comment">#数据驱动视图，ViewModel将model和view联系起来，这样view和model之间谁的数据变化都会同步到对方</span></span><br></pre></td></tr></table></figure><h4 id="orm批量创建数据"><a href="#orm批量创建数据" class="headerlink" title="orm批量创建数据"></a>orm批量创建数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models.Book.objects.bluk_create(<span class="string">"xxx"</span>)</span><br></pre></td></tr></table></figure><h4 id="原生sql执行"><a href="#原生sql执行" class="headerlink" title="原生sql执行"></a>原生sql执行</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">方式一：</span><br><span class="line">extra</span><br><span class="line">方式二：</span><br><span class="line">raw</span><br><span class="line">models.UserInfo.objects.raw(<span class="string">'select * from userinfo'</span>)</span><br><span class="line">方式三：</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> connection</span><br><span class="line">cursor connection.cursor()</span><br><span class="line">cursor.execute(<span class="string">"原生sql"</span>)</span><br></pre></td></tr></table></figure><h4 id="缓存与信号"><a href="#缓存与信号" class="headerlink" title="缓存与信号"></a>缓存与信号</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">jango中提供了<span class="number">6</span>种缓存方式：</span><br><span class="line">　　开发调试（不加缓存）</span><br><span class="line">　　内存</span><br><span class="line">　　文件</span><br><span class="line">　　数据库</span><br><span class="line">　　Memcache缓存（python-memcached模块）</span><br><span class="line">　　Memcache缓存（pylibmc模块）</span><br><span class="line"></span><br><span class="line">安装第三方组件支持redis：</span><br><span class="line">　　django-redis组件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">设置缓存</span><br><span class="line"><span class="comment"># 全站缓存（中间件）</span></span><br><span class="line">MIDDLEWARE_CLASSES = (</span><br><span class="line">    ‘django.middleware.cache.UpdateCacheMiddleware’, <span class="comment">#第一</span></span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    ‘django.middleware.cache.FetchFromCacheMiddleware’, <span class="comment">#最后</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 视图缓存</span></span><br><span class="line"><span class="keyword">from</span> django.views.decorators.cache <span class="keyword">import</span> cache_page</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">  </span><br><span class="line"><span class="meta">@cache_page(15)          #超时时间为15秒</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">   t=time.time()      <span class="comment">#获取当前时间</span></span><br><span class="line">   <span class="keyword">return</span> render(request,<span class="string">"index.html"</span>,locals())</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 模板缓存</span></span><br><span class="line">&#123;% load cache %&#125;</span><br><span class="line"> &lt;h3 style="color: green"&gt;不缓存:-----&#123;&#123; t &#125;&#125;&lt;/h3&gt;</span><br><span class="line">  </span><br><span class="line">&#123;% cache <span class="number">2</span> <span class="string">'name'</span> %&#125; <span class="comment"># 存的key</span></span><br><span class="line"> &lt;h3&gt;缓存:-----:&#123;&#123; t &#125;&#125;&lt;/h3&gt;</span><br><span class="line">&#123;% endcache %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#信号</span></span><br><span class="line">在一些动作发生的前后，自动触发另外一事件，自定义信号的使用，需要注册，一般卸载项目同名文件夹下的__init__.py文件下面或者应用的初始文件夹下面</span><br><span class="line"><span class="comment">#定义信号</span></span><br><span class="line"><span class="keyword">import</span> django.dispatch</span><br><span class="line">pizza_done = django.dispatch.Signal(providing_args=[<span class="string">"toppings"</span>, <span class="string">"size"</span>])</span><br><span class="line"><span class="comment">#注册信号</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(sender, **kwargs)</span>:</span></span><br><span class="line">    print(<span class="string">"callback"</span>)</span><br><span class="line">    print(sender,kwargs)</span><br><span class="line"> </span><br><span class="line">pizza_done.connect(callback)</span><br><span class="line"><span class="comment">#触发信号</span></span><br><span class="line"><span class="keyword">from</span> 路径 <span class="keyword">import</span> pizza_done</span><br><span class="line">pizza_done.send(sender=<span class="string">'seven'</span>,toppings=<span class="number">123</span>, size=<span class="number">456</span>)</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/clschao/articles/11771397.html" target="_blank" rel="noopener">https://www.cnblogs.com/clschao/articles/11771397.html</a></p><h4 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据库同步指令</span></span><br><span class="line">python migrate --database db2</span><br><span class="line"><span class="comment">#方式一：手动</span></span><br><span class="line">models.UserInfo.objects.all().using(<span class="string">'mysql1'</span>)</span><br><span class="line"><span class="comment">#方式二：配置文件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Router</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db_for_read</span><span class="params">(self,model,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'mysql1'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db_for_write</span><span class="params">(self,model,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'mysql2'</span></span><br><span class="line">settings.py</span><br><span class="line">DATABASES = &#123;</span><br><span class="line">        <span class="string">'mysql1'</span>:&#123;&#125;,</span><br><span class="line">        <span class="string">'mysql2'</span>:&#123;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#将读写分离的类的路径在配置文件中加载</span></span><br><span class="line">    DATABASE_ROUTERS = [<span class="string">'db_router.Router'</span>]</span><br></pre></td></tr></table></figure><h4 id="request常用方法"><a href="#request常用方法" class="headerlink" title="request常用方法"></a>request常用方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">request.method</span><br><span class="line">request.path</span><br><span class="line">request.get_full_path()  <span class="comment">#获取全路径，包括url后面的参数</span></span><br><span class="line">request.POST</span><br><span class="line">request.GET</span><br><span class="line">request.META  <span class="comment">#获取请求头相关的信息</span></span><br><span class="line">request.body  <span class="comment">#获取post请求的原始信息</span></span><br><span class="line">request.is_ajax()  <span class="comment">#判断当前的请求是否是ajax请求，用来区分form表单和ajax请求</span></span><br></pre></td></tr></table></figure><h4 id="CBV与FBV"><a href="#CBV与FBV" class="headerlink" title="CBV与FBV"></a>CBV与FBV</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#url的不同</span></span><br><span class="line">url(<span class="string">'^index/$'</span>,views.IndexView.as_view())</span><br><span class="line"><span class="comment">#加装饰器（可以在三个地方加，这里就在方法上面加）</span></span><br><span class="line"><span class="keyword">from</span> dajngo.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndecView</span><span class="params">(Vew)</span>:</span></span><br><span class="line"><span class="meta">        @method_decorator("装饰器的名称")</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(delf,request)</span>:</span></span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="ORM的13个API接口"><a href="#ORM的13个API接口" class="headerlink" title="ORM的13个API接口"></a>ORM的13个API接口</h4><h4 id="F与Q"><a href="#F与Q" class="headerlink" title="F与Q"></a>F与Q</h4><h4 id="跨表查询"><a href="#跨表查询" class="headerlink" title="跨表查询"></a>跨表查询</h4><p>正查：靠属性</p><p>反查：靠小写表名</p><p><a href="http://linshutu.top/2018/09/28/%E4%B9%A6/Django/%E7%AC%AC%E4%BA%94%E8%AE%B2%E2%80%94%E2%80%94Django%E4%B9%8BORM%E6%93%8D%E4%BD%9C/" target="_blank" rel="noopener">http://linshutu.top/2018/09/28/%E4%B9%A6/Django/%E7%AC%AC%E4%BA%94%E8%AE%B2%E2%80%94%E2%80%94Django%E4%B9%8BORM%E6%93%8D%E4%BD%9C/</a></p><h4 id="事务和锁"><a href="#事务和锁" class="headerlink" title="事务和锁"></a>事务和锁</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> transaction</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xx</span><span class="params">(request)</span>:</span></span><br><span class="line">    whit transaction.atomic():</span><br><span class="line">        <span class="comment">#sql中的写法</span></span><br><span class="line">        select * <span class="keyword">from</span> book where id=<span class="number">2</span> <span class="keyword">for</span> update;</span><br><span class="line">        <span class="comment">#django中的写法</span></span><br><span class="line">        models.Book.objects.select_for_update.filter(id=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h4 id="根据数据库表生成model类"><a href="#根据数据库表生成model类" class="headerlink" title="根据数据库表生成model类"></a>根据数据库表生成model类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、修改seting文件，在setting里面设置要连接的数据库类型和名称、地址</span><br><span class="line">2、运行下面代码可以自动生成models模型文件</span><br><span class="line">       - python manage.py inspectdb</span><br><span class="line">3、创建一个app执行下下面代码：</span><br><span class="line">       - python manage.py inspectdb &gt; app/models.py</span><br></pre></td></tr></table></figure><h4 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#异步请求，局部刷新</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url:<span class="string">"xxx"</span>,</span><br><span class="line">    type:<span class="string">"get"</span>,</span><br><span class="line">    contentType:<span class="string">"application/json"</span>,</span><br><span class="line">    #django不能直接解析，drf可以直接解析</span><br><span class="line">    headers=&#123;</span><br><span class="line">    <span class="string">'xx'</span>:<span class="string">'ss'</span></span><br><span class="line">&#125;,</span><br><span class="line">    data:&#123;<span class="string">'name'</span>:<span class="string">"pl"</span>,<span class="string">'csrfmiddlewaretoken'</span>:&#123;&#123; csrf_token &#125;&#125;&#125;,</span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        alert(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">#csrf:跨站请求伪造，csrf_token是用来确保post请求是我们后台正常提供的html页面中发送来的请求</span><br><span class="line"></span><br><span class="line">#文件上传</span><br><span class="line">#通过实例化的这个对象来携带数据</span><br><span class="line"><span class="keyword">const</span> form_data = <span class="keyword">new</span> FormData()</span><br><span class="line">#这个值就是文件对象，其他非文件对象也是通过它来提交的</span><br><span class="line">form.data.append(<span class="string">'键'</span>,<span class="string">'值'</span>)</span><br><span class="line">$ajax(&#123;</span><br><span class="line">    data:form_data,</span><br><span class="line">    contentType:False,</span><br><span class="line">    ProcessData:False</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="csrf"><a href="#csrf" class="headerlink" title="csrf"></a>csrf</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># csrf_exempt -- 如果django开启了防跨域的csrf机制（settings里面的中间件）,那么加上这个装饰器的函数对应的请求不需要csrf_token认证</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># csrf_protect -- 如果django没有开启防跨域的csrf机制（settings里面的中间件）,那么加上这个装饰器的函数对应的请求必须经过csrf_token认证</span></span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt,csrf_protect</span><br><span class="line"></span><br><span class="line"><span class="meta">@csrf_exempt </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>)</span><br></pre></td></tr></table></figure><h3 id="drf"><a href="#drf" class="headerlink" title="drf"></a>drf</h3><h4 id="视图（APIView类）"><a href="#视图（APIView类）" class="headerlink" title="视图（APIView类）"></a>视图（APIView类）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        pk = kwargs.get(<span class="string">'pk'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pk:</span><br><span class="line">            queryset = models.Article.objects.all()</span><br><span class="line">            ser = serializer.ArticleSerializer(instance=queryset,many=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span> Response(ser.data)</span><br><span class="line">        article_object = models.Article.objects.filter(id=pk).first()</span><br><span class="line">        ser = serializer.ArticleSerializer(instance=article_object, many=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        ser = serializer.ArticleSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> ser.is_valid():</span><br><span class="line">            ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(ser.data)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.errors)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""全部更新"""</span></span><br><span class="line">        pk = kwargs.get(<span class="string">'pk'</span>)</span><br><span class="line">        article_object = models.Article.objects.filter(id=pk).first()</span><br><span class="line">        ser = serializer.ArticleSerializer(instance=article_object,data=request.data)</span><br><span class="line">        <span class="keyword">if</span> ser.is_valid():</span><br><span class="line">            ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(ser.data)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.errors)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">patch</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""局部"""</span></span><br><span class="line">        pk = kwargs.get(<span class="string">'pk'</span>)</span><br><span class="line">        article_object = models.Article.objects.filter(id=pk).first()</span><br><span class="line">        ser = serializer.ArticleSerializer(instance=article_object, data=request.data,partial=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> ser.is_valid():</span><br><span class="line">            ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(ser.data)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.errors)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        pk = kwargs.get(<span class="string">'pk'</span>)</span><br><span class="line">        models.Article.objects.filter(id=pk).delete()</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'删除成功'</span>)</span><br></pre></td></tr></table></figure><h4 id="序列化与关联表数据的展示"><a href="#序列化与关联表数据的展示" class="headerlink" title="序列化与关联表数据的展示"></a>序列化与关联表数据的展示</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#外键关联的表的数据的展示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式一</span></span><br><span class="line"><span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class"><span class="title">ArticleSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    model = models.Article</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br><span class="line">        <span class="comment">#这个意思就是展示深度，默认展示的深度是0,就是只展示我们的第一张表的信息，它的范围是0-10，最多关联10张表的展示，但是不推荐使用这种方式，因为这种方式展示的不需要的东西太多。</span></span><br><span class="line">        depth = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二</span></span><br><span class="line"><span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class"><span class="title">ArticleSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="comment">#这种方式就是使用这个方法里面的source源，用它就可以跨表查询我们需要的字段，后面的required=True这里是我们在写入数据不需要传值，不然就会报错</span></span><br><span class="line">    category_txt = serializers.CharField(source=<span class="string">'category.name'</span>,required=<span class="literal">False</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    model = models.Article</span><br><span class="line">        fields = [<span class="string">'title'</span>...<span class="string">'category_txt'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式三</span></span><br><span class="line"><span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class"><span class="title">ArticleSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    x1 = serializers.SerializerMethodField()</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    model = models.Article</span><br><span class="line">        fields = [<span class="string">'title'</span>...<span class="string">'category_txt'</span>]</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_x1</span><span class="params">(self,obj)</span>:</span></span><br><span class="line">        <span class="comment">#这种方式和上面的一样，这个obj就是我们针对表数据一条条的查，这里的obj就是Article，obj查到category，它就是一个跨表的category对象</span></span><br><span class="line">        <span class="keyword">return</span> obj.category.name</span><br><span class="line">    </span><br><span class="line"><span class="comment">#本表内choice字段类型数据的展示</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> api <span class="keyword">import</span> models</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="comment">#上面的方式二：这里也是使用之前的方式，但是没有加括号：因为drf为我们做了一步，检测到它是一个方法就加括号执行，没有检测到就找对应的属性</span></span><br><span class="line">    status_txt = serializers.CharField(source=<span class="string">'get_status_display'</span>,required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    x2 = serializers.SerializerMethodField()</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.Article</span><br><span class="line">        fields = [<span class="string">'id'</span>,<span class="string">'title'</span>,<span class="string">'summary'</span>,<span class="string">'content'</span>,<span class="string">'category'</span>,,<span class="string">'status_txt'</span>,,<span class="string">'x2'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#上面的方式三：这个就正常了，直接加括号</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_x2</span><span class="params">(self,obj)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> obj.get_status_display()  <span class="comment">#这个是不是和我们的ModelForm一样，对呀这就是人家开发出来的app的优势之一，使用的统一性和兼容性</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#对于跨表多对多数据的展示</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewArticleSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span> </span><br><span class="line">    tag_info = serializers.SerializerMethodField() </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span> </span><br><span class="line">        model = models.Article </span><br><span class="line">        fields = [<span class="string">'title'</span>,<span class="string">'summary'</span>,<span class="string">'tag_info'</span>] </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_tag_info</span><span class="params">(self,obj)</span>:</span> </span><br><span class="line">            <span class="comment">#对于多对多的跨表数据展示，使用钩子函数的方式，我们的obj.tag.all()取得是一个queryset()对象，在这我们就可以使用列表推导式的方式自己构建字典或者直接使用values方法，返回的就是一个字典。这和我们ORM查询时一样的正向查找使用万能的点，反向查找使用小写的表名（反向查询还可以使用xx_set的方式）</span></span><br><span class="line">            <span class="keyword">return</span> [row <span class="keyword">for</span> row <span class="keyword">in</span> obj.tag.all().values(<span class="string">'id'</span>,<span class="string">'title'</span>)]</span><br></pre></td></tr></table></figure><h4 id="分页（APIView里面）"><a href="#分页（APIView里面）" class="headerlink" title="分页（APIView里面）"></a>分页（APIView里面）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在使用APIView视图里面还需要我们手动去设置分页相关的</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(APIView)</span>:</span></span><br><span class="line">page_object = PageNumberPagination()   <span class="comment">#实例化分页</span></span><br><span class="line">result = page_object.paginate_queryset(queryset, request, self)  <span class="comment">#和数据绑定</span></span><br><span class="line">ser = PageArticleSerializer(instance=result, many=<span class="literal">True</span>)  <span class="comment">#序列化数据</span></span><br><span class="line"><span class="keyword">return</span> Response(&#123;<span class="string">'count'</span>: page_object.page.paginator.count, <span class="string">'result'</span>: ser.data&#125;)</span><br></pre></td></tr></table></figure><h4 id="分页（ListAPIView里面）"><a href="#分页（ListAPIView里面）" class="headerlink" title="分页（ListAPIView里面）"></a>分页（ListAPIView里面）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个是APIView的子类，它里面帮助我们实现了这个分页的功能，它是在GenericAPIView()类里面帮我们实现的，它里面还帮助我们实现了很多的功能，我们后面会说到，它也是ListAPIView继承的类之一。</span><br></pre></td></tr></table></figure><h4 id="筛选和视图（APIView这类）"><a href="#筛选和视图（APIView这类）" class="headerlink" title="筛选和视图（APIView这类）"></a>筛选和视图（APIView这类）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#序列化类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">comment_count = serializers.SerializerMethodField()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">model = models.Article</span><br><span class="line"><span class="comment"># fields = "__all__"</span></span><br><span class="line">exclude = [<span class="string">'author'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_comment_count</span><span class="params">(self, obj)</span>:</span></span><br><span class="line"><span class="comment"># xx_set反向查表</span></span><br><span class="line"><span class="keyword">return</span> obj.comment_set.count()</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageArticleSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="comment">#反向查表</span></span><br><span class="line">content = serializers.CharField(source=<span class="string">"articledetail.content"</span>)</span><br><span class="line">author = serializers.CharField(source=<span class="string">"author.username"</span>)</span><br><span class="line">    <span class="comment">#choice选择</span></span><br><span class="line">category = serializers.CharField(source=<span class="string">"get_category_display"</span>)</span><br><span class="line">    <span class="comment">#定义时间钩子，显示固定的格式</span></span><br><span class="line">date = serializers.SerializerMethodField()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">model = models.Article</span><br><span class="line">fields = <span class="string">"__all__"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_date</span><span class="params">(self, obj)</span>:</span></span><br><span class="line"><span class="keyword">return</span> obj.create_at.strftime(<span class="string">'%Y-%m-%d %H:%M'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#同时保存文章和文章内容两张表内容（这两张表是外键关联的关系，这里就是一对一的关系）</span></span><br><span class="line">ser = seriailzer.ArticleSerializer(data=request.data)</span><br><span class="line">ser_detail = seriailzer.ArticleDetailSerializer(data=request.data)</span><br><span class="line"><span class="comment"># 注意一点，我们post数据的时候一定要把两张表的该填的数据填上</span></span><br><span class="line"><span class="keyword">if</span> ser.is_valid() <span class="keyword">and</span> ser_detail.is_valid():</span><br><span class="line"><span class="comment"># 文章表保存之后返回的是一个对象，它里面包含了ser的所有信息</span></span><br><span class="line">article_object = ser.save(author_id=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># ser_detail.save(article.id=article_object.id)</span></span><br><span class="line"><span class="comment"># 可以使用上面的方式给我们的文章内容表的article字段加内容，也可是使用下面的方式给我们的</span></span><br><span class="line"><span class="comment"># 文章外键加内容，都是可以的</span></span><br><span class="line">ser_detail.save(article=article_object)</span><br><span class="line"><span class="keyword">return</span> Response(<span class="string">"保存成功"</span>)</span><br><span class="line"><span class="keyword">return</span> Response(<span class="string">"失败"</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#筛选也需要自己写</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.filters <span class="keyword">import</span> BaseFilterBackend</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFilterBackend</span><span class="params">(BaseFilterBackend)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">filter_queryset</span><span class="params">(self, request, queryset, view)</span>:</span></span><br><span class="line">        val = request.query_params.get(<span class="string">'cagetory'</span>)</span><br><span class="line">        <span class="keyword">return</span> queryset.filter(category_id=val)  <span class="comment">#返回过滤后的对象</span></span><br></pre></td></tr></table></figure><h4 id="视图（ListAPIView类）"><a href="#视图（ListAPIView类）" class="headerlink" title="视图（ListAPIView类）"></a>视图（ListAPIView类）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">ListAPIView（展示所有）,</span><br><span class="line">CreateAPIView（创建）,</span><br><span class="line">RetrieveAPIView（单条数据展示）,</span><br><span class="line">UpdateAPIView（更新）,</span><br><span class="line">DestroyAPIView（删除）</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagSer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.Tag</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagView</span><span class="params">(ListAPIView,CreateAPIView)</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">展示所有的数据和添加数据,这里面定义的方法都是继承的CreateAPIView类里面实现的，具体的我们后面说</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">    queryset = models.Tag.objects.all()</span><br><span class="line">    serializer_class = TagSer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        重写父类的方法，定制展示和提交数据时的serializer</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.request.method == <span class="string">'GET'</span>:</span><br><span class="line">            <span class="keyword">return</span> TagSer</span><br><span class="line">        <span class="keyword">elif</span> self.request.method == <span class="string">'POST'</span>:</span><br><span class="line">            <span class="keyword">return</span> OtherTagSer</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_create</span><span class="params">(self,serializer)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        重写父类里面的方式，自定制保存的数据</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        serializer.save(author=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagDetailView</span><span class="params">(RetrieveAPIView,UpdateAPIView,DestroyAPIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    展示单条信息，更新个删除数据：为什么和上面的分开？因为单条的展示和多条数据的展示是有冲突的</span></span><br><span class="line"><span class="string">    因为，他们里面都定义了get方法，所以我们在使用的时候把他们分开并且可定制不同的serializer</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = models.Tag.objects.all()</span><br><span class="line">    serializer_class = TagSer</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#GenericAPIView里面提供的属性和方法</span></span><br><span class="line">属性：</span><br><span class="line">查询和序列化</span><br><span class="line">-queryset 列表视图的查询集</span><br><span class="line">-serializer_class 视图使用的序列化器</span><br><span class="line">分页和过滤</span><br><span class="line">-pagination_class 分页控制类</span><br><span class="line">-filter_backends 过滤控制后端</span><br><span class="line">详情页视图使用（单条数据的处理）</span><br><span class="line">-lookup_field 查询单一数据库对象时使用的条件字段，默认为’pk‘</span><br><span class="line">    </span><br><span class="line">方法:</span><br><span class="line">    -get_queryset(self)  缓存queryset</span><br><span class="line">    -get_object(self)  返回视图显示的对象</span><br><span class="line">    -get_serializer_class(self)返回序列化类</span><br><span class="line">    -get_serializer(self, args, *kwargs)用于验证和序列化输入输出</span><br><span class="line">    -filter_queryset(self)  对给定的queryset进行过滤筛选（在这种模式下也需要自定制过滤类，重写这个方法）</span><br><span class="line">    -还有一些和分页相关的</span><br></pre></td></tr></table></figure><h4 id="drf的封装、版本、认证、权限"><a href="#drf的封装、版本、认证、权限" class="headerlink" title="drf的封装、版本、认证、权限"></a>drf的封装、版本、认证、权限</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">View</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dipatch</span><span class="params">(self)</span>:</span></span><br><span class="line">print(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APIView</span><span class="params">(View)</span>:</span></span><br><span class="line"></span><br><span class="line">    version_class = settings.xxx </span><br><span class="line">parser_class = settings.sxx</span><br><span class="line">permision_classes = []</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dipatch</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.initial()</span><br><span class="line">method = getattr(self,<span class="string">"get"</span>)</span><br><span class="line"><span class="keyword">return</span> method()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initial</span><span class="params">(self)</span>:</span></span><br><span class="line">self.version_class()</span><br><span class="line">self.parser_class()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> self.permision_classes:</span><br><span class="line"> item()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericAPIView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">queryset = <span class="literal">None</span></span><br><span class="line">serilizer_class = <span class="literal">None</span> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> self.queryset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_serilizer</span><span class="params">(self,*arg,**kwargs)</span>:</span></span><br><span class="line">cls = self.get_serilizer_class()</span><br><span class="line"><span class="keyword">return</span> cls(*arg,**kwargs)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_serilizer_class</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> self.serilizer_class</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListModelMixin</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(self)</span>:</span></span><br><span class="line">queryset = self.get_queryset()</span><br><span class="line">ser = self.get_serilizer(queryset,many=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">return</span> Reponse(ser.data)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListAPIView</span><span class="params">(ListModelMixin,GenericAPIView)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> self.list(...)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagView</span><span class="params">(ListAPIView)</span>:</span>  </span><br><span class="line">queryset = models.User.object.all()</span><br><span class="line">serilizer_class = TagSerilizer</span><br><span class="line"></span><br><span class="line">obj = TagView()</span><br><span class="line">x = obj.dispatch()</span><br></pre></td></tr></table></figure><p>走一个完整的源码流程（就是在执行视图之前的源码分析）：</p><p>路由进来走我们的as_view()类，它去调用执行dispatch()方法 ，这个方法在APIView里面，首先它执行initialize_request()方法对request进行封装，其中封装了一个get_authentications()方法，这个方法去遍历我们定义的认证相关的类并实例化封装到一个列表里面封装进了新的request里面，接着就去执行initial()方法，在这个方法里面会依次执行版本、认证、权限、和频率限制相关的方法；</p><p>对于版本会执行determine()方法，它会去找我们定义的版本相关的内容，返回一个元组，并封装进我们新的requet，</p><p>对于认证会执行perform_authentication()方法，在这个方法会执行request.user，它里面就会去调用执行我们之前封装的认证相关的类，它会返回一个元组，这个元组包括三种情况，返回一个包含用户信息和token的元组表示认证成功，返回一个空元组接着接着继续进行下一个认证，当抛出异常，表示认证失败。</p><p>对于权限，会执行check_permissions()方法，在这个方法里面首先会去找我们自定义的实例化权限类，把他们实例化封装到一个列表里面，接着 我们会循环这个列表执行实例化的权限类，如果返回True就表示我们有权限访问，否则就会抛出异常</p><p>对于频率限制，是可以进行匿名用户和登陆用户的限制的；在DRF的内部会使用一个字典来储存频率限制相关的内容，字典的键是匿名访问者的IP或者登陆用户的相关信息，而字典的值是一个列表，它里面存放的是访问者每次访问的时间。它会把最新的访问时间插入到列表的第0位。比如我们设置的访问频率是5/min,当请求到来，我们首先判断访问者的IP或者用户信息是否在这个大字典里面，如果不再就新建一个键值对储存到这个大字典里面；如果在，我们就找到相应的键的值，我们取列表的最末尾的时间和当前请求的时间进行比较，如果时间差大于60秒，表示这个时间过期了，就把它pop()掉，接着比较知道时间差在1min以内，然后我们判断列表的长度，如果它的长度在我们设置的频率限制范围内就表示可以访问，否者就不能访问。</p><h4 id="restful规范"><a href="#restful规范" class="headerlink" title="restful规范"></a>restful规范</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">restful是业界接口开发中的一套规范，它为我们的API设计提供了一组规则和约束条件，我们在开发API的时候应该遵守这些规范。</span><br><span class="line"><span class="number">1.</span>https代替http，保证数据传输时的安全</span><br><span class="line"><span class="number">2.</span>在url中体现api标识，我们一看到这个api就知道它是一个api（一般放在域名后面紧跟着域名，可以放在其他的位置，但是可能会出现跨域的问题）</span><br><span class="line"><span class="number">3.</span>在接口中要体现版本信息，（在以后的版本迭代中管理起来更加方便）</span><br><span class="line"><span class="number">4.</span>restful也称作面向资源编程，视网络上的一切都是资源，对资源可以进行操作，所以一般资源都是用名词命名</span><br><span class="line"><span class="number">5.</span>如果要 加一些筛选条件，可可以添加在url中</span><br><span class="line"><span class="number">6.</span>我们可以更具method的不同做不同的操作（get、post、put、patch、delete）</span><br><span class="line"><span class="number">7.</span>返回给用户状态码（<span class="number">2</span>xx，<span class="number">4</span>xx，还可以进行自定制） </span><br><span class="line"></span><br><span class="line"><span class="comment">#rpc，远程过程调用</span></span><br><span class="line">通俗的解释：远程调用其他程序中的功能。 </span><br><span class="line">一般适用于大型企业的内部，各部门之间的数据交互。</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于消息队列（比较多）</span></span><br><span class="line">remote.index()</span><br><span class="line"><span class="comment">#通过函数调用</span></span><br></pre></td></tr></table></figure><h4 id="接口的幂等性"><a href="#接口的幂等性" class="headerlink" title="接口的幂等性"></a>接口的幂等性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&apos;一个接口通过1次相同的访问，再对该接口进行N次相同的访问时，对资源不造影响就认为接口具有幂等性。&apos;</span><br><span class="line">    GET，  #第一次获取结果、第二次也是获取结果对资源都不会造成影响，幂等。</span><br><span class="line">    POST， #第一次新增数据，第二次也会再次新增，非幂等。</span><br><span class="line">    PUT，  #第一次更新数据，第二次不会再次更新，幂等。</span><br><span class="line">    PATCH，#第一次更新数据，第二次不会再次更新，非幂等。</span><br><span class="line">    DELTE，#第一次删除数据，第二次不在再删除，幂等。</span><br></pre></td></tr></table></figure><h4 id="跨域-1"><a href="#跨域-1" class="headerlink" title="跨域"></a>跨域</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">跨域是由于浏览器的同源策略造成的，在前后端分离项目中，前端通过ajax请求数据，如果在不同的协议、域名或者端口下发送请求都会出现跨域，浏览器就会block掉这个返回的数据。</span><br><span class="line"></span><br><span class="line">解决方案：CORS（跨域请求伪造）</span><br><span class="line">针对简单请求和复杂请求</span><br><span class="line">对于简单请求，浏览器只需要发送一次请求，前端浏览器需要什么验证信息，我们直接返回就可以</span><br><span class="line">对于复杂请求，浏览器先发送一次OPTIONS请求进行预检，预检的时候前端需要什么验证信息，我们后端就给它返回什么信息。预检通过了才能进行真正数据请求。</span><br></pre></td></tr></table></figure><h4 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jwt全称JSON Web Token，它是一种认证技术，常用在前后端分离项目中，用于和用户登陆相关的操作。在以前我们实现用户的认证都是基于session来实现的，那种方式需要在服务端保存用户的信息。</span><br><span class="line">用户登陆成功了之后，会给前端返回一段token字符串，它是由.分割的三部分的字符串组成，第一段是token的类型和加密的算法通过urlbase64进行加密产生；第二段是用户相关信息和过期时间通过urlbase64经过加密产生的；第三段信息是前两段密文通过拼接后使用hash256加密并加盐之后再通过urlbase64加密产生。</span><br><span class="line">这样，前端如果验证成功，我们就把这段这串字符串返回给它，保存再用户浏览器的cookie里面，下次再发来请求时，我们通过对这段这段字符串进行解密进行过期校验和信息校验就能成功判断该用户是否有权限对我们的资源进行访问了</span><br><span class="line">(解密：对前端发来的token进行切分成3段，前两端拼接hash256加密得到新的字符串和token的第三段进行比较，如果一致就说明数据没有被篡改，然后我们取出过期时间进行判断，如果还在活期之内就说明验证通过)</span><br><span class="line">它的优点：</span><br><span class="line">-token只保存再前端的浏览器</span><br><span class="line">-内部集成超时时间，后端可以根据时间进行校验是否超时</span><br><span class="line">-内部使用hash256进行加密，所以用户不能需改token值，只要修改了认证就会失败</span><br></pre></td></tr></table></figure><h4 id="视图的三种方式"><a href="#视图的三种方式" class="headerlink" title="视图的三种方式"></a>视图的三种方式</h4><p>APIView方式：这种方式需要我们自定制的内容比较多，它只为我们提供了版本、认证、权限和频率限制相关的功能，我们想要其他的一些功能需要我们自己写，而且，对于各种请求我峨嵋你都需要自己写</p><p>ListAPIView这一类的：他们继承了GenericAPIView和ListModelMixin这一类，它们里面就为我们封装了很多的功能，请求方法这一类的就封装在ListModelMixin里面，其他的分页过滤，序列化相关的都封装在GenericAPIView类里面，而且GenericAPIView还继承了APIView，所以，ListAPIView就自动继承了APIView的所有功能，所以说它为我们封装的这么多的功能就极大的简化了我们的工作流程</p><p>ListModelMixin这一类的：对于他们，url这里就可以看出来不一样，他们的as_view()里面会有一个字典的参数，键是请求方法，值是我们需要做的操作（list：展示所有的数据，retrieve展示单条数据，create：新建数据…….）,这样写和ListAPIView这一类有什么区别呢？针对ListAPIView，他们的视图对所有数据和单条数据的操作是分开的，因为对单条数据的操作需要传递参数。而这种方式就把单条数据的操作和多条数据的操作和起来了，就是由于它的url的的特殊造成的，对于单条数据的操作我们直接写一个方法就可以解决。我们写的类继承的有ListModelMixin以及一个GenericViewSet类，而这个GenericViewSet继承了我们的GenericAPIView。</p><h3 id="flask（不全）"><a href="#flask（不全）" class="headerlink" title="flask（不全）"></a>flask（不全）</h3><h4 id="django和flask的区别-1"><a href="#django和flask的区别-1" class="headerlink" title="django和flask的区别"></a>django和flask的区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django和flask都是基于python的web框架；其中django是一个大而全的框架，它的内部集成了非常多的组件，比如orm、admin、form、modelform、cookie、session、中间件、路由、视图、模板等等之间，我们可以基于这些组件快速地把我们的功能搭建起来。而flask是一个小巧的轻量级框架，它本身没有为我们集成太多的功能，但是它的第三方组件库是非常丰富的，我们可以基于我们的业务去导入第三方的组件，这种方法就能实现我们的功能也为我们减少了一些不必要的开销，其实他们俩的本质还是一样的，给flask集成各种功能，到最后flask就称为了django。</span><br></pre></td></tr></table></figure><h4 id="Flask依赖的组件"><a href="#Flask依赖的组件" class="headerlink" title="Flask依赖的组件"></a>Flask依赖的组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">依赖jinja2模板引擎</span><br><span class="line">依赖werkzurg协议</span><br></pre></td></tr></table></figure><h4 id="蓝图和djapp的区别"><a href="#蓝图和djapp的区别" class="headerlink" title="蓝图和djapp的区别"></a>蓝图和djapp的区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">blueprint把实现不同功能的模块分开，就是说把一个大的APP分割成各自实现了不同功能的模块，各blueprint内函数相互之间是可以调用的，需要加上对应的蓝图的名称。</span><br><span class="line">- 相同点：业务拆分、模板、静态文件。</span><br><span class="line">- 不同点：注册方式不同、内部含有before after request。</span><br></pre></td></tr></table></figure><h4 id="使用flask的第三方组件"><a href="#使用flask的第三方组件" class="headerlink" title="使用flask的第三方组件"></a>使用flask的第三方组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#第三方组件</span><br><span class="line">-wtforms快速创建前端标签、文本验证（和django的form组件的功能一样）</span><br><span class="line">-DButils创建数据库连接池</span><br><span class="line">-gevent-websocket实现websocket（django的是channels）</span><br><span class="line">-SQLALchemy第三方的ORM框架</span><br></pre></td></tr></table></figure><h4 id="Flask上下文管理流程"><a href="#Flask上下文管理流程" class="headerlink" title="Flask上下文管理流程"></a>Flask上下文管理流程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">简单描述</span></span><br><span class="line">在请求进来时：将请求相关的数据放入上下文管理中</span><br><span class="line">在视图函数中：要去上下文管理中取值</span><br><span class="line">请求响应：要将上下文管理中的数据清除</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">源码流程</span></span><br></pre></td></tr></table></figure><h4 id="Flask中g的作用"><a href="#Flask中g的作用" class="headerlink" title="Flask中g的作用"></a>Flask中g的作用</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">也是分为上下文的三部分来说</span></span><br><span class="line">g是贯穿于一次请求的全局变量，当请求进来时将g和current_app封装为一个APPContext类；</span><br><span class="line">再经过LocalStack将Appcontext放入Local中，取值时通过偏函数（partial）在LocalStack、local中取值；</span><br><span class="line">响应时将local中的g数据删除；</span><br><span class="line"></span><br><span class="line">这个需要补充，这需要说明g的作用，小的实例</span><br></pre></td></tr></table></figure><h4 id="Flask的离线脚本"><a href="#Flask的离线脚本" class="headerlink" title="Flask的离线脚本"></a>Flask的离线脚本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">为什么要Flask把Local对象中的值stack维护成一个列表？</span></span><br><span class="line">因为通过维护成列表，可以实现一个栈的数据结构，进栈出栈时只取一个数据，巧妙的简化了问题。同时，在多app的应用中，可以实现数据隔离，列表里面不会加数据，而是会生成一个新的列表，local是一个字典，字典的key（stack）是唯一标识，value是一一个列表。</span><br></pre></td></tr></table></figure><h4 id="Local"><a href="#Local" class="headerlink" title="Local"></a>Local</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">解释Flask框架中的Local对象和threading.local对象的区别？</span></span><br><span class="line">threading.local的作用是为每个线程开辟一块空间进行数据存储（或者说实现进程之间的数据隔离）</span><br><span class="line"></span><br><span class="line">在flask里面，自己通过字典创建一个类似于threading.local的东西，它不仅实现了它的功能，还可以针对协程，为每一个协程开辟一块空间进行数据的存储。</span><br></pre></td></tr></table></figure><h4 id="blinker"><a href="#blinker" class="headerlink" title="blinker"></a>blinker</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">信号主要是让开发者在flask请求的过程中定制一些行为，或者说flask在列表里面预留了几个空列表，在里面存东西。简单的说，信号允许某个发送者通知接受者有事情发生了，对比@before_request有返回值，而信号没有返回值</span><br><span class="line"><span class="comment"># 10个信号</span></span><br><span class="line"></span><br><span class="line">request_started = _signals.signal(<span class="string">'request-started'</span>) <span class="comment">#请求到来前执行</span></span><br><span class="line"></span><br><span class="line">request_finished = _signals.signal(<span class="string">'request-finished'</span>) <span class="comment">#请求结束后执行</span></span><br><span class="line"></span><br><span class="line">before_render_template = _signals.signal(<span class="string">'before-render-template'</span>)<span class="comment">#模板渲染前执行</span></span><br><span class="line"></span><br><span class="line">template_rendered = _signals.signal(<span class="string">'template-rendered'</span>)<span class="comment">#模板渲染后执行</span></span><br><span class="line"></span><br><span class="line">got_request_exception = _signals.signal(<span class="string">'got-request-exception'</span>) <span class="comment">#请求执行出现异常时执行</span></span><br><span class="line"></span><br><span class="line">request_tearing_down = _signals.signal(<span class="string">'request-tearing-down'</span>)<span class="comment">#请求执行完毕后自动执行（无论成功与否）</span></span><br><span class="line"></span><br><span class="line">appcontext_tearing_down = _signals.signal(<span class="string">'appcontext-tearing-down'</span>)<span class="comment"># 请求上下文执行完毕后自动执行（无论成功与否）</span></span><br><span class="line"></span><br><span class="line">appcontext_pushed = _signals.signal(<span class="string">'appcontext-pushed'</span>) <span class="comment">#请求app上下文push时执行</span></span><br><span class="line"></span><br><span class="line">appcontext_popped = _signals.signal(<span class="string">'appcontext-popped'</span>) <span class="comment">#请求上下文pop时执行</span></span><br><span class="line"></span><br><span class="line">message_flashed = _signals.signal(<span class="string">'message-flashed'</span>)<span class="comment">#调用flask在其中添加数据时，自动触发</span></span><br></pre></td></tr></table></figure><h4 id="SQLAlchemy"><a href="#SQLAlchemy" class="headerlink" title="SQLAlchemy"></a>SQLAlchemy</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#session和scoped_session的区别</span></span><br><span class="line">session和scopedsession本质上都是一个会话，用来操作数据库的，只是session只适合在单线程下面使用；而scoped_session 实现了一个线程的隔离,保证不同的线程拿到不同的session, 同一个线程拿到的session是同一个值(就相当于threading.local)</span><br><span class="line"><span class="comment">#SQLAlchemy如何让执行原生SQL</span></span><br><span class="line">方式一：</span><br><span class="line">cursor = session.execute(<span class="string">"select * from info"</span>)</span><br><span class="line">result = cursor.fetchall()</span><br><span class="line">方式二：</span><br><span class="line">conn = engine.raw_connection()</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">cursor.execute(<span class="string">"select * from info"</span>)</span><br><span class="line">result = cursor.fetchall()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br><span class="line"><span class="comment">#ORM的实现原理</span></span><br><span class="line">把持久化类映射成数据库中的表</span><br><span class="line">把对象映射成数据库中表的一行记录</span><br><span class="line">把对象的属性应设成数据库中表的字段</span><br><span class="line"><span class="comment">#SQLAlchemy如何设置联合唯一索引</span></span><br></pre></td></tr></table></figure><p><a href="http://linshutu.top/2019/11/15/%E4%B9%A6/flask/flask%E5%85%A5%E9%97%A8%E5%88%9D%E5%A7%8B/" target="_blank" rel="noopener">http://linshutu.top/2019/11/15/%E4%B9%A6/flask/flask%E5%85%A5%E9%97%A8%E5%88%9D%E5%A7%8B/</a></p><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><p><a href="http://linshutu.top/2019/10/31/%E4%B9%A6/redis/" target="_blank" rel="noopener">http://linshutu.top/2019/10/31/%E4%B9%A6/redis/</a></p><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><h4 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a>杀死进程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查到想要删除的进程的PID号</span></span><br><span class="line"><span class="meta">$</span><span class="bash">ps aux|grep name</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-9的意思是强行杀掉指定进程</span></span><br><span class="line"><span class="meta">$</span><span class="bash"><span class="built_in">kill</span> -9 PID</span></span><br></pre></td></tr></table></figure><h4 id="通过端口查服务"><a href="#通过端口查服务" class="headerlink" title="通过端口查服务"></a>通过端口查服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">netstat -ntup|grep PORT</span></span><br></pre></td></tr></table></figure><h4 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">find 查找的文件夹路径 -f 查找参数</span></span><br><span class="line"><span class="meta">$</span><span class="bash">find ./ -f pl</span></span><br></pre></td></tr></table></figure><h4 id="查看环境变量"><a href="#查看环境变量" class="headerlink" title="查看环境变量"></a>查看环境变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"><span class="built_in">echo</span> <span class="variable">$PATH</span></span></span><br></pre></td></tr></table></figure><h4 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">chmod 755 文件没名称  755（属组：111 组：011 其他用户：011）</span></span><br><span class="line">111代表有读、写、运行的权限</span><br></pre></td></tr></table></figure><h4 id="缩写字母含义"><a href="#缩写字母含义" class="headerlink" title="缩写字母含义"></a>缩写字母含义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QPS：每秒处理的查询量（query per second）</span><br><span class="line">PV：页面浏览量（Page View）</span><br><span class="line">UV：客户端的访问量（User View）</span><br></pre></td></tr></table></figure><h4 id="工具软件"><a href="#工具软件" class="headerlink" title="工具软件"></a>工具软件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">supervisor：管理进程，通过fork/exec的方式将这些被管理的进程当作supervisor的子进程来启动，我们只需要将要管理的进程文件的路径添加到supervisor的配置文件中就看可以直接使用。</span><br><span class="line"></span><br><span class="line">CGI：通用网关协议，效率低</span><br><span class="line">uwsgi：高效</span><br></pre></td></tr></table></figure><p><a href="http://linshutu.top/2019/10/20/%E4%B9%A6/linux/%E7%AC%AC%E4%B8%80%E8%AE%B2%E2%80%94%E2%80%94linux%E5%88%9D%E5%A7%8B%E4%B8%8E%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/" target="_blank" rel="noopener">http://linshutu.top/2019/10/20/%E4%B9%A6/linux/%E7%AC%AC%E4%B8%80%E8%AE%B2%E2%80%94%E2%80%94linux%E5%88%9D%E5%A7%8B%E4%B8%8E%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</a></p><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p><a href="http://linshutu.top/2019/10/05/%E4%B9%A6/git/git%E2%80%94%E2%80%94%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">http://linshutu.top/2019/10/05/%E4%B9%A6/git/git%E2%80%94%E2%80%94%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/</a></p><h3 id="数据结构与算法（不全）"><a href="#数据结构与算法（不全）" class="headerlink" title="数据结构与算法（不全）"></a>数据结构与算法（不全）</h3><h4 id="斐波那契数列（递归）"><a href="#斐波那契数列（递归）" class="headerlink" title="斐波那契数列（递归）"></a>斐波那契数列（递归）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(2^n):最慢的,但是最经典的</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibnacci</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> fibnacci(n<span class="number">-1</span>) + fibnacci(n<span class="number">-2</span>)</span><br><span class="line"><span class="comment">#注意，这种是利用斐波那契数列的公式实现的，它的时间复杂度就近似等于2^n，这种方式看似简单，但是有一个非常大的坑，当我们计算第100个斐波那契数的时候，可能到我们死也计算不出来（计算机大概每秒计算10^9次方左右，而100的斐波那契大的计算次数是1267650600228229401496703205376），所以它并不实用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#下面的几种方式的时间复杂度都是O(n)</span></span><br><span class="line"><span class="comment">#改良版递归实现斐波那契数列</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    li = [<span class="number">1</span>,<span class="number">1</span>] + [<span class="number">-1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n<span class="number">-2</span>)]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fibnacci</span><span class="params">(n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> li[n<span class="number">-1</span>] == <span class="number">-1</span>:</span><br><span class="line">            li[n<span class="number">-1</span>] = fibnacci(n<span class="number">-1</span>) + fibnacci(n<span class="number">-2</span>)</span><br><span class="line">        <span class="keyword">return</span> li[n<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> fibnacci(n)</span><br><span class="line"><span class="keyword">print</span> (fib(<span class="number">5</span>)) &gt;&gt;&gt;<span class="number">5</span></span><br><span class="line"><span class="comment">#这种方式的实现是开辟了一个新的列表空间来间接储存新产生的数据，所以说它的时间复杂度是O(n)，算是以时间换取空间的案例吧</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用python的生成器的方式实现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibnacci</span><span class="params">(n)</span>:</span></span><br><span class="line">    a,b = <span class="number">1</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a,b = b,a+b</span><br><span class="line"><span class="keyword">print</span> ([i <span class="keyword">for</span> i <span class="keyword">in</span> fibnacci(<span class="number">5</span>)]) &gt;&gt;&gt;[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment">#注意，这种方式不能打印b，只能打印a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用python的append的方式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibnacci</span><span class="params">(n)</span>:</span></span><br><span class="line">    li = [<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n):</span><br><span class="line">        li.append(li[<span class="number">-1</span>]+li[<span class="number">-2</span>])</span><br><span class="line">    <span class="keyword">return</span> li</span><br><span class="line"><span class="keyword">print</span> (fibnacci(<span class="number">5</span>)) &gt;&gt;&gt;[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment">#这种方式也额外开辟了一快空间，但是借助python的列表的方法来实现是非常简单的</span></span><br></pre></td></tr></table></figure><h4 id="不使用python语法实现a-b值得交换"><a href="#不使用python语法实现a-b值得交换" class="headerlink" title="不使用python语法实现a,b值得交换"></a>不使用python语法实现a,b值得交换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">a = a + b</span><br><span class="line">a = a - b</span><br><span class="line">b = a - b</span><br><span class="line"><span class="keyword">print</span> (a,b) &gt;&gt;&gt;<span class="number">2</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(li,num)</span>:</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    hight = len(l1) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> low &lt; hight:</span><br><span class="line">        mid = (low+hight) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> li[mid] == num:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> li[mid] &lt; num:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            hight = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="string">f"<span class="subst">&#123;num&#125;</span> not in this list"</span>)</span><br></pre></td></tr></table></figure><h4 id="冒泡查询-O-n-2"><a href="#冒泡查询-O-n-2" class="headerlink" title="冒泡查询(O(n^2))"></a>冒泡查询(O(n^2))</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(li)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(li)<span class="number">-1</span>):  <span class="comment">#n-1趟，就是走的多少趟</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(li)<span class="number">-1</span>-i): <span class="comment">#-i的原因是后面有序区的数据就不需要比较了</span></span><br><span class="line">            <span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>]:</span><br><span class="line">                li[j],li[j+<span class="number">1</span>] = li[j+<span class="number">1</span>],li[j]</span><br><span class="line">    <span class="keyword">return</span> li</span><br><span class="line"><span class="comment">#它的原理就是每一趟把无序区的最大的数字推到有序区，这样遍历n-1趟就可以把顺序排出来。比较相邻的两个数字，如果前面的数字比后面的数字大就交换数字，也就是把无序区的数字往有序区推的过程。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#优化一点点，就是所谓的无序区是有序的，那么就不需要再进行后面的比较了，这里使用了标记的方式实现的</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(li)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(li)<span class="number">-1</span>):</span><br><span class="line">swapped = <span class="literal">False</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(li)-i<span class="number">-1</span>):</span><br><span class="line"><span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>]:</span><br><span class="line">li[j], li[j+<span class="number">1</span>] = li[j+<span class="number">1</span>], li[j]</span><br><span class="line">swapped = <span class="literal">True</span>  <span class="comment">#如果有交换的话，就不退出，继续遍历交换</span></span><br><span class="line"><span class="keyword">if</span> swapped == <span class="literal">False</span>:</span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure><h4 id="选择排序-O-n-2"><a href="#选择排序-O-n-2" class="headerlink" title="选择排序(O(n^2))"></a>选择排序(O(n^2))</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#选择排序的思想就是有序区在前面，从后面的数据遍历，找到后面无序区最小的插到最前面，变成有序区最大的值。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selest_sort</span><span class="params">(li)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(li)<span class="number">-1</span>): <span class="comment">#遍历n-1趟</span></span><br><span class="line">mos_id = i <span class="comment">#这个就是紧邻有序区的数字，待交换</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(mos_id+<span class="number">1</span>,len(li)): <span class="comment">#遍历找到最小值</span></span><br><span class="line"><span class="keyword">if</span> li[j] &lt; li[mos_id]:</span><br><span class="line">mos_id = j  <span class="comment">#无序区有最小值交换</span></span><br><span class="line">li[mos_id],li[i] = li[i],li[mos_id]</span><br><span class="line"><span class="keyword">return</span> li</span><br></pre></td></tr></table></figure><h4 id="插入排序-O-n-2"><a href="#插入排序-O-n-2" class="headerlink" title="插入排序(O(n^2))"></a>插入排序(O(n^2))</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这个的原理也是以左边的区域为有序区，遍历右面无序区的数据，把他们取到之后和有序区的数字进行比较，然后在合适的位置插入进去</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(li)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(li)):  <span class="comment"># i表示要插入的数的下标</span></span><br><span class="line">tmp = li[i]  <span class="comment"># 把取得的数存起来</span></span><br><span class="line">j = i - <span class="number">1</span>  <span class="comment"># j就是有序取要比较的数的下标</span></span><br><span class="line"><span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> li[j] &gt; tmp:  <span class="comment"># 决定什么时候停止循环，把tmp插入到对应的位置上。两个终止条件：1，j的位置的值比tmp小，2，j=-1已经移动到最前面的</span></span><br><span class="line">li[j + <span class="number">1</span>] = li[j]</span><br><span class="line">j -= <span class="number">1</span></span><br><span class="line">li[j + <span class="number">1</span>] = tmp</span><br><span class="line"><span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line">li = [<span class="number">1</span>, <span class="number">2132</span>, <span class="number">43</span>, <span class="number">31</span>, <span class="number">534</span>, <span class="number">31</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">543</span>, <span class="number">132</span>, <span class="number">15</span>, <span class="number">34</span>, <span class="number">31</span>, <span class="number">3</span>, <span class="number">165</span>, <span class="number">34</span>, <span class="number">31</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">132</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">print</span> (insert_sort(li))</span><br></pre></td></tr></table></figure><h4 id="快速排序-nlogn"><a href="#快速排序-nlogn" class="headerlink" title="快速排序(nlogn)"></a>快速排序(nlogn)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="两个队列实现一个栈"><a href="#两个队列实现一个栈" class="headerlink" title="两个队列实现一个栈"></a>两个队列实现一个栈</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">思路：栈（后进先出）</span><br><span class="line">进栈：元素如队列<span class="number">1</span></span><br><span class="line">出栈：判断队列<span class="number">1</span>中是否只有一个元素，直接出队。否则<span class="number">1</span>中元素出队并入队<span class="number">2</span>，直到<span class="number">1</span>中只有一个元素，直接出队</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoQueueOneStack</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.queue1 = []</span><br><span class="line">        self.queue2 = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self,item)</span>:</span></span><br><span class="line">        <span class="comment">#进队</span></span><br><span class="line">        self.queue1.append(item)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#弹出到最后一个为止</span></span><br><span class="line">        <span class="comment">#队列1和2交换为止</span></span><br><span class="line">        <span class="comment">#弹出队列2中的元素</span></span><br><span class="line">        <span class="keyword">if</span> len(self.queue1) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> len(self.queue1) != <span class="number">1</span>:</span><br><span class="line">            <span class="comment">#这里1把最后一个进来的元素留下，下面交换的时候，把这最后进来的数据给了2，这样pop的时候就把后进来的数据pop出去</span></span><br><span class="line">        self.queue2.append(self.queue1.pop(<span class="number">0</span>))</span><br><span class="line">        self.queue1,self.queue2 = self.queue2,self.queue1</span><br><span class="line">        <span class="keyword">return</span> self.queue2.pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">stack = TwoQueueOneStack()</span><br><span class="line">stack.push(<span class="number">1</span>)</span><br><span class="line">stack.pop()</span><br></pre></td></tr></table></figure><h4 id="获取列表第二大值"><a href="#获取列表第二大值" class="headerlink" title="获取列表第二大值"></a>获取列表第二大值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">second_max_value</span><span class="params">(data_list)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> data_list[<span class="number">0</span>] &gt; data_list[<span class="number">1</span>]:</span><br><span class="line">        max_value = data_list[<span class="number">0</span>]</span><br><span class="line">        next_max_value = data_list[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        max_value = data_list[<span class="number">1</span>]</span><br><span class="line">        next_max_value = data_list[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> range(<span class="number">2</span>,len(data_list)):</span><br><span class="line">        <span class="keyword">if</span> data_list[idx] &gt; max_value:</span><br><span class="line">            next_max_value,max_value = max_value,data_list[idx]</span><br><span class="line">        <span class="keyword">elif</span> data_list[idx] &gt; next_max_value:</span><br><span class="line">            next_max_value = data_list[idx]</span><br><span class="line">    <span class="keyword">return</span> next_max_value</span><br><span class="line"></span><br><span class="line">result = second_max_value([<span class="number">-6</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">-100</span>])</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h4 id="python实现链表"><a href="#python实现链表" class="headerlink" title="python实现链表"></a>python实现链表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,value,next=None)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line">        self.next = next</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建第一个节点</span></span><br><span class="line">head = Node(<span class="string">'123'</span>, <span class="literal">None</span>)</span><br><span class="line">last = head</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    node = Node(i, <span class="literal">None</span>)</span><br><span class="line">    last.next = node</span><br><span class="line">    last = node</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">obj3 = Node(<span class="number">999</span>)</span><br><span class="line">obj2 = Node(<span class="number">124</span>,obj3)</span><br><span class="line">obj1 = Node(<span class="number">123</span>,obj2)</span><br><span class="line"></span><br><span class="line">obj1.value</span><br><span class="line">obj1.next.value</span><br><span class="line">obj1.next.next.value</span><br></pre></td></tr></table></figure><h4 id="链表逆置"><a href="#链表逆置" class="headerlink" title="链表逆置"></a>链表逆置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_linked_list</span><span class="params">(head)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    链表逆置</span></span><br><span class="line"><span class="string">    :param head:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next:</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">    prev_node = <span class="literal">None</span></span><br><span class="line">    current_node = head</span><br><span class="line">    next_node = head.next</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        current_node.next = prev_node</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> next_node:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        prev_node = current_node</span><br><span class="line">        current_node = next_node</span><br><span class="line">        next_node = current_node.next</span><br><span class="line">    <span class="keyword">return</span> current_node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new_head = reverse_linked_list(head)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'逆转之后：'</span>)</span><br><span class="line">print(new_head.value)</span><br><span class="line">print(new_head.next.value)</span><br><span class="line">print(new_head.next.next.value)</span><br><span class="line">print(new_head.next.next.next.value)</span><br><span class="line">print(new_head.next.next.next.next.value)</span><br><span class="line">print(new_head.next.next.next.next.next.value)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;python基础&quot;&gt;&lt;a href=&quot;#python基础&quot; class=&quot;headerlink&quot; title=&quot;python基础&quot;&gt;&lt;/a&gt;python基础&lt;/h3&gt;&lt;h4 id=&quot;编程语言之间区别&quot;&gt;&lt;a href=&quot;#编程语言之间区别&quot; class=&quot;headerlink&quot; title=&quot;编程语言之间区别&quot;&gt;&lt;/a&gt;编程语言之间区别&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;C语言：像C# 、Java、Python等高级语言底层均是由C语言开发完成的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;C++：是C语言的加强版，在C语言上进行类库等功能的扩展。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Java：全球应用最广泛的编程语言。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;C#：由微软开发，以前只能运行在windowns服务器（windows服务器花钱）。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PHP：主要应用于网站的快速开发。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Go: 是谷歌开发一门编程语言，主要用于后端的开发（容器时代+并发性能高）。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Python：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	从诞生至今自然生长，多年的累积致使他在各个领域都积累了大量类库。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	语言简洁。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="小绿本" scheme="https://pl1649947109.github.io/pl1649947109/tags/%E5%B0%8F%E7%BB%BF%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>第四讲——flask上下文管理源码剖析</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/24/%E4%B9%A6/flask/%E7%AC%AC%E5%9B%9B%E8%AE%B2%E2%80%94%E2%80%94flask%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/24/书/flask/第四讲——flask上下文管理源码剖析/</id>
    <published>2019-11-24T12:00:00.000Z</published>
    <updated>2019-11-26T09:02:55.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内容回顾"><a href="#内容回顾" class="headerlink" title="内容回顾"></a>内容回顾</h2><p>1.django和flask的区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 概括的区别</span><br><span class="line">- django中提供功能列举</span><br><span class="line">- 请求处理机制不同，django是通过传参的形式，flask是通过上下文管理的方式实现。</span><br></pre></td></tr></table></figure><p>2.wsgi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">django和flask内部都没有实现socket，而是wsgi实现。</span><br><span class="line">wsgi是web服务网管接口，他是一个协议，实现它的协议的有：wsgiref/werkzurg/uwsgi</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django之前</span></span><br><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/html'</span>)])</span><br><span class="line">    <span class="keyword">return</span> [bytes(<span class="string">'&lt;h1&gt;Hello, web!&lt;/h1&gt;'</span>, encoding=<span class="string">'utf-8'</span>), ]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    httpd = make_server(<span class="string">'127.0.0.1'</span>, <span class="number">8000</span>, run)</span><br><span class="line">    httpd.serve_forever()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flask之前</span></span><br><span class="line"><span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line"><span class="keyword">from</span> werkzeug.wrappers <span class="keyword">import</span> BaseResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    print(<span class="string">'请求来了'</span>)</span><br><span class="line">    response = BaseResponse(<span class="string">'你好'</span>)</span><br><span class="line">    <span class="keyword">return</span> response(environ, start_response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run_simple(<span class="string">'127.0.0.1'</span>, <span class="number">5000</span>, func)</span><br></pre></td></tr></table></figure><a id="more"></a><p>3.web框架都有的功能：路由、视图、模板</p><p>4.before_request/after_request</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">相当于django的中间件，对所有的请求定制功能。</span><br></pre></td></tr></table></figure><p>5.tempalte_global / template_filter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定制在所有模板中都可以使用函数</span><br></pre></td></tr></table></figure><p>6.路由系统处理本质 @app.route</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将url和函数打包成rule，添加到map对象，map再放到app中。</span><br></pre></td></tr></table></figure><p>7.路由</p><ul><li>装饰器实现 / add_url_rule</li><li>endpoint</li><li>动态路由</li><li>如果给视图加装饰器：放route下面 、 functools</li></ul><p>8.视图</p><ul><li>FBV</li><li>CBV（返回一个view函数，闭包的应用场景）</li><li>应用到的功能都是通过导入方式：request/session</li></ul><p>9.flask中支持session</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">默认将session加密，然后保存在浏览器的cookie中。</span><br></pre></td></tr></table></figure><p>10.模板比django方便一点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">支持python原生的语法</span><br></pre></td></tr></table></figure><p>11.蓝图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">帮助我们可以对很多的业务功能做拆分，创建多个py文件，把各个功能放置到各个蓝图，最后再将蓝图注册到flask对象中。 </span><br><span class="line"></span><br><span class="line">帮助我们做目录结构的拆分。</span><br></pre></td></tr></table></figure><p>12.threading.local对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自动为每个线程开辟空间，让你进行存取值。</span><br></pre></td></tr></table></figure><p>13.数据库链接池 DBUtils （SQLHelper）</p><p>14.面向对象上下文管理（with)</p><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><ul><li>flask上下文源码</li><li>flask的扩展</li></ul><h2 id="内容详细"><a href="#内容详细" class="headerlink" title="内容详细"></a>内容详细</h2><h3 id="1-栈"><a href="#1-栈" class="headerlink" title="1. 栈"></a>1. 栈</h3><p>后进先出，通过列表可以实现一个栈。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line">v.append(<span class="number">44</span>)</span><br><span class="line">v.pop()</span><br></pre></td></tr></table></figure><p>应用场景：</p><ul><li>节流</li></ul><h3 id="2-面向对象"><a href="#2-面向对象" class="headerlink" title="2. 面向对象"></a>2. 面向对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        print(key,value)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        print(item)</span><br><span class="line"></span><br><span class="line">obj = Foo()  <span class="comment">#触发__setattr__</span></span><br><span class="line">obj.x = <span class="number">123</span> </span><br><span class="line">obj.x    <span class="comment">#触发__getattr__</span></span><br></pre></td></tr></table></figure><ul><li>drf中request</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">request.data</span><br><span class="line">request.query_params</span><br><span class="line">request._request</span><br><span class="line">request._request.POST</span><br><span class="line">request._request.GET</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># self.storage = &#123;&#125;</span></span><br><span class="line">        object.__setattr__(self,<span class="string">"storage"</span>,&#123;&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        self.storage[key] = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span>    <span class="comment">#一直在这循环</span></span><br><span class="line">        <span class="keyword">return</span> self.storage.get(item)</span><br><span class="line"></span><br><span class="line">local = Local()</span><br><span class="line">local.x1 = <span class="number">123</span></span><br><span class="line">print(local.x1)</span><br></pre></td></tr></table></figure><h3 id="3-线程唯一标识"><a href="#3-线程唯一标识" class="headerlink" title="3.线程唯一标识"></a>3.线程唯一标识</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> get_ident</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">()</span>:</span></span><br><span class="line">    ident = get_ident()  <span class="comment">#获取线程ID</span></span><br><span class="line">    print(ident)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    t = threading.Thread(target=task)</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><h3 id="4-自定义threading-local"><a href="#4-自定义threading-local" class="headerlink" title="4.自定义threading.local"></a>4.自定义threading.local</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">storage = &#123;</span></span><br><span class="line"><span class="string">    1111:&#123;'x1':[0,1,2,3]&#125;,  #每一个线程，里面键是固定名称，值是一个列表（这就是那个神奇的地方）</span></span><br><span class="line"><span class="string">    1112:&#123;'x1':1&#125;</span></span><br><span class="line"><span class="string">    1113:&#123;'x1':2&#125;</span></span><br><span class="line"><span class="string">    1114:&#123;'x1':3&#125;</span></span><br><span class="line"><span class="string">    1115:&#123;'x1':4&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#程序就来触发它的执行</span></span><br><span class="line">        object.__setattr__(self,<span class="string">'storage'</span>,&#123;&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        <span class="comment">#ident是线程ID</span></span><br><span class="line">        ident = threading.get_ident()</span><br><span class="line">        <span class="comment">#判断线程该线程是否在storage字典里面，有就把传来的值存里面，没有就新建一条数据</span></span><br><span class="line">        <span class="keyword">if</span> ident <span class="keyword">in</span> self.storage:</span><br><span class="line">            self.storage[ident][key] = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.storage[ident] = &#123;key:value&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="comment">#取对象值得时候触发，获取线程ID</span></span><br><span class="line">        ident = threading.get_ident()</span><br><span class="line">        <span class="comment">#有就返回值没有就返回None</span></span><br><span class="line">        <span class="keyword">if</span> ident <span class="keyword">not</span> <span class="keyword">in</span> self.storage:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">return</span> self.storage[ident].get(item)</span><br><span class="line"></span><br><span class="line">local = Local()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(arg)</span>:</span></span><br><span class="line">    local.x1 = arg</span><br><span class="line">    print(local.x1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    t = threading.Thread(target=task,args=(i,))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><h3 id="5-加强版threading-local"><a href="#5-加强版threading-local" class="headerlink" title="5.加强版threading.local"></a>5.加强版threading.local</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">storage = &#123;</span></span><br><span class="line"><span class="string">    1111:&#123;'x1':[]&#125;,</span></span><br><span class="line"><span class="string">    1112:&#123;'x1':[]&#125;</span></span><br><span class="line"><span class="string">    1113:&#123;'x1':[]&#125;</span></span><br><span class="line"><span class="string">    1114:&#123;'x1':[]&#125;</span></span><br><span class="line"><span class="string">    1115:&#123;'x1':[]&#125;,</span></span><br><span class="line"><span class="string">    1116:&#123;'x1':[]&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        object.__setattr__(self,<span class="string">'storage'</span>,&#123;&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        ident = threading.get_ident()</span><br><span class="line">        <span class="comment">#这里使用了栈的功能，把值添加到列表的尾部</span></span><br><span class="line">        <span class="keyword">if</span> ident <span class="keyword">in</span> self.storage:</span><br><span class="line">            self.storage[ident][key].append(value)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.storage[ident] = &#123;key:[value,]&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        ident = threading.get_ident()</span><br><span class="line">        <span class="comment">#取值得时候取最后进入列表额的</span></span><br><span class="line">        <span class="keyword">if</span> ident <span class="keyword">not</span> <span class="keyword">in</span> self.storage:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">return</span> self.storage[ident][item][<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">local = Local()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(arg)</span>:</span></span><br><span class="line">    local.x1 = arg</span><br><span class="line">    print(local.x1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    t = threading.Thread(target=task,args=(i,))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><h3 id="6-flask源码关于local的实现"><a href="#6-flask源码关于local的实现" class="headerlink" title="6.flask源码关于local的实现"></a>6.flask源码关于local的实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 协程</span></span><br><span class="line">    <span class="keyword">from</span> greenlet <span class="keyword">import</span> getcurrent <span class="keyword">as</span> get_ident</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">from</span> thread <span class="keyword">import</span> get_ident</span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        <span class="keyword">from</span> _thread <span class="keyword">import</span> get_ident</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">__storage__ = &#123;</span></span><br><span class="line"><span class="string">    1111:&#123;"stack":[pl] &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># self.__storage__ = &#123;&#125;</span></span><br><span class="line">        <span class="comment"># self.__ident_func__ = get_ident</span></span><br><span class="line">        object.__setattr__(self, <span class="string">"__storage__"</span>, &#123;&#125;)</span><br><span class="line">        object.__setattr__(self, <span class="string">"__ident_func__"</span>, get_ident)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> iter(self.__storage__.items())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__release_local__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__storage__.pop(self.__ident_func__(), <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self.__storage__[self.__ident_func__()][name]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span></span><br><span class="line">        ident = self.__ident_func__() <span class="comment"># 1111</span></span><br><span class="line">        storage = self.__storage__</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            storage[ident][name] = value</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            storage[ident] = &#123;name: value&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">del</span> self.__storage__[self.__ident_func__()][name]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(name)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalStack</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._local = Local()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        <span class="string">"""Pushes a new item to the stack"""</span></span><br><span class="line">        <span class="comment"># self._local.stack == getattr</span></span><br><span class="line">        <span class="comment"># rv = None</span></span><br><span class="line">        rv = getattr(self._local, <span class="string">"stack"</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self._local.stack = rv = []</span><br><span class="line">        rv.append(obj)</span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        stack = getattr(self._local, <span class="string">"stack"</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> stack <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">elif</span> len(stack) == <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># release_local(self._local)</span></span><br><span class="line">            <span class="comment"># del __storage__[1111]</span></span><br><span class="line">            <span class="keyword">return</span> stack[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> stack.pop()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self._local.stack[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">except</span> (AttributeError, IndexError):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">obj = LocalStack()</span><br><span class="line">obj.push(<span class="string">'汪洋'</span>)</span><br><span class="line">obj.push(<span class="string">'成说'</span>)</span><br><span class="line"></span><br><span class="line">print(obj.top)</span><br><span class="line"></span><br><span class="line">obj.pop()</span><br><span class="line">obj.pop()</span><br></pre></td></tr></table></figure><p>总结：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">在flask中有个local类，他和threading.local的功能一样，为每个线程开辟空间进行存取数据，他们两个的内部实现机制，内部维护一个字典，以线程(协程)ID为key，进行数据隔离，如：</span><br><span class="line">    __storage__ = &#123;</span><br><span class="line"><span class="number">1211</span>:&#123;<span class="string">'k1'</span>:<span class="number">123</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    obj = Local()</span><br><span class="line">    obj.k1 = <span class="number">123</span></span><br><span class="line">    </span><br><span class="line">在flask中还有一个LocalStack的类，他内部会依赖local对象，local对象负责存储数据，localstack对象用于将local中的值维护成一个栈。</span><br><span class="line">__storage__ = &#123;</span><br><span class="line"><span class="number">1211</span>:&#123;<span class="string">'stack'</span>:[<span class="string">'k1'</span>,]&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">obj= LocalStack()</span><br><span class="line">    obj.push(<span class="string">'k1'</span>)</span><br><span class="line">    obj.top</span><br><span class="line">    obj.pop()</span><br></pre></td></tr></table></figure><p>7.flask源码中总共有2个localstack对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># context locals</span></span><br><span class="line">__storage__ = &#123;</span><br><span class="line"><span class="number">1111</span>:&#123;<span class="string">'stack'</span>:[RequestContext(reqeust,session),]&#125;,</span><br><span class="line">    <span class="number">1123</span>:&#123;<span class="string">'stack'</span>:[RequestContext(reqeust,session),]&#125;,</span><br><span class="line">&#125;</span><br><span class="line">_request_ctx_stack = LocalStack()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__storage__ = &#123;</span><br><span class="line"><span class="number">1111</span>:&#123;<span class="string">'stack'</span>:[AppContenxt(app,g),]&#125;</span><br><span class="line">    <span class="number">1123</span>:&#123;<span class="string">'stack'</span>:[AppContenxt(app,g),]&#125;,</span><br><span class="line">&#125;</span><br><span class="line">_app_ctx_stack = LocalStack()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_request_ctx_stack.push(<span class="string">'小魔方'</span>)</span><br><span class="line">_app_ctx_stack.push(<span class="string">'大魔方'</span>)</span><br></pre></td></tr></table></figure><ul><li>上下文管理<ul><li>请求上下文管理</li><li>应用上下文管理</li></ul></li></ul><p><img src="http://9017499461.linshutu.top/%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86.JPG" alt></p><h3 id="7-源码初识"><a href="#7-源码初识" class="headerlink" title="7.源码初识"></a>7.源码初识</h3><h4 id="7-1-项目启动"><a href="#7-1-项目启动" class="headerlink" title="7.1 项目启动"></a>7.1 项目启动</h4><ul><li><p>实例化Flask对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 对app对象封装一些初始化的值。</span><br><span class="line">app.static_url_path</span><br><span class="line">app.static_folder</span><br><span class="line">app.template_folder</span><br><span class="line">app.view_functions = &#123;&#125;</span><br><span class="line"><span class="number">2.</span> 添加静态文件的路由</span><br><span class="line">    self.add_url_rule(</span><br><span class="line">        self.static_url_path + <span class="string">"/&lt;path:filename&gt;"</span>,</span><br><span class="line">        endpoint=<span class="string">"static"</span>,</span><br><span class="line">        host=static_host,</span><br><span class="line">        view_func=self.send_static_file,</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line"><span class="number">3.</span> 实例化了url_map的对象，以后在map对象中放 【/index/ 函数的对象别名】</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(object)</span>:</span></span><br><span class="line">        url_rule_class = Rule</span><br><span class="line">        url_map_class = Map</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self...)</span>:</span></span><br><span class="line">            self.static_url_path</span><br><span class="line">            self.static_folder</span><br><span class="line">            self.template_folder</span><br><span class="line">            self.view_functions = &#123;&#125;</span><br><span class="line">            self.url_map = self.url_map_class()</span><br><span class="line">    app = Flask()</span><br><span class="line">    app.view_functions</span><br><span class="line">app.url_rule_class</span><br></pre></td></tr></table></figure></li><li><p>加载配置文件（给app的config进行赋值）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,static_url_path=<span class="string">'/xx'</span>)</span><br><span class="line"></span><br><span class="line">app.config.from_object(<span class="string">'xx.xx'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 读取配置文件中的所有键值对，并将键值对全都放到Config对象。（Config是一个字典）</span><br><span class="line"><span class="number">2.</span> 把包含所有配置文件的Config对象，赋值给 app.config</span><br></pre></td></tr></table></figure></li><li><p>添加路由映射</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,static_url_path=<span class="string">'/xx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 将 url = /index  和  methods = [GET,POST]  和 endpoint = <span class="string">"index"</span>封装到Rule对象</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 将Rule对象添加到 app.url_map中。</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 把endpoint和函数的对应关系放到 app.view_functions中。</span><br></pre></td></tr></table></figure></li><li><p>截止目前</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.config</span><br><span class="line">app.url_map</span><br><span class="line">app.view_functions</span><br></pre></td></tr></table></figure></li><li><p>运行flask</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,static_url_path=<span class="string">'/xx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 内部调用werkzeug的run_simple，内部创建socket，监听IP和端口，等待用户请求到来。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 一旦有用户请求，执行app.__call__方法。</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(object)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self,envion,start_response)</span>:</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">run_simple(host, port, self, **options)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">        app.run()</span><br></pre></td></tr></table></figure></li></ul><h4 id="7-2-有用户请求到来"><a href="#7-2-有用户请求到来" class="headerlink" title="7.2 有用户请求到来"></a>7.2 有用户请求到来</h4><ul><li><p>创建ctx = RequestContext对象，其内部封装了 Request对象和session数据。 </p></li><li><p>创建app_ctx = AppContext对象，其内部封装了App和g。 </p></li><li><p>然后ctx.push触发将 ctx 和 app_ctx 分别通过自己的LocalStack对象将其放入到Local中，Local的本质是以线程ID为key，以{“stack”:[]}为value的字典。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">1111:&#123;“stack”:[ctx,]&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">1111:&#123;“stack”:[app_ctx,]&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：以后再想要获取 request/session / app / g时，都需要去local中获取。 </p></li><li><p>执行所有的before_request函数</p></li><li><p>执行视图函数</p></li><li><p>执行所有after_request函数（session加密放到cookie中）</p></li><li><p>销毁ctx和app_ctx</p></li></ul><h3 id="8-了解源码流程之后，使用：session、request、app、g"><a href="#8-了解源码流程之后，使用：session、request、app、g" class="headerlink" title="8.了解源码流程之后，使用：session、request、app、g"></a>8.了解源码流程之后，使用：session、request、app、g</h3><ul><li><p>偏函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 偏函数</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">def func(a1,a2):</span></span><br><span class="line"><span class="string">    print(a1,a2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">new_func = functools.partial(func,123)</span></span><br><span class="line"><span class="string">new_func(2)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></li><li><p>私有成员</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">'alex'</span></span><br><span class="line">        self.__age = <span class="number">123</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line"></span><br><span class="line">print(obj.name)</span><br><span class="line">print(obj._Foo__age)</span><br></pre></td></tr></table></figure></li><li><p>setattr</p></li><li><p>setitem</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># session, request, current_app, g 全部都是LocalProxy对象。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">session['x'] = 123     ctx.session['x'] = 123</span></span><br><span class="line"><span class="string">request.method         ctx.request.method</span></span><br><span class="line"><span class="string">current_app.config    app_ctx.app.config</span></span><br><span class="line"><span class="string">g.x1                  app_ctx.g.x1</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h3 id="9-g到底是个什么鬼？"><a href="#9-g到底是个什么鬼？" class="headerlink" title="9.g到底是个什么鬼？"></a>9.g到底是个什么鬼？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在一次请求请求的周期，可以在g中设置值，在本次的请求周期中都可以读取或复制。</span><br><span class="line">相当于是一次请求周期的全局变量。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,g</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,static_url_path=<span class="string">'/xx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    g.x1 = <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(g.x1)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>第一阶段：启动flask程序，加载特殊装饰器、路由，把他们封装  app= Flask对象中。 </li><li>第二阶段：请求到来<ul><li>创建上下文对象：应用上下文、请求上下文。</li><li>执行before / 视图 / after </li><li>销毁上下文对象 </li></ul></li></ul><h3 id="flask请求完整的生命周期"><a href="#flask请求完整的生命周期" class="headerlink" title="flask请求完整的生命周期"></a>flask请求完整的生命周期</h3><p><img src="http://9017499461.linshutu.top/flask%E5%AE%8C%E6%95%B4%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt></p><p>启动先执行manage.py 中的    app.run()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span>　　 </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, host=None, port=None, debug=None, **options)</span>:</span></span><br><span class="line">    　　<span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line">    　　<span class="keyword">try</span>:</span><br><span class="line">        　　<span class="comment">#run_simple 是werkzeug 提供的方法，会执行第三个参数 self()</span></span><br><span class="line">        　　run_simple(host, port, self, **options)</span><br></pre></td></tr></table></figure><p>执行app()，对象()表示调用对象的<code>__call__</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span>　　 </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.wsgi_app(environ, start_response)</span><br></pre></td></tr></table></figure><p>又调用了app.wsgi_app方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span>　　 </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wsgi_app</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        <span class="comment">#1.</span></span><br><span class="line">        ctx = self.request_context(environ)　　　　       </span><br><span class="line">        self.request_context</span><br><span class="line">        <span class="comment">#2.</span></span><br><span class="line">        ctx.push()　　 　　</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">try</span>:　　　　　　　　　 </span><br><span class="line">                <span class="comment">#3.执行视图函数</span></span><br><span class="line">                response = self.full_dispatch_request()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                error = e　　　　　　　　　 </span><br><span class="line">                <span class="comment">#4.</span></span><br><span class="line">                response = self.handle_exception(e)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                error = sys.exc_info()[<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">            <span class="keyword">return</span> response(environ, start_response)</span><br><span class="line">        <span class="keyword">finally</span>:　　　　　　　</span><br><span class="line">            <span class="comment">#5.</span></span><br><span class="line">            ctx.auto_pop(error)</span><br></pre></td></tr></table></figure><p>第1步：执行app.request_context方法，把请求的相关信息传进去了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span>　　 </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request_context</span><span class="params">(self, environ)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> RequestContext(self, environ)</span><br></pre></td></tr></table></figure><p>返回了一个RequestContext类的实例对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestContext</span><span class="params">(object)</span>:</span>　　 </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app, environ, request=None)</span>:</span></span><br><span class="line">        self.app = app</span><br><span class="line">        <span class="keyword">if</span> request <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            request = app.request_class(environ) 　　　　　　  </span><br><span class="line">            app.request_class = Request       </span><br><span class="line">        self.request = request</span><br><span class="line">        self.session = <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>在init构造方法中注意app又调用了request_class方法，也就是Request 实例一个对象，</p><p>那么第1步我们知道：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx是一个RequestContext对象，这个对象里面封装了两个主要的属性，一个是self.request = Request实例的对象，Request对象里面封装了请求进来的所有数据；另外一个是self.session = None就可以了</span><br></pre></td></tr></table></figure><p>第2步：执行ctx.push()方法</p><p>因为ctx是RequestContext类的对象，那我们就要去RequestContext类中找push方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestContext</span><span class="params">(object)</span>:</span>　　 </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self)</span>:</span></span><br><span class="line">　　　　 <span class="comment">#2.1.</span></span><br><span class="line">        app_ctx = _app_ctx_stack.top</span><br><span class="line">        <span class="keyword">if</span> app_ctx <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> app_ctx.app != self.app:</span><br><span class="line">            app_ctx = self.app.app_context()　　　　　　　　　　　　</span><br><span class="line">            <span class="comment"># self.app.app_context = app.app_context = AppContext(app)</span></span><br><span class="line">            app_ctx.push()　　　　　</span><br><span class="line">            <span class="comment">#2.2.　　　　  </span></span><br><span class="line">            _request_ctx_stack.push(self)　　　　　　　　</span><br><span class="line">            <span class="comment">#_request_ctx_stack = LocalStack()　　　　 </span></span><br><span class="line">            <span class="comment">#2.3.        </span></span><br><span class="line">            self.session = self.app.open_session(self.request)        </span><br><span class="line">            <span class="comment">#判断没有 secret_key时：        </span></span><br><span class="line">            <span class="keyword">if</span> self.session <span class="keyword">is</span> <span class="literal">None</span>:            </span><br><span class="line">                self.session = self.app.make_null_session()            </span><br><span class="line">                <span class="keyword">raise</span> RuntimeError(<span class="string">'The session is unavailable because no secret '</span><span class="string">'key was set.)</span></span><br></pre></td></tr></table></figure><p>第2.1步：到_app_ctx_stack这个栈中取最后一个数据，如果未取到或者取到的不是当前的app，就调用app.app_context()方法，就是新实例一个上下文app_ctx对象，再执行app_ctx.push()方法     （在这再次强调，因为app_ctx是AppContext对象，就要先去AppContext类中找push方法），</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppContext</span><span class="params">(object)</span>:</span>　　 </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self)</span>:</span></span><br><span class="line">        _app_ctx_stack.push(self)     <span class="comment">#把新创建的app_ctx上下文app对象添加到了_app_ctx_stack这个栈中</span></span><br><span class="line">        appcontext_pushed.send(self.app)   <span class="comment">#在这里遇到了第一个信号，请求app上下文push时执行</span></span><br></pre></td></tr></table></figure><p>第2.2步：LocalStack类的对象调用push方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalStack</span><span class="params">(object)</span>:</span>　　</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        rv = getattr(self._local, <span class="string">'stack'</span>, <span class="literal">None</span>)       <span class="comment">#self._local = Local()　　　　      #第一次的时候rv肯定是None</span></span><br><span class="line">        <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self._local.stack = rv = []      <span class="comment">#Local对象 .stack = rv = [] 就执行了对象的 __setattr__方法</span></span><br><span class="line">        rv.append(obj)                       <span class="comment">#把 ctx对象添加到Local类的列表中</span></span><br><span class="line">        <span class="keyword">return</span> rv</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> greenlet <span class="keyword">import</span> getcurrent <span class="keyword">as</span> get_ident</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">from</span> thread <span class="keyword">import</span> get_ident</span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        <span class="keyword">from</span> _thread <span class="keyword">import</span> get_ident</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span><span class="params">(object)</span>:</span>        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>        </span><br><span class="line">        object.__setattr__(self, <span class="string">'__storage__'</span>, &#123;&#125;)             <span class="comment">#这里为什么用object.__setattr__  而不是直接用self.__storage__=&#123;&#125;        </span></span><br><span class="line">        object.__setattr__(self, <span class="string">'__ident_func__'</span>, get_ident)   <span class="comment">#如果用self的方式设置属性，就会触发self的__setattr__方法，就会无限的循环　　</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span></span><br><span class="line">        ident = self.__ident_func__()</span><br><span class="line">        storage = self.__storage__</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            storage[ident][name] = value    <span class="comment"># &#123;"唯一标识1"：&#123;"stack":[]&#125;，"唯一标识2"：&#123;"stack":[]&#125;&#125;   和本地线程类似</span></span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            storage[ident] = &#123;name: value&#125;</span><br></pre></td></tr></table></figure><p> 第2.3步：给ctx.session赋值，执行app.open_session(ctx.request)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span>　　 </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_session</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.session_interface.open_session(self, request)　　　　　<span class="comment">#return SecureCookieSessionInterface().open_session(app, request)　　　　　#所以就要去SecureCookieSessionInterface类找open_session方法</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecureCookieSessionInterface</span><span class="params">(SessionInterface)</span>:</span>　　 </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_session</span><span class="params">(self, app, request)</span>:</span></span><br><span class="line">        <span class="comment"># 查看 是否有secret_key</span></span><br><span class="line">        s = self.get_signing_serializer(app)</span><br><span class="line">        <span class="keyword">if</span> s <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        val = request.cookies.get(app.session_cookie_name)</span><br><span class="line">        <span class="comment"># 请求第一次来的时候取不到值</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> val:</span><br><span class="line">            <span class="keyword">return</span> self.session_class()</span><br><span class="line">            <span class="comment">#返回了一个 类似字典</span></span><br><span class="line">        max_age = total_seconds(app.permanent_session_lifetime)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = s.loads(val, max_age=max_age)  <span class="comment">#loads 作用是： 反序列化+解析乱码</span></span><br><span class="line">            <span class="keyword">return</span> self.session_class(data)       <span class="comment">##返回了一个 类似字典对象，对象里面有data</span></span><br><span class="line">        <span class="keyword">except</span> BadSignature:</span><br><span class="line">            <span class="keyword">return</span> self.session_class()</span><br></pre></td></tr></table></figure><p>那么第2步我们知道：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.把app_ctx上下文对象添加到了_app_ctx_stack这个栈中2.把 ctx请求对象添加到Local类的列表中3.执行open_session方法，把session加载到内</span><br></pre></td></tr></table></figure><p> 第3步：app.full_dispatch_request()   执行视图函数 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">full_dispatch_request</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#3.1 </span></span><br><span class="line">        self.try_trigger_before_first_request_functions()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            request_started.send(self)     <span class="comment"># 信号 - 请求到来前执行</span></span><br><span class="line">            <span class="comment"># 3.2 </span></span><br><span class="line">            rv = self.preprocess_request()</span><br><span class="line">            <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="comment"># 3.3 如果所有的中间件都通过了， 执行视图函数</span></span><br><span class="line">                rv = self.dispatch_request()</span><br><span class="line">　　　　 <span class="comment">#3.4 </span></span><br><span class="line">        <span class="keyword">return</span> self.finalize_request(rv)</span><br></pre></td></tr></table></figure><p>第3.1步：找到所有的 执行一次的 伪中间件 执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">try_trigger_before_first_request_functions</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> self._before_request_lock:</span><br><span class="line">            <span class="keyword">for</span> func <span class="keyword">in</span> self.before_first_request_funcs:</span><br><span class="line">                func()</span><br></pre></td></tr></table></figure><p>第3.2步：找到所有的 伪中间件的执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preprocess_request</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        funcs = self.before_request_funcs.get(<span class="literal">None</span>, ())</span><br><span class="line">        <span class="keyword">for</span> func <span class="keyword">in</span> funcs:</span><br><span class="line">            rv = func()</span><br><span class="line">            <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> rv</span><br></pre></td></tr></table></figure><p>第3.3步：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch_request</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#获取请求的ctx对象中的request数据</span></span><br><span class="line">        req = _request_ctx_stack.top.request</span><br><span class="line">        <span class="comment">#获取请求的url</span></span><br><span class="line">        rule = req.url_rule</span><br><span class="line">        <span class="comment">#执行视图函数</span></span><br><span class="line">        <span class="keyword">return</span> self.view_functions[rule.endpoint](**req.view_args)</span><br></pre></td></tr></table></figure><p>第3.4步：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">finalize_request</span><span class="params">(self, rv, from_error_handler=False)</span>:</span></span><br><span class="line">        response = self.make_response(rv)   <span class="comment">#通过make_response方法后就可以对返回值进行设置响应头等数据了</span></span><br><span class="line">        <span class="keyword">try</span>:　　　　　　　<span class="comment">#3.4.1</span></span><br><span class="line">            response = self.process_response(response)</span><br><span class="line">            request_finished.send(self, response=response)  <span class="comment">#信号 -  请求结束后执行</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>第3.4.1步：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        ctx = _request_ctx_stack.top</span><br><span class="line">        <span class="comment">#找到所有的 after_request 伪中间件执行</span></span><br><span class="line">        funcs = ctx._after_request_functions</span><br><span class="line">        <span class="keyword">for</span> handler <span class="keyword">in</span> funcs:</span><br><span class="line">            response = handler(response)</span><br><span class="line">        <span class="comment"># 3.4.1.1 如果有session就执行self.save_session方法</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.session_interface.is_null_session(ctx.session):　　　　　     self.session_interface = SecureCookieSessionInterface() 　　　　　　   <span class="comment">#3.4.1.2　　　　 　　 </span></span><br><span class="line">        self.save_session(ctx.session, response) <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>第3.4.1.1步： 到SecureCookieSessionInterface类中找is_null_session方法，发现没有，就去它基类SessionInterface中找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SessionInterface</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_null_session</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        <span class="comment">#判断ctx.session 是不是 self.null_session_class = NullSession 类或者它派生类的对象</span></span><br><span class="line">        <span class="keyword">return</span> isinstance(obj, self.null_session_class)</span><br></pre></td></tr></table></figure><p>第3.4.1.2步：执行了SecureCookieSessionInterface类的save_session方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_session</span><span class="params">(self, session, response)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.session_interface.save_session(self, session, response)</span><br><span class="line">        <span class="comment"># return SecureCookieSessionInterface().save_session(self, session, response)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecureCookieSessionInterface</span><span class="params">(SessionInterface)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_session</span><span class="params">(self, app, session, response)</span>:</span></span><br><span class="line">        <span class="comment">#给响应设置cookie</span></span><br><span class="line">        response.set_cookie(app.session_cookie_name, val,</span><br><span class="line">                            expires=expires, httponly=httponly,</span><br><span class="line">                            domain=domain, path=path, secure=secure)</span><br></pre></td></tr></table></figure><p>补充：自定义session</p><p>第4步：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_exception</span><span class="params">(self, e)</span>:</span></span><br><span class="line">        got_request_exception.send(self, exception=e)    <span class="comment">#信号 - 请求执行出现异常时执行</span></span><br></pre></td></tr></table></figure><p>第5步： 执行了RequestContext 的 pop 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestContext</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">auto_pop</span><span class="params">(self, exc)</span>:</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.pop(exc)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestContext</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self, exc=_sentinel)</span>:</span></span><br><span class="line">　　　　 <span class="keyword">try</span>:</span><br><span class="line">        　　<span class="keyword">if</span> <span class="keyword">not</span> self._implicit_app_ctx_stack:</span><br><span class="line">　　　　　　　　  <span class="comment">#5.1</span></span><br><span class="line">            　　self.app.do_teardown_request(exc)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">　　　　　　  <span class="comment"># 请求结束时  request上下文的栈中就把请求pop掉</span></span><br><span class="line">            rv = _request_ctx_stack.pop()</span><br><span class="line">        　　 <span class="keyword">if</span> app_ctx <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">　　　　　　　　　　<span class="comment">#5.2</span></span><br><span class="line">        　　 　　 app_ctx.pop(exc)</span><br></pre></td></tr></table></figure><p>第5.1步： 执行  app.do_teardown_request方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_teardown_request</span><span class="params">(self, exc=_sentinel)</span>:</span></span><br><span class="line">　　　　 <span class="comment"># 信号 - 请求执行完毕后自动执行（无论成功与否）</span></span><br><span class="line">        request_tearing_down.send(self, exc=exc)</span><br></pre></td></tr></table></figure><p>第5.2步：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppContext</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self, exc=_sentinel)</span>:</span>        </span><br><span class="line">        <span class="keyword">try</span>:            </span><br><span class="line">            <span class="keyword">if</span> self._refcnt &lt;= <span class="number">0</span>:　　　　　　　　　 </span><br><span class="line">                <span class="comment">#5.2.1                </span></span><br><span class="line">                self.app.do_teardown_appcontext(exc)　　　　 </span><br><span class="line">                <span class="comment"># 信号 - 请求上下文pop时执行</span></span><br><span class="line">        appcontext_popped.send(self.app)</span><br></pre></td></tr></table></figure><p>第5.2.1步：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_PackageBoundObject)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_teardown_appcontext</span><span class="params">(self, exc=_sentinel)</span>:</span></span><br><span class="line">        <span class="comment"># 信号 - 请求上下文执行完毕后自动执行（无论成功与否）</span></span><br><span class="line">        appcontext_tearing_down.send(self, exc=exc)</span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">     <span class="comment"># </span></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line">obj() <span class="comment"># __call__</span></span><br><span class="line"></span><br><span class="line">obj[x1] = <span class="number">123</span> <span class="comment"># __setitem__</span></span><br><span class="line">obj[x2]  <span class="comment"># __getitem__</span></span><br><span class="line"></span><br><span class="line">obj.x1 = <span class="number">123</span> <span class="comment"># __setattr__</span></span><br><span class="line">obj.x2  <span class="comment"># __getattr__</span></span><br></pre></td></tr></table></figure><p>SQLhelper</p><ul><li><p>方式一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">storage = &#123;</span></span><br><span class="line"><span class="string">    1111:&#123;'stack':[]&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlHelper</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.pool = PooledDB(</span><br><span class="line">            creator=pymysql,  <span class="comment"># 使用链接数据库的模块</span></span><br><span class="line">            maxconnections=<span class="number">6</span>,  <span class="comment"># 连接池允许的最大连接数，0和None表示不限制连接数</span></span><br><span class="line">            mincached=<span class="number">2</span>,  <span class="comment"># 初始化时，链接池中至少创建的链接，0表示不创建</span></span><br><span class="line">            blocking=<span class="literal">True</span>,  <span class="comment"># 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错</span></span><br><span class="line">            ping=<span class="number">0</span>,</span><br><span class="line">            <span class="comment"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class="line">            host=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">            port=<span class="number">3306</span>,</span><br><span class="line">            user=<span class="string">'root'</span>,</span><br><span class="line">            password=<span class="string">'222'</span>,</span><br><span class="line">            database=<span class="string">'cmdb'</span>,</span><br><span class="line">            charset=<span class="string">'utf8'</span></span><br><span class="line">        )</span><br><span class="line">        self.local = threading.local()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">        conn = self.pool.connection()</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        <span class="keyword">return</span> conn, cursor</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self, cursor, conn)</span>:</span></span><br><span class="line">        cursor.close()</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fetchall</span><span class="params">(self, sql, *args)</span>:</span></span><br><span class="line">        <span class="string">""" 获取所有数据 """</span></span><br><span class="line">        conn, cursor = self.open()</span><br><span class="line">        cursor.execute(sql, args)</span><br><span class="line">        result = cursor.fetchall()</span><br><span class="line">        self.close(conn, cursor)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fetchone</span><span class="params">(self, sql, *args)</span>:</span></span><br><span class="line">        <span class="string">""" 获取所有数据 """</span></span><br><span class="line">        conn, cursor = self.open()</span><br><span class="line">        cursor.execute(sql, args)</span><br><span class="line">        result = cursor.fetchone()</span><br><span class="line">        self.close(conn, cursor)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        conn,cursor = self.open()</span><br><span class="line">        rv = getattr(self.local,<span class="string">'stack'</span>,<span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> rv:</span><br><span class="line">            self.local.stack = [(conn,cursor),]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rv.append((conn,cursor))</span><br><span class="line">            self.local.stack = rv</span><br><span class="line">        <span class="keyword">return</span> cursor</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        rv = getattr(self.local,<span class="string">'stack'</span>,<span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> rv:</span><br><span class="line">            <span class="comment"># del self.local.stack</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        conn,cursor = self.local.stack.pop()</span><br><span class="line">        cursor.close()</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line">db = SqlHelper()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlhelper <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># db.fetchall(...)</span></span><br><span class="line"><span class="comment"># db.fetchone(...)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> db <span class="keyword">as</span> c1:</span><br><span class="line">    c1.execute(<span class="string">'select 1'</span>)</span><br><span class="line">    <span class="keyword">with</span> db <span class="keyword">as</span> c2:</span><br><span class="line">        c1.execute(<span class="string">'select 2'</span>)</span><br><span class="line">    print(<span class="number">123</span>)</span><br></pre></td></tr></table></figure></li><li><p>方式二</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB</span><br><span class="line"></span><br><span class="line">POOL = PooledDB(</span><br><span class="line">            creator=pymysql,  <span class="comment"># 使用链接数据库的模块</span></span><br><span class="line">            maxconnections=<span class="number">6</span>,  <span class="comment"># 连接池允许的最大连接数，0和None表示不限制连接数</span></span><br><span class="line">            mincached=<span class="number">2</span>,  <span class="comment"># 初始化时，链接池中至少创建的链接，0表示不创建</span></span><br><span class="line">            blocking=<span class="literal">True</span>,  <span class="comment"># 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错</span></span><br><span class="line">            ping=<span class="number">0</span>,</span><br><span class="line">            <span class="comment"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class="line">            host=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">            port=<span class="number">3306</span>,</span><br><span class="line">            user=<span class="string">'root'</span>,</span><br><span class="line">            password=<span class="string">'222'</span>,</span><br><span class="line">            database=<span class="string">'cmdb'</span>,</span><br><span class="line">            charset=<span class="string">'utf8'</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlHelper</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.conn = <span class="literal">None</span></span><br><span class="line">        self.cursor = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">        conn = POOL.connection()</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        <span class="keyword">return</span> conn, cursor</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cursor.close()</span><br><span class="line">        self.conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.conn,self.cursor = self.open()</span><br><span class="line">        <span class="keyword">return</span> self.cursor</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        self.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># ################## 使用 ##################</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> SqlHelper() <span class="keyword">as</span> c1:</span><br><span class="line">    c1.execute(<span class="string">'select 1'</span>)</span><br><span class="line">    <span class="keyword">with</span> SqlHelper() <span class="keyword">as</span> c2:</span><br><span class="line">        c2.execute(<span class="string">'select 2'</span>)</span><br><span class="line">    print(<span class="number">666</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> SqlHelper() <span class="keyword">as</span> cursor:</span><br><span class="line">    cursor.execute(<span class="string">'select 1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> SqlHelper() <span class="keyword">as</span> cursor:</span><br><span class="line">    cursor.execute(<span class="string">'select 1'</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-drf源码分析系列"><a href="#1-drf源码分析系列" class="headerlink" title="1.drf源码分析系列"></a>1.drf源码分析系列</h3><ul><li>01 restful规范</li><li>02 从cbv到drf的视图 / 快速了解drf</li><li>03 视图</li><li>04 版本</li><li>05 认证</li><li>06 权限</li><li>07 节流</li><li>08 jwt</li><li>持续更新中…</li></ul><h3 id="2-flask源码分析系列"><a href="#2-flask源码分析系列" class="headerlink" title="2.flask源码分析系列"></a>2.flask源码分析系列</h3><ul><li>01 werkzurg 了解wsgi</li><li>02 快速使用</li><li>03 threading.local和高级</li><li>04 LocalStack和Local对象实现栈的管理</li><li>05 Flask源码之：配置加载</li><li>06 Flask源码之：路由加载</li><li>持续更新中…</li></ul><p>印象笔记 、 有道云笔记</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;内容回顾&quot;&gt;&lt;a href=&quot;#内容回顾&quot; class=&quot;headerlink&quot; title=&quot;内容回顾&quot;&gt;&lt;/a&gt;内容回顾&lt;/h2&gt;&lt;p&gt;1.django和flask的区别&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- 概括的区别&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- django中提供功能列举&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 请求处理机制不同，django是通过传参的形式，flask是通过上下文管理的方式实现。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2.wsgi&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;django和flask内部都没有实现socket，而是wsgi实现。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wsgi是web服务网管接口，他是一个协议，实现它的协议的有：wsgiref/werkzurg/uwsgi&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# django之前&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; wsgiref.simple_server &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; make_server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(environ, start_response)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    start_response(&lt;span class=&quot;string&quot;&gt;&#39;200 OK&#39;&lt;/span&gt;, [(&lt;span class=&quot;string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;text/html&#39;&lt;/span&gt;)])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [bytes(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;h1&amp;gt;Hello, web!&amp;lt;/h1&amp;gt;&#39;&lt;/span&gt;, encoding=&lt;span class=&quot;string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;), ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    httpd = make_server(&lt;span class=&quot;string&quot;&gt;&#39;127.0.0.1&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8000&lt;/span&gt;, run)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    httpd.serve_forever()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# flask之前&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; werkzeug.serving &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; run_simple&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; werkzeug.wrappers &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; BaseResponse&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(environ, start_response)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;请求来了&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    response = BaseResponse(&lt;span class=&quot;string&quot;&gt;&#39;你好&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; response(environ, start_response)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    run_simple(&lt;span class=&quot;string&quot;&gt;&#39;127.0.0.1&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5000&lt;/span&gt;, func)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="flask" scheme="https://pl1649947109.github.io/pl1649947109/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>第五讲——flask之信号大全、蓝图拆分目录、总结</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/24/%E4%B9%A6/flask/%E7%AC%AC%E4%BA%94%E8%AE%B2%E2%80%94%E2%80%94flask%E4%B9%8B%E4%BF%A1%E5%8F%B7%E5%A4%A7%E5%85%A8%E3%80%81%E8%93%9D%E5%9B%BE%E6%8B%86%E5%88%86%E7%9B%AE%E5%BD%95%E3%80%81%E6%80%BB%E7%BB%93/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/24/书/flask/第五讲——flask之信号大全、蓝图拆分目录、总结/</id>
    <published>2019-11-24T12:00:00.000Z</published>
    <updated>2019-11-26T17:04:52.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内容回顾"><a href="#内容回顾" class="headerlink" title="内容回顾"></a>内容回顾</h2><p>1.flask和django的区别？</p><p>2.flask请求的声明周期？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wsgi</span><br><span class="line">before</span><br><span class="line">视图</span><br><span class="line">after</span><br></pre></td></tr></table></figure><p>3.wsgi的本质</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket服务端</span><br></pre></td></tr></table></figure><p>4.flask的蓝图的作用？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">默认flask通过一个脚本就可以实现，但由于项目业务可能会比较多，为了方便业务的拆分，我们会创建多个文件（蓝图）进行管理。</span><br></pre></td></tr></table></figure><p>5.flask的蓝图和django的app有什么区别？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">相同点：都是用于做业务拆分 / 需要注册才能使用 / 都可以在自己内部定义模板和静态文件。</span><br><span class="line">不同点：注册位置不同 、flask before/after_request和django中间件他的应用粒度更细 、 django的app内置了很多，flask蓝图没有内置。</span><br></pre></td></tr></table></figure><a id="more"></a><p>6.在app=Flask()对象中可以传入 静态文件、模板的配置。 </p><p>7.通过app.config读取配置文件（localsettings.py）。</p><p>8.特殊装饰器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">before_first_reqeust</span><br><span class="line">before_request</span><br><span class="line">after_request</span><br><span class="line">route</span><br><span class="line">template_global</span><br><span class="line">template_filter</span><br></pre></td></tr></table></figure><p>9.为flask的视图设置装饰器时，需要</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 位置</span><br><span class="line">- functools.wraps</span><br><span class="line">- functools.partial</span><br></pre></td></tr></table></figure><p>10.Flask可以定义FBV和CBV</p><p>11.flask中内置了session，session的数据以加密的形式放入cookie中。</p><p>12.flask自己没有模板，而是用的第三方的jinja2模板。 </p><p>13.threading.local</p><p>14.自定义threading.local，内部维护了一个字典，以 线程/协程 ID为键。</p><p>15.栈的特点：后进先出。 </p><p>16.LocalStack的类，在Local中维护了一个栈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">111:&#123;stack:[ctx, ]&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>17.单利模式（基于文件导入实现）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在flask程序中，只会创建两个LocalStack对象。</span><br><span class="line"></span><br><span class="line">_request_ctx_stack = LocalStack()</span><br><span class="line">_app_ctx_stack = LocalStack()</span><br></pre></td></tr></table></figure><p>18.flask的请求流程</p><ul><li>请求准备阶段</li><li>请求到来<ul><li>创建两个ctx=RequestContext对象； app_ctx = AppContext对象，将对象放入local中。 </li><li>before/视图/after</li><li>销毁ctx / app_ctx</li></ul></li></ul><p>19.g是什么？</p><p>20.数据库链接池：DBUtils</p><p>21.面向对象的with上下文：enter/exit</p><h2 id="内容补充"><a href="#内容补充" class="headerlink" title="内容补充"></a>内容补充</h2><p>1.从看flask源码你学到了什么？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- 新的编程思路。</span><br><span class="line">- django、drf数据是通过传递。</span><br><span class="line">- flask，存储在某个地方，以后用的时候去拿。 </span><br><span class="line">哪种好？两个不同的实现机制，没有好坏之分。</span><br><span class="line">django好，疑问如果是一个初学者对于django的机制比较好理解，flask学习代价比较大（了解上下文管理职机制之后才能更好的理解）。</span><br><span class="line">    </span><br><span class="line">- 技术点</span><br><span class="line">- 单利模式的应用场景</span><br><span class="line">- LocalProxy</span><br><span class="line">- 装饰器不注意functools</span><br></pre></td></tr></table></figure><p>2.在flask的Local对象中为什么要通过线程ID进行区分？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">因为在flask中可以开启多线程的模式，当开启多线程模式进行处理用户请求时，需要将线程之间的数据进行隔离，以防止数据混乱。</span><br></pre></td></tr></table></figure><p>3.在flask的Local对象中为什么要维持成一个栈？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">111:&#123;stack:[ctx, ]&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在web runtime 时，栈永远只有1个对象。</span><br><span class="line">    &#123;</span><br><span class="line">        111:&#123;stack:[ctx, ]&#125;</span><br><span class="line">        112:&#123;stack:[ctx, ]&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        111:&#123;stack:[app_ctx, ]&#125;</span><br><span class="line">        112:&#123;stack:[app_ctx, ]&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">在写离线脚本时，才会用在栈中放多个对象。 （创建一个py文件本地运行）</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> current_app,g</span><br><span class="line"><span class="keyword">from</span> pro_excel <span class="keyword">import</span> create_app</span><br><span class="line"></span><br><span class="line">app1 = create_app()</span><br><span class="line"><span class="keyword">with</span> app1.app_context():  <span class="comment"># AppContext对象(app,g) -&gt; local对象</span></span><br><span class="line">    print(current_app.config) <span class="comment"># -1 top app1 </span></span><br><span class="line">    app2 = create_app()</span><br><span class="line">    <span class="keyword">with</span> app2.app_context():  <span class="comment"># AppContext对象(app,g) -&gt; local对象</span></span><br><span class="line">        print(current_app.config) <span class="comment"># top -1 app2 </span></span><br><span class="line">    print(current_app.config) <span class="comment"># top -1 app1</span></span><br><span class="line"></span><br><span class="line">写离线脚本且多个上下文嵌套时，才会在栈中添加多个对象。</span><br></pre></td></tr></table></figure><p>注意：在flask中很少出现嵌套的脚本。</p><h2 id="今日概要"><a href="#今日概要" class="headerlink" title="今日概要"></a>今日概要</h2><ul><li>信号</li><li>flask-script组件</li><li>蓝图</li></ul><h2 id="今日详细"><a href="#今日详细" class="headerlink" title="今日详细"></a>今日详细</h2><h3 id="1-信号（源码）"><a href="#1-信号（源码）" class="headerlink" title="1. 信号（源码）"></a>1. 信号（源码）</h3><p>信号，是在flask框架中为我们预留的钩子，让我们可以进行一些自定义操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install blinker</span><br></pre></td></tr></table></figure><p>根据flask项目的请求流程来进行设置扩展点</p><ul><li><p>中间件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,old_app)</span>:</span></span><br><span class="line">        self.wsgi_app = old_app.wsgi_app</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'123'</span>)</span><br><span class="line">        result = self.wsgi_app(*args, **kwargs)</span><br><span class="line">        print(<span class="string">'456'</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">app.wsgi_app = MyMiddleware(app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li><li><p>当app_ctx被push到local中栈之后，会触发appcontext_pushed信号，之前注册在这个信号中的方法，就会被执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> signals</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@signals.appcontext_pushed.connect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(arg)</span>:</span></span><br><span class="line">    print(<span class="string">'appcontext_pushed信号f1被触发'</span>,arg)</span><br><span class="line"></span><br><span class="line"><span class="meta">@signals.appcontext_pushed.connect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(arg)</span>:</span></span><br><span class="line">    print(<span class="string">'appcontext_pushed信号f2被触发'</span>,arg)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br><span class="line">    <span class="comment"># app.__call__</span></span><br></pre></td></tr></table></figure></li><li><p>执行before_first_request扩展</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'before_first_requestf2被触发'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li><li><p>request_started信号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> signals</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@signals.request_started.connect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">(arg)</span>:</span></span><br><span class="line">    print(<span class="string">'request_started信号被触发'</span>,arg)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li><li><p>url_value_processor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,g</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> signals</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.url_value_preprocessor</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f5</span><span class="params">(endpoint,args)</span>:</span></span><br><span class="line">    print(<span class="string">'f5'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'index'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'order'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li><li><p>before_reuqest</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,g</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> signals</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f6</span><span class="params">()</span>:</span></span><br><span class="line">    g.xx = <span class="number">123</span></span><br><span class="line">    print(<span class="string">'f6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'index'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'order'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li><li><p>视图函数</p></li><li><p>before_render_template / rendered_template</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,g</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> signals</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@signals.before_render_template.connect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f7</span><span class="params">(app, template, context)</span>:</span></span><br><span class="line">    print(<span class="string">'f7'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@signals.template_rendered.connect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f8</span><span class="params">(app, template, context)</span>:</span></span><br><span class="line">    print(<span class="string">'f8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'order'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li><li><p>after_request</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,g</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> signals</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f9</span><span class="params">(response)</span>:</span></span><br><span class="line">    print(<span class="string">'f9'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'order'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li><li><p>request_finished</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,g</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> signals</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@signals.request_finished.connect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f10</span><span class="params">(app,response)</span>:</span></span><br><span class="line">    print(<span class="string">'f10'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'order'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li><li><p>got_request_exception</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,g</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> signals</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    int(<span class="string">'asdf'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@signals.got_request_exception.connect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f11</span><span class="params">(app,exception)</span>:</span></span><br><span class="line">    print(<span class="string">'f11'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'order'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li><li><p>teardown_request</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,g</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> signals</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.teardown_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f12</span><span class="params">(exc)</span>:</span></span><br><span class="line">    print(<span class="string">'f12'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'order'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li><li><p>request_tearing_down</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,g</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> signals</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@signals.request_tearing_down.connect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f13</span><span class="params">(app,exc)</span>:</span></span><br><span class="line">    print(<span class="string">'f13'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'order'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li><li><p>appcontext_popped</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,g</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> signals</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@signals.appcontext_popped.connect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f14</span><span class="params">(app)</span>:</span></span><br><span class="line">    print(<span class="string">'f14'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'order'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li></ul><p>总结：关于flask内部共有14+个扩展点用于我们对flask框架内部进行定制，其中有：9个是信号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">template_rendered = _signals.signal(<span class="string">"template-rendered"</span>)</span><br><span class="line">before_render_template = _signals.signal(<span class="string">"before-render-template"</span>)</span><br><span class="line">request_started = _signals.signal(<span class="string">"request-started"</span>)</span><br><span class="line">request_finished = _signals.signal(<span class="string">"request-finished"</span>)</span><br><span class="line">request_tearing_down = _signals.signal(<span class="string">"request-tearing-down"</span>)</span><br><span class="line">got_request_exception = _signals.signal(<span class="string">"got-request-exception"</span>)</span><br><span class="line">appcontext_tearing_down = _signals.signal(<span class="string">"appcontext-tearing-down"</span>)</span><br><span class="line">appcontext_pushed = _signals.signal(<span class="string">"appcontext-pushed"</span>)</span><br><span class="line">appcontext_popped = _signals.signal(<span class="string">"appcontext-popped"</span>)</span><br><span class="line"></span><br><span class="line">message_flashed = _signals.signal(<span class="string">"messageflashed"</span>)</span><br></pre></td></tr></table></figure><h4 id="扩展-flash"><a href="#扩展-flash" class="headerlink" title="扩展:flash"></a>扩展:flash</h4><p>flash存值之后只能取一次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,flash,get_flashed_messages,session</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> signals</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">'iuknsoiuwknlskjdf'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># flash('123')</span></span><br><span class="line">    session[<span class="string">'k1'</span>] = <span class="number">123</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/order')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># messages = get_flashed_messages()</span></span><br><span class="line">    <span class="comment"># print(messages)</span></span><br><span class="line">    val = session[<span class="string">'k1'</span>]</span><br><span class="line">    <span class="keyword">del</span> session[<span class="string">'k1'</span>]</span><br><span class="line">    print(val)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'order.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h3 id="2-flask-script"><a href="#2-flask-script" class="headerlink" title="2.flask-script"></a>2.flask-script</h3><p>flask的组件，用于运行flask程序。 </p><ul><li><p>安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install flask-script</span><br></pre></td></tr></table></figure></li><li><p>使用<br><img src="C:%5CUsers%5CAdministrator%5CDesktop%5C1574752970224.png" alt="1574752970224"></p></li><li><p>其他执行命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> s24day95 <span class="keyword">import</span> create_app</span><br><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"></span><br><span class="line">app = create_app()</span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">custom</span><span class="params">(arg)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    自定义命令</span></span><br><span class="line"><span class="string">    python manage.py custom 123</span></span><br><span class="line"><span class="string">    :param arg:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(arg)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.option('-n', '--name', dest='name')</span></span><br><span class="line"><span class="meta">@manager.option('-u', '--url', dest='url')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(name, url)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    自定义命令</span></span><br><span class="line"><span class="string">    执行： python manage.py  cmd -n wupeiqi -u http://www.oldboyedu.com</span></span><br><span class="line"><span class="string">    :param name:</span></span><br><span class="line"><span class="string">    :param url:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(name, url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure></li><li><p>其他</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">结合：flask-migrate / flask-sqlalchemy</span><br><span class="line"></span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-蓝图"><a href="#3-蓝图" class="headerlink" title="3.蓝图"></a>3.蓝图</h3><p>目录结构的划分</p><ul><li>分功能蓝图：s24day95</li><li>分结构蓝图：bigblue</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;内容回顾&quot;&gt;&lt;a href=&quot;#内容回顾&quot; class=&quot;headerlink&quot; title=&quot;内容回顾&quot;&gt;&lt;/a&gt;内容回顾&lt;/h2&gt;&lt;p&gt;1.flask和django的区别？&lt;/p&gt;
&lt;p&gt;2.flask请求的声明周期？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wsgi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;before&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;视图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;after&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;3.wsgi的本质&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;socket服务端&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;4.flask的蓝图的作用？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;默认flask通过一个脚本就可以实现，但由于项目业务可能会比较多，为了方便业务的拆分，我们会创建多个文件（蓝图）进行管理。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;5.flask的蓝图和django的app有什么区别？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;相同点：都是用于做业务拆分 / 需要注册才能使用 / 都可以在自己内部定义模板和静态文件。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不同点：注册位置不同 、flask before/after_request和django中间件他的应用粒度更细 、 django的app内置了很多，flask蓝图没有内置。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="flask" scheme="https://pl1649947109.github.io/pl1649947109/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>第八部分——drf、flask、爬虫、Git、linux、其他、项目</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/22/%E5%B0%8F%E7%BB%BF%E6%9C%AC/%E7%AC%AC%E5%85%AB%E9%83%A8%E5%88%86%E2%80%94%E2%80%94drf%E3%80%81flask%E3%80%81%E7%88%AC%E8%99%AB%E3%80%81Git%E3%80%81linux%E3%80%81%E5%85%B6%E4%BB%96%E3%80%81%E9%A1%B9%E7%9B%AE/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/22/小绿本/第八部分——drf、flask、爬虫、Git、linux、其他、项目/</id>
    <published>2019-11-22T12:00:00.000Z</published>
    <updated>2019-12-19T15:40:01.884Z</updated>
    
    <content type="html"><![CDATA[<h3 id="drf"><a href="#drf" class="headerlink" title="drf"></a>drf</h3><h4 id="1-接口的幂等性是什么意思？"><a href="#1-接口的幂等性是什么意思？" class="headerlink" title="1.接口的幂等性是什么意思？"></a>1.接口的幂等性是什么意思？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&apos;一个接口通过1次相同的访问，再对该接口进行N次相同的访问时，对资源不造影响就认为接口具有幂等性。&apos;</span><br><span class="line">    GET，  #第一次获取结果、第二次也是获取结果对资源都不会造成影响，幂等。</span><br><span class="line">    POST， #第一次新增数据，第二次也会再次新增，非幂等。</span><br><span class="line">    PUT，  #第一次更新数据，第二次不会再次更新，幂等。</span><br><span class="line">    PATCH，#第一次更新数据，第二次可能跟新的数据不同，非幂等。</span><br><span class="line">    DELTE，#第一次删除数据，第二次不在再删除，幂等。</span><br></pre></td></tr></table></figure><h3 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h3><h4 id="1-Flask框架依赖组件"><a href="#1-Flask框架依赖组件" class="headerlink" title="1.Flask框架依赖组件"></a>1.Flask框架依赖组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 依赖jinja2模板引擎</span><br><span class="line"># 依赖werkzurg协议</span><br></pre></td></tr></table></figure><h4 id="2-Flask蓝图的作用"><a href="#2-Flask蓝图的作用" class="headerlink" title="2.Flask蓝图的作用"></a>2.Flask蓝图的作用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># blueprint把实现不同功能的module分开.也就是把一个大的App分割成各自实现不同功能的module.</span><br><span class="line"># 在一个blueprint中可以调用另一个blueprint的视图函数, 但要加相应的blueprint名.</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="3-列举使用的Flask第三方组件？"><a href="#3-列举使用的Flask第三方组件？" class="headerlink" title="3.列举使用的Flask第三方组件？"></a>3.列举使用的Flask第三方组件？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Flask组件</span><br><span class="line">    flask-session  session放在redis</span><br><span class="line">    flask-SQLAlchemy 如django里的ORM操作</span><br><span class="line">    flask-migrate  数据库迁移</span><br><span class="line">    flask-script  自定义命令</span><br><span class="line">    blinker  信号-触发信号</span><br><span class="line"># 第三方组件</span><br><span class="line">    Wtforms 快速创建前端标签、文本校验</span><br><span class="line">    dbutile     创建数据库连接池</span><br><span class="line">    gevnet-websocket 实现websocket</span><br><span class="line"># 自定义Flask组件</span><br><span class="line">    自定义auth认证 </span><br><span class="line">    参考flask-login组件</span><br></pre></td></tr></table></figure><h4 id="4-简述Flask上下文管理流程"><a href="#4-简述Flask上下文管理流程" class="headerlink" title="4.简述Flask上下文管理流程?"></a>4.简述Flask上下文管理流程?</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># a、简单来说，falsk上下文管理可以分为三个阶段：</span><br><span class="line">　　1、&apos;请求进来时&apos;：将请求相关的数据放入上下问管理中</span><br><span class="line">　　2、&apos;在视图函数中&apos;：要去上下文管理中取值</span><br><span class="line">　　3、&apos;请求响应&apos;：要将上下文管理中的数据清除</span><br><span class="line"># b、详细点来说：</span><br><span class="line">　　1、&apos;请求刚进来&apos;：</span><br><span class="line">        将request，session封装在RequestContext类中</span><br><span class="line">        app，g封装在AppContext类中</span><br><span class="line">        并通过LocalStack将requestcontext和appcontext放入Local类中</span><br><span class="line">　　2、&apos;视图函数中&apos;：</span><br><span class="line">        通过localproxy---&gt;偏函数---&gt;localstack---&gt;local取值</span><br><span class="line">　　3、&apos;请求响应时&apos;：</span><br><span class="line">        先执行save.session()再各自执行pop(),将local中的数据清除</span><br></pre></td></tr></table></figure><h4 id="5-Flask中的g的作用？"><a href="#5-Flask中的g的作用？" class="headerlink" title="5.Flask中的g的作用？"></a>5.Flask中的g的作用？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># g是贯穿于一次请求的全局变量，当请求进来将g和current_app封装为一个APPContext类，</span><br><span class="line"># 再通过LocalStack将Appcontext放入Local中，取值时通过偏函数在LocalStack、local中取值；</span><br><span class="line"># 响应时将local中的g数据删除：</span><br></pre></td></tr></table></figure><h4 id="6-Flask中上下文管理主要涉及到了那些相关的类？并描述类主要作用？"><a href="#6-Flask中上下文管理主要涉及到了那些相关的类？并描述类主要作用？" class="headerlink" title="6.Flask中上下文管理主要涉及到了那些相关的类？并描述类主要作用？"></a>6.Flask中上下文管理主要涉及到了那些相关的类？并描述类主要作用？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RequestContext  #封装进来的请求（赋值给ctx）</span><br><span class="line">AppContext      #封装app_ctx</span><br><span class="line">LocalStack      #将local对象中的数据维护成一个栈（先进后出）</span><br><span class="line">Local           #保存请求上下文对象和app上下文对象</span><br></pre></td></tr></table></figure><h4 id="7-为什么要Flask把Local对象中的的值stack-维护成一个列表？"><a href="#7-为什么要Flask把Local对象中的的值stack-维护成一个列表？" class="headerlink" title="7.为什么要Flask把Local对象中的的值stack 维护成一个列表？"></a>7.为什么要Flask把Local对象中的的值stack 维护成一个列表？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 因为通过维护成列表，可以实现一个栈的数据结构，进栈出栈时只取一个数据，巧妙的简化了问题。</span><br><span class="line"># 还有，在多app应用时，可以实现数据隔离；列表里不会加数据，而是会生成一个新的列表</span><br><span class="line"># local是一个字典，字典里key（stack）是唯一标识，value是一个列表</span><br></pre></td></tr></table></figure><h4 id="8-Flask中多app应用是怎么完成？"><a href="#8-Flask中多app应用是怎么完成？" class="headerlink" title="8.Flask中多app应用是怎么完成？"></a>8.Flask中多app应用是怎么完成？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">请求进来时，可以根据URL的不同，交给不同的APP处理。蓝图也可以实现。</span><br><span class="line">    #app1 = Flask(&apos;app01&apos;)</span><br><span class="line">    #app2 = Flask(&apos;app02&apos;)</span><br><span class="line">    #@app1.route(&apos;/index&apos;)</span><br><span class="line">    #@app2.route(&apos;/index2&apos;)</span><br><span class="line">源码中在DispatcherMiddleware类里调用app2.__call__，</span><br><span class="line">原理其实就是URL分割，然后将请求分发给指定的app。</span><br><span class="line">之后app也按单app的流程走。就是从app.__call__走。</span><br></pre></td></tr></table></figure><h4 id="9-解释Flask框架中的Local对象和threading-local对象的区别？"><a href="#9-解释Flask框架中的Local对象和threading-local对象的区别？" class="headerlink" title="9.解释Flask框架中的Local对象和threading.local对象的区别？"></a>9.解释Flask框架中的Local对象和threading.local对象的区别？</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># a.threading.local</span></span><br><span class="line">作用：为每个线程开辟一块空间进行数据存储(数据隔离)。</span><br><span class="line"></span><br><span class="line">问题：自己通过字典创建一个类似于threading.local的东西。</span><br><span class="line">storage = &#123;</span><br><span class="line">   <span class="number">4740</span>: &#123;val: <span class="number">0</span>&#125;,</span><br><span class="line">   <span class="number">4732</span>: &#123;val: <span class="number">1</span>&#125;,</span><br><span class="line">   <span class="number">4731</span>: &#123;val: <span class="number">3</span>&#125;,</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># b.自定义Local对象</span></span><br><span class="line">作用：为每个线程(协程)开辟一块空间进行数据存储(数据隔离)。</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span><span class="params">(object)</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">      object.__setattr__(self, <span class="string">'storage'</span>, &#123;&#125;)</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, k, v)</span>:</span></span><br><span class="line">      ident = get_ident()</span><br><span class="line">      <span class="keyword">if</span> ident <span class="keyword">in</span> self.storage:</span><br><span class="line">         self.storage[ident][k] = v</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">         self.storage[ident] = &#123;k: v&#125;</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, k)</span>:</span></span><br><span class="line">      ident = get_ident()</span><br><span class="line">      <span class="keyword">return</span> self.storage[ident][k]</span><br><span class="line">obj = Local()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(arg)</span>:</span></span><br><span class="line">   obj.val = arg</span><br><span class="line">   obj.xxx = arg</span><br><span class="line">   print(obj.val)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">   t = Thread(target=task, args=(i,))</span><br><span class="line">   t.start()</span><br></pre></td></tr></table></figure><h4 id="10-Flask中-blinker-是什么？"><a href="#10-Flask中-blinker-是什么？" class="headerlink" title="10.Flask中 blinker 是什么？"></a>10.Flask中 blinker 是什么？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># flask中的信号blinker</span><br><span class="line">信号主要是让开发者可是在flask请求过程中定制一些行为。</span><br><span class="line">或者说flask在列表里面预留了几个空列表，在里面存东西。</span><br><span class="line">简言之，信号允许某个&apos;发送者&apos;通知&apos;接收者&apos;有事情发生了</span><br><span class="line">@ before_request有返回值，blinker没有返回值</span><br><span class="line"></span><br><span class="line"># 10个信号</span><br><span class="line"></span><br><span class="line">request_started = _signals.signal(&apos;request-started&apos;) #请求到来前执行</span><br><span class="line"></span><br><span class="line">request_finished = _signals.signal(&apos;request-finished&apos;) #请求结束后执行</span><br><span class="line"></span><br><span class="line">before_render_template = _signals.signal(&apos;before-render-template&apos;)#模板渲染前执行</span><br><span class="line"></span><br><span class="line">template_rendered = _signals.signal(&apos;template-rendered&apos;)#模板渲染后执行</span><br><span class="line"></span><br><span class="line">got_request_exception = _signals.signal(&apos;got-request-exception&apos;) #请求执行出现异常时执行</span><br><span class="line"></span><br><span class="line">request_tearing_down = _signals.signal(&apos;request-tearing-down&apos;)#请求执行完毕后自动执行（无论成功与否）</span><br><span class="line"></span><br><span class="line">appcontext_tearing_down = _signals.signal(&apos;appcontext-tearing-down&apos;)# 请求上下文执行完毕后自动执行（无论成功与否）</span><br><span class="line"></span><br><span class="line">appcontext_pushed = _signals.signal(&apos;appcontext-pushed&apos;) #请求app上下文push时执行</span><br><span class="line"></span><br><span class="line">appcontext_popped = _signals.signal(&apos;appcontext-popped&apos;) #请求上下文pop时执行</span><br><span class="line"></span><br><span class="line">message_flashed = _signals.signal(&apos;message-flashed&apos;)#调用flask在其中添加数据时，自动触发</span><br></pre></td></tr></table></figure><h3 id="爬虫与celery"><a href="#爬虫与celery" class="headerlink" title="爬虫与celery"></a>爬虫与celery</h3><h4 id="1-爬虫中已经执行过的任务，如何不再执行？"><a href="#1-爬虫中已经执行过的任务，如何不再执行？" class="headerlink" title="1.爬虫中已经执行过的任务，如何不再执行？"></a>1.爬虫中已经执行过的任务，如何不再执行？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-防爬虫策略？"><a href="#2-防爬虫策略？" class="headerlink" title="2.防爬虫策略？"></a>2.防爬虫策略？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-爬虫并发量？"><a href="#3-爬虫并发量？" class="headerlink" title="3.爬虫并发量？"></a>3.爬虫并发量？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-爬虫去重-布隆过滤器？"><a href="#4-爬虫去重-布隆过滤器？" class="headerlink" title="4.爬虫去重 布隆过滤器？"></a>4.爬虫去重 布隆过滤器？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-简述-requests模块的作用及基本使用？"><a href="#5-简述-requests模块的作用及基本使用？" class="headerlink" title="5.简述 requests模块的作用及基本使用？"></a>5.简述 requests模块的作用及基本使用？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 作用：</span><br><span class="line">使用requests可以模拟浏览器的请求</span><br><span class="line"># 常用参数：</span><br><span class="line">   url、headers、cookies、data</span><br><span class="line">   json、params、proxy</span><br><span class="line"># 常用返回值：</span><br><span class="line">   content</span><br><span class="line">   iter_content</span><br><span class="line">   text </span><br><span class="line">   encoding=&quot;utf-8&quot;</span><br><span class="line">   cookie.get_dict()</span><br></pre></td></tr></table></figure><h4 id="6-简述-beautifulsoup模块的作用及基本使用？"><a href="#6-简述-beautifulsoup模块的作用及基本使用？" class="headerlink" title="6.简述 beautifulsoup模块的作用及基本使用？"></a>6.简述 beautifulsoup模块的作用及基本使用？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># BeautifulSoup</span><br><span class="line">用于从HTML或XML文件中提取、过滤想要的数据形式</span><br><span class="line">#常用方法</span><br><span class="line">解析：html.parser 或者 lxml（需要下载安装） </span><br><span class="line">   find、find_all、text、attrs、get</span><br></pre></td></tr></table></figure><h4 id="7-简述-seleninu模块的作用及基本使用"><a href="#7-简述-seleninu模块的作用及基本使用" class="headerlink" title="7.简述 seleninu模块的作用及基本使用?"></a>7.简述 seleninu模块的作用及基本使用?</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Selenium是一个用于Web应用程序测试的工具，</span><br><span class="line">他的测试直接运行在浏览器上，模拟真实用户，按照代码做出点击、输入、打开等操作</span><br><span class="line"></span><br><span class="line">爬虫中使用他是为了解决requests无法解决javascript动态问题</span><br></pre></td></tr></table></figure><h4 id="8-scrapy框架中各组件的工作流程？"><a href="#8-scrapy框架中各组件的工作流程？" class="headerlink" title="8.scrapy框架中各组件的工作流程？"></a>8.scrapy框架中各组件的工作流程？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#1、生成初始的Requests来爬取第一个URLS，并且标识一个回调函数</span><br><span class="line">第一个请求定义在start_requests()方法内默认从start_urls列表中获得url地址来生成Request请求，</span><br><span class="line">默认的回调函数是parse方法。回调函数在下载完成返回response时自动触发</span><br><span class="line">#2、在回调函数中，解析response并且返回值</span><br><span class="line">返回值可以4种：</span><br><span class="line">    a、包含解析数据的字典</span><br><span class="line">    b、Item对象</span><br><span class="line">    c、新的Request对象（新的Requests也需要指定一个回调函数）</span><br><span class="line">    d、或者是可迭代对象（包含Items或Request）</span><br><span class="line">#3、在回调函数中解析页面内容</span><br><span class="line">通常使用Scrapy自带的Selectors，但很明显你也可以使用Beutifulsoup，lxml或其他你爱用啥用啥。</span><br><span class="line">#4、最后，针对返回的Items对象将会被持久化到数据库</span><br><span class="line">    通过Item Pipeline组件存到数据库</span><br><span class="line">    或者导出到不同的文件（通过Feed exports）</span><br><span class="line">http://www.cnblogs.com/wupeiqi/articles/6229292.html</span><br></pre></td></tr></table></figure><h4 id="9-scrapy框架中如何实现大文件的下载？"><a href="#9-scrapy框架中如何实现大文件的下载？" class="headerlink" title="9.scrapy框架中如何实现大文件的下载？"></a>9.scrapy框架中如何实现大文件的下载？</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> twisted.web.client <span class="keyword">import</span> Agent, getPage, ResponseDone, PotentialDataLoss</span><br><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> defer, reactor, protocol</span><br><span class="line"><span class="keyword">from</span> twisted.web._newclient <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ResponseReader</span><span class="params">(protocol.Protocol)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, finished, txresponse, file_name)</span>:</span></span><br><span class="line">        self._finished = finished</span><br><span class="line">        self._txresponse = txresponse</span><br><span class="line">        self._bytes_received = <span class="number">0</span></span><br><span class="line">        self.f = open(file_name, mode=<span class="string">'wb'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dataReceived</span><span class="params">(self, bodyBytes)</span>:</span></span><br><span class="line">        self._bytes_received += len(bodyBytes)</span><br><span class="line">        <span class="comment"># 一点一点的下载</span></span><br><span class="line">        self.f.write(bodyBytes)</span><br><span class="line">        self.f.flush()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connectionLost</span><span class="params">(self, reason)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._finished.called:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> reason.check(ResponseDone):</span><br><span class="line">            <span class="comment"># 下载完成</span></span><br><span class="line">            self._finished.callback((self._txresponse, <span class="string">'success'</span>))</span><br><span class="line">        <span class="keyword">elif</span> reason.check(PotentialDataLoss):</span><br><span class="line">            <span class="comment"># 下载部分</span></span><br><span class="line">            self._finished.callback((self._txresponse, <span class="string">'partial'</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 下载异常</span></span><br><span class="line">            self._finished.errback(reason)</span><br><span class="line">        self.f.close()</span><br></pre></td></tr></table></figure><h4 id="10-scrapy中的pipelines工作原理？"><a href="#10-scrapy中的pipelines工作原理？" class="headerlink" title="10.scrapy中的pipelines工作原理？"></a>10.scrapy中的pipelines工作原理？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Scrapy 提供了 pipeline 模块来执行保存数据的操作。</span><br><span class="line">在创建的 Scrapy 项目中自动创建了一个 pipeline.py 文件，同时创建了一个默认的 Pipeline 类。</span><br><span class="line">我们可以根据需要自定义 Pipeline 类，然后在 settings.py 文件中进行配置即可</span><br></pre></td></tr></table></figure><h4 id="11-celery是什么以及应用场景？"><a href="#11-celery是什么以及应用场景？" class="headerlink" title="11.celery是什么以及应用场景？"></a>11.celery是什么以及应用场景？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Celery是由Python开发的一个简单、灵活、可靠的处理大量任务的分发系统，</span><br><span class="line"># 它不仅支持实时处理也支持任务调度。</span><br></pre></td></tr></table></figure><h4 id="12-celery如何实现定时任务？"><a href="#12-celery如何实现定时任务？" class="headerlink" title="12.celery如何实现定时任务？"></a>12.celery如何实现定时任务？</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># celery实现定时任务</span></span><br><span class="line">启用Celery的定时任务需要设置CELERYBEAT_SCHEDULE 。 </span><br><span class="line">CELERYBEAT_SCHEDULE=<span class="string">'djcelery.schedulers.DatabaseScheduler'</span><span class="comment">#定时任务</span></span><br><span class="line"><span class="string">'创建定时任务'</span></span><br><span class="line"><span class="comment"># 通过配置CELERYBEAT_SCHEDULE：</span></span><br><span class="line"><span class="comment">#每30秒调用task.add</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line">CELERYBEAT_SCHEDULE = &#123;</span><br><span class="line">    <span class="string">'add-every-30-seconds'</span>: &#123;</span><br><span class="line">        <span class="string">'task'</span>: <span class="string">'tasks.add'</span>,</span><br><span class="line">        <span class="string">'schedule'</span>: timedelta(seconds=<span class="number">30</span>),</span><br><span class="line">        <span class="string">'args'</span>: (<span class="number">16</span>, <span class="number">16</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13-简述-celery多任务结构目录"><a href="#13-简述-celery多任务结构目录" class="headerlink" title="13.简述 celery多任务结构目录"></a>13.简述 celery多任务结构目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pro_cel</span><br><span class="line">    ├── celery_tasks     # celery相关文件夹</span><br><span class="line">    │   ├── celery.py    # celery连接和配置相关文件</span><br><span class="line">    │   └── tasks.py     #  所有任务函数</span><br><span class="line">    ├── check_result.py  # 检查结果</span><br><span class="line">    └── send_task.py     # 触发任务</span><br></pre></td></tr></table></figure><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><h4 id="1-git如何解决冲突？"><a href="#1-git如何解决冲突？" class="headerlink" title="1.git如何解决冲突？"></a>1.git如何解决冲突？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">冲突的场景：</span><br><span class="line"></span><br><span class="line">- 情景一：多个分支合并到一个分支时；</span><br><span class="line">- 情景二：多个分支向同一个远端分支推送代码时</span><br><span class="line"></span><br><span class="line">其实，pull和push的本质就是本地分支合并（merge）到远端分支或者远端分支合并（merge）到本地分支，所以这两个 也可能存在冲突。</span><br><span class="line"></span><br><span class="line">解决办法：</span><br><span class="line"></span><br><span class="line">- 情景一：在当前分支上，直接修改冲突代码--&gt;add--&gt;commit</span><br><span class="line">- 情景二：在本地当前分支上，修改冲突代码--&gt;add--&gt;commit--&gt;push</span><br><span class="line"></span><br><span class="line">注：一般只冲突的时候，冲突内容会直接写在冲突文件里面，我们就可以直接使用工具（vim或者其他的IDE）打开冲突文件，直接修改</span><br></pre></td></tr></table></figure><h4 id="2-git如何做review？"><a href="#2-git如何做review？" class="headerlink" title="2.git如何做review？"></a>2.git如何做review？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、你们公司的代码review分支怎么做？谁来做？</span><br><span class="line">答：组长创建review分支，我们小功能开发完之后，合并到review分支交给老大（小组长）来看，</span><br><span class="line">1.1、你组长不开发代码吗？</span><br><span class="line">        他开发代码，但是它只开发核心的东西，任务比较少。</span><br><span class="line">        或者抽出时间，我们一起做这个事情</span><br><span class="line">2、你们公司协同开发是怎么协同开发的？</span><br><span class="line">每个人都有自己的分支，阶段性代码完成之后，合并到review，然后交给老大看</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/june_y/article/details/50817993" target="_blank" rel="noopener">https://blog.csdn.net/june_y/article/details/50817993</a></p><h4 id="3-git-reabase的作用？"><a href="#3-git-reabase的作用？" class="headerlink" title="3.git reabase的作用？"></a>3.git reabase的作用？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">merge：</span><br><span class="line">会将不同分支的提交合并成一个新的节点，之前的提交分开显示，</span><br><span class="line">注重历史信息、可以看出每个分支信息，基于时间点,遇到冲突,手动解决,再次提交</span><br><span class="line">rebase：</span><br><span class="line">将两个分支的提交结果融合成线性，不会产生新的节点;</span><br><span class="line">注重开发过程，遇到冲突，手动解决，继续操作</span><br></pre></td></tr></table></figure><h4 id="4-git常用的命令"><a href="#4-git常用的命令" class="headerlink" title="4.git常用的命令"></a>4.git常用的命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># git init</span><br><span class="line">    初始化，当前所在的文件夹可以被管理且以后版本相关的数据都会存储到.git文件中</span><br><span class="line"># git status</span><br><span class="line">    查看当前文件夹以及子目录中文件是否发生变化：</span><br><span class="line">    内容修改/新增文件/删除，已经变化的文件会变成红色，已经add的文件会变成绿色</span><br><span class="line"># git add .</span><br><span class="line">    给发生变化的文件（贴上一个标签）或 将发生变化的文件放到某个地方，</span><br><span class="line">    只写一个句点符就代表把git status中红色的文件全部打上标签</span><br><span class="line"># git commit -m</span><br><span class="line">    新增用户登录认证功能以及xxx功能将“绿色”文件添加到版本中</span><br><span class="line"># git log</span><br><span class="line">    查看所有版本提交记录，可以获取版本号</span><br><span class="line"># git reset --hard 版本号   </span><br><span class="line">    将最新的版本回退到更早的版本</span><br><span class="line"># git reflog   </span><br><span class="line">    回退到之前版本后悔了，再更新到最新或者最新之前的版本</span><br><span class="line"># git reset --hard 版本 回退</span><br></pre></td></tr></table></figure><h4 id="5-公司如何基于git做协同开发？"><a href="#5-公司如何基于git做协同开发？" class="headerlink" title="5.公司如何基于git做协同开发？"></a>5.公司如何基于git做协同开发？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 大致工作流程</span><br><span class="line">公司：</span><br><span class="line">    下载代码</span><br><span class="line">        git clone https://gitee.com/wupeiqi/xianglong.git</span><br><span class="line">        或创建目录 </span><br><span class="line">        cd 目录 </span><br><span class="line">        git init </span><br><span class="line">        git remote add origin https://gitee.com/wupeiqi/xianglong.git</span><br><span class="line">        git pull origin maste </span><br><span class="line">    创建dev分支</span><br><span class="line">        git checkout dev </span><br><span class="line">        git pull origin dev </span><br><span class="line">        继续写代码</span><br><span class="line">        git add . </span><br><span class="line">        git commit -m &apos;提交记录&apos;</span><br><span class="line">        git push origin dev </span><br><span class="line">回家： </span><br><span class="line">    拉代码：</span><br><span class="line">        git pull origin dev </span><br><span class="line">    继续写：</span><br><span class="line">        继续写代码</span><br><span class="line">        git add . </span><br><span class="line">        git commit -m &apos;提交记录&apos;</span><br><span class="line">        git push origin dev</span><br></pre></td></tr></table></figure><h4 id="6-如何为github开源代码贡献自己的代码"><a href="#6-如何为github开源代码贡献自己的代码" class="headerlink" title="6.如何为github开源代码贡献自己的代码"></a>6.如何为github开源代码贡献自己的代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、fork需要协作项目</span><br><span class="line">2、克隆/关联fork的项目到本地</span><br><span class="line">3、新建分支（branch）并检出（checkout）新分支</span><br><span class="line">4、在新分支上完成代码开发</span><br><span class="line">5、开发完成后将你的代码合并到master分支</span><br><span class="line">6、添加原作者的仓库地址作为一个新的仓库地址</span><br><span class="line">7、合并原作者的master分支到你自己的master分支,用于和作者仓库代码同步</span><br><span class="line">8、push你的本地仓库到GitHub</span><br><span class="line">9、在Github上提交 pull requests</span><br><span class="line">10、等待管理员（你需要贡献的开源项目管理员）处理</span><br></pre></td></tr></table></figure><h4 id="7-什么是敏捷开发"><a href="#7-什么是敏捷开发" class="headerlink" title="7.什么是敏捷开发"></a>7.什么是敏捷开发</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&apos;敏捷开发&apos;：是一种以人为核心、迭代、循序渐进的开发方式。</span><br><span class="line"></span><br><span class="line">它并不是一门技术，而是一种开发方式，也就是一种软件开发的流程。</span><br><span class="line">它会指导我们用规定的环节去一步一步完成项目的开发。</span><br><span class="line">因为它采用的是迭代式开发，所以这种开发方式的主要驱动核心是人</span><br></pre></td></tr></table></figure><h3 id="linux部分"><a href="#linux部分" class="headerlink" title="linux部分"></a>linux部分</h3><h4 id="1-讲讲储常用的linux-git的命令和作用？"><a href="#1-讲讲储常用的linux-git的命令和作用？" class="headerlink" title="1.讲讲储常用的linux/git的命令和作用？"></a>1.讲讲储常用的linux/git的命令和作用？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-什么是cdn？"><a href="#2-什么是cdn？" class="headerlink" title="2.什么是cdn？"></a>2.什么是cdn？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">目的是使用户可以就近到服务器取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度。</span><br><span class="line"></span><br><span class="line">cdn 即内容分发网络</span><br></pre></td></tr></table></figure><h4 id="3-LVS是什么及作用？"><a href="#3-LVS是什么及作用？" class="headerlink" title="3.LVS是什么及作用？"></a>3.LVS是什么及作用？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LVS ：Linux虚拟服务器</span><br><span class="line">作用：LVS主要用于多服务器的负载均衡。</span><br><span class="line">它工作在网络层，可以实现高性能，高可用的服务器集群技术。它廉价，可把许多低性能的服务器组合在一起形成一个超级服务器。它易用，配置非常简单，且有多种负载均衡的方法。它稳定可靠，即使在集群的服务器中某台服务器无法正常工作，也不影响整体效果。另外可扩展性也非常好。</span><br></pre></td></tr></table></figure><h4 id="4-Nginx是什么及作用？"><a href="#4-Nginx是什么及作用？" class="headerlink" title="4.Nginx是什么及作用？"></a>4.Nginx是什么及作用？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-keepalived是什么及作用"><a href="#5-keepalived是什么及作用" class="headerlink" title="5.keepalived是什么及作用?"></a>5.keepalived是什么及作用?</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-haproxy是什么以及作用？"><a href="#6-haproxy是什么以及作用？" class="headerlink" title="6.haproxy是什么以及作用？"></a>6.haproxy是什么以及作用？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="7-什么是负载均衡？"><a href="#7-什么是负载均衡？" class="headerlink" title="7.什么是负载均衡？"></a>7.什么是负载均衡？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-什么是rpc及应用场景？"><a href="#8-什么是rpc及应用场景？" class="headerlink" title="8.什么是rpc及应用场景？"></a>8.什么是rpc及应用场景？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="1-微服务的问题"><a href="#1-微服务的问题" class="headerlink" title="1.微服务的问题"></a>1.微服务的问题</h4><p>怎么理解微服务，服务如何划分，可以从哪几个方面去划分，为什么这样划分，微服务带来了哪些好处，哪些坏处，如何看待这个问题？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>你对devops的了解？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-如何理解网关，网关带来的好处和坏处，如何解决"><a href="#2-如何理解网关，网关带来的好处和坏处，如何解决" class="headerlink" title="2.如何理解网关，网关带来的好处和坏处，如何解决"></a>2.如何理解网关，网关带来的好处和坏处，如何解决</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-设计模式"><a href="#3-设计模式" class="headerlink" title="3.设计模式"></a>3.设计模式</h4><p><strong>掌握哪些设计模式，常用哪些，项目中如何使用的，为什么用这个，不用那个？手写一个线程安全的单例模式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-讲一讲对Redis-的了解，项目中如何使用的，哪个地方使用的，为什么要使用？"><a href="#4-讲一讲对Redis-的了解，项目中如何使用的，哪个地方使用的，为什么要使用？" class="headerlink" title="4.讲一讲对Redis 的了解，项目中如何使用的，哪个地方使用的，为什么要使用？"></a>4.讲一讲对Redis 的了解，项目中如何使用的，哪个地方使用的，为什么要使用？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-哨兵机制、Redis-两种备份方式的区别，项目中用的哪种，为什么？"><a href="#5-哨兵机制、Redis-两种备份方式的区别，项目中用的哪种，为什么？" class="headerlink" title="5.哨兵机制、Redis 两种备份方式的区别，项目中用的哪种，为什么？"></a>5.哨兵机制、Redis 两种备份方式的区别，项目中用的哪种，为什么？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-讲一讲对分布式锁的了解"><a href="#6-讲一讲对分布式锁的了解" class="headerlink" title="6.讲一讲对分布式锁的了解"></a>6.讲一讲对分布式锁的了解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="7-项目中系统监控怎么做的？"><a href="#7-项目中系统监控怎么做的？" class="headerlink" title="7.项目中系统监控怎么做的？"></a>7.项目中系统监控怎么做的？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-Kafka问题"><a href="#8-Kafka问题" class="headerlink" title="8.Kafka问题"></a>8.Kafka问题</h4><p>Kafka 如何保证消息顺序消费、在consumer group 中新增一个consumer 会提高消费消息的速度吗、那如果我想提高消息消费的速度，我要怎么办？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="9-你看过flask的源码吗？你是如何理解开源的？"><a href="#9-你看过flask的源码吗？你是如何理解开源的？" class="headerlink" title="9.你看过flask的源码吗？你是如何理解开源的？"></a>9.你看过flask的源码吗？你是如何理解开源的？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="10-B-Tree和B-Tree的区别？"><a href="#10-B-Tree和B-Tree的区别？" class="headerlink" title="10.B Tree和B+ Tree的区别？"></a>10.B Tree和B+ Tree的区别？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.B树中同一键值不会出现多次，并且有可能出现在叶结点，也有可能出现在非叶结点中。</span><br><span class="line"></span><br><span class="line">而B+树的键一定会出现在叶结点中，并有可能在非叶结点中重复出现，以维持B+树的平衡。</span><br><span class="line">2.因为B树键位置不定，且在整个树结构中只出现一次，</span><br></pre></td></tr></table></figure><h4 id="11-解释-PV、UV-的含义？"><a href="#11-解释-PV、UV-的含义？" class="headerlink" title="11.解释 PV、UV 的含义？"></a>11.解释 PV、UV 的含义？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PV访问量（Page View），即页面访问量，每打开一次页面PV计数+1，刷新页面也是。</span><br><span class="line">UV访问数（Unique Visitor）指独立访客访问数，一台电脑终端为一个访客。</span><br></pre></td></tr></table></figure><h4 id="12-解释-QPS的含义？"><a href="#12-解释-QPS的含义？" class="headerlink" title="12.解释 QPS的含义？"></a>12.解释 QPS的含义？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;QPS(Query Per Second)&apos;</span><br><span class="line">每秒查询率，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准</span><br></pre></td></tr></table></figure><h4 id="13-什么是反向代理？"><a href="#13-什么是反向代理？" class="headerlink" title="13.什么是反向代理？"></a>13.什么是反向代理？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">正向代理代理客户端(客户端找哟个代理去访问服务器，服务器不知道你的真实IP)</span><br><span class="line">反向代理代理服务器(服务器找一个代理给你响应，你不知道服务器的真实IP)</span><br></pre></td></tr></table></figure><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><h4 id="1-聊项目"><a href="#1-聊项目" class="headerlink" title="1.聊项目"></a>1.聊项目</h4><p>画项目架构图，画一个用户从发起请求到接收到响应，中间经过哪些服务，每个服务做什么事情的流程图，讲数据库设计具体到部分表中有哪些字段？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-crm中权限组件的实现流程？"><a href="#2-crm中权限组件的实现流程？" class="headerlink" title="2.crm中权限组件的实现流程？"></a>2.crm中权限组件的实现流程？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-权限组件的实现流程？"><a href="#3-权限组件的实现流程？" class="headerlink" title="3.权限组件的实现流程？"></a>3.权限组件的实现流程？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-如何实现粒度控制到按钮？"><a href="#4-如何实现粒度控制到按钮？" class="headerlink" title="4.如何实现粒度控制到按钮？"></a>4.如何实现粒度控制到按钮？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-权限信息为什么放在session中？有什么不好？"><a href="#5-权限信息为什么放在session中？有什么不好？" class="headerlink" title="5.权限信息为什么放在session中？有什么不好？"></a>5.权限信息为什么放在session中？有什么不好？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;drf&quot;&gt;&lt;a href=&quot;#drf&quot; class=&quot;headerlink&quot; title=&quot;drf&quot;&gt;&lt;/a&gt;drf&lt;/h3&gt;&lt;h4 id=&quot;1-接口的幂等性是什么意思？&quot;&gt;&lt;a href=&quot;#1-接口的幂等性是什么意思？&quot; class=&quot;headerlink&quot; title=&quot;1.接口的幂等性是什么意思？&quot;&gt;&lt;/a&gt;1.接口的幂等性是什么意思？&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;一个接口通过1次相同的访问，再对该接口进行N次相同的访问时，对资源不造影响就认为接口具有幂等性。&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    GET，  #第一次获取结果、第二次也是获取结果对资源都不会造成影响，幂等。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    POST， #第一次新增数据，第二次也会再次新增，非幂等。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PUT，  #第一次更新数据，第二次不会再次更新，幂等。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PATCH，#第一次更新数据，第二次可能跟新的数据不同，非幂等。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DELTE，#第一次删除数据，第二次不在再删除，幂等。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;flask&quot;&gt;&lt;a href=&quot;#flask&quot; class=&quot;headerlink&quot; title=&quot;flask&quot;&gt;&lt;/a&gt;flask&lt;/h3&gt;&lt;h4 id=&quot;1-Flask框架依赖组件&quot;&gt;&lt;a href=&quot;#1-Flask框架依赖组件&quot; class=&quot;headerlink&quot; title=&quot;1.Flask框架依赖组件&quot;&gt;&lt;/a&gt;1.Flask框架依赖组件&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 依赖jinja2模板引擎&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 依赖werkzurg协议&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;2-Flask蓝图的作用&quot;&gt;&lt;a href=&quot;#2-Flask蓝图的作用&quot; class=&quot;headerlink&quot; title=&quot;2.Flask蓝图的作用&quot;&gt;&lt;/a&gt;2.Flask蓝图的作用&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# blueprint把实现不同功能的module分开.也就是把一个大的App分割成各自实现不同功能的module.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 在一个blueprint中可以调用另一个blueprint的视图函数, 但要加相应的blueprint名.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="小绿本" scheme="https://pl1649947109.github.io/pl1649947109/tags/%E5%B0%8F%E7%BB%BF%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>第三讲——flask所有的基础知识</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/21/%E4%B9%A6/flask/%E7%AC%AC%E4%B8%89%E8%AE%B2%E2%80%94%E2%80%94flask%E6%89%80%E6%9C%89%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/21/书/flask/第三讲——flask所有的基础知识/</id>
    <published>2019-11-21T12:00:00.000Z</published>
    <updated>2019-11-22T03:37:37.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内容回顾"><a href="#内容回顾" class="headerlink" title="内容回顾"></a>内容回顾</h2><p>1.什么是接口？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#两个方面</span></span><br><span class="line">- interface类型，Python没有，Java/C<span class="comment">#语言才有。用于约束实现了该接口的类中必须有某些指定方法。</span></span><br><span class="line">- api也可以成为一个接口。</span><br></pre></td></tr></table></figure><p>2.抽象类和抽象方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">他既具有约束的功能又具有提供子类继承方法的功能，Python中通过abc实现。</span><br></pre></td></tr></table></figure><p>3.重载和重写？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">重载就是根据方法中参数的不同调用不同的方法，实现不同的功能。</span><br><span class="line">重写就是方法对父类方法的重写。</span><br></pre></td></tr></table></figure><a id="more"></a><p>4.flask和django的区别？</p><p>5.什么是数据库链接池？以及作用？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据库连接池是创建一些和数据库的连接，共我们去调用，我们使用完之后再把该连接放回到数据库连接池中。</span><br><span class="line">在没有数据库连接池的时候，我们每操作一次数据库就建立一个连接，这样就大大降低了效率。或者我们使用同一个连接，这又会造成数据库压力。数据连接池就很好的解决了上面的问题</span><br></pre></td></tr></table></figure><p>6.sqlhelper</p><p>7.面向对象的上下文管理</p><p>8.上下文管理和SQLHelper</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlHelper</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.pool = PooledDB(</span><br><span class="line">            creator=pymysql,  <span class="comment"># 使用链接数据库的模块</span></span><br><span class="line">            maxconnections=<span class="number">6</span>,  <span class="comment"># 连接池允许的最大连接数，0和None表示不限制连接数</span></span><br><span class="line">            mincached=<span class="number">2</span>,  <span class="comment"># 初始化时，链接池中至少创建的链接，0表示不创建</span></span><br><span class="line">            blocking=<span class="literal">True</span>,  <span class="comment"># 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错</span></span><br><span class="line">            ping=<span class="number">0</span>,</span><br><span class="line">            <span class="comment"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class="line">            host=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">            port=<span class="number">3306</span>,</span><br><span class="line">            user=<span class="string">'root'</span>,</span><br><span class="line">            password=<span class="string">'222'</span>,</span><br><span class="line">            database=<span class="string">'cmdb'</span>,</span><br><span class="line">            charset=<span class="string">'utf8'</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">        conn = self.pool.connection()</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        <span class="keyword">return</span> conn,cursor</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self,cursor,conn)</span>:</span></span><br><span class="line">        cursor.close()</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fetchall</span><span class="params">(self,sql, *args)</span>:</span></span><br><span class="line">        <span class="string">""" 获取所有数据 """</span></span><br><span class="line">        conn,cursor = self.open()</span><br><span class="line">        cursor.execute(sql, args)</span><br><span class="line">        result = cursor.fetchall()</span><br><span class="line">        self.close(conn,cursor)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fetchone</span><span class="params">(self,sql, *args)</span>:</span></span><br><span class="line">        <span class="string">""" 获取所有数据 """</span></span><br><span class="line">        conn, cursor = self.open()</span><br><span class="line">        cursor.execute(sql, args)</span><br><span class="line">        result = cursor.fetchone()</span><br><span class="line">        self.close(conn, cursor)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.open()[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        print(exc_type, exc_val, exc_tb)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db = SqlHelper()</span><br></pre></td></tr></table></figure><h2 id="今日概要"><a href="#今日概要" class="headerlink" title="今日概要"></a>今日概要</h2><ul><li>wsgi</li><li>创建flask对象<ul><li>模板</li><li>静态文件</li></ul></li><li>路由系统<ul><li>路由的应用：装饰器（推荐）、方法</li><li>动态路由</li></ul></li><li>视图<ul><li>FBV</li><li>CBV</li></ul></li><li>模板<ul><li>继承</li><li>include</li><li>自定义标签</li></ul></li><li>特殊装饰器<ul><li>before_request充当中间件角色</li></ul></li></ul><h2 id="今日详细"><a href="#今日详细" class="headerlink" title="今日详细"></a>今日详细</h2><h3 id="1-wsgi-找源码的流程"><a href="#1-wsgi-找源码的流程" class="headerlink" title="1.wsgi 找源码的流程"></a>1.wsgi 找源码的流程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line"><span class="keyword">from</span> werkzeug.wrappers <span class="keyword">import</span> BaseResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    print(<span class="string">'请求来了'</span>)</span><br><span class="line">    response = BaseResponse(<span class="string">'你好'</span>)</span><br><span class="line">    <span class="keyword">return</span> response(environ, start_response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run_simple(<span class="string">'127.0.0.1'</span>, <span class="number">5000</span>, func)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    1.程序启动，等待用户请求到来</span></span><br><span class="line"><span class="string">        app.run()</span></span><br><span class="line"><span class="string">    2.用户请求到来 app()    </span></span><br><span class="line"><span class="string">        app.__call__</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h3 id="2-flask对象"><a href="#2-flask对象" class="headerlink" title="2.flask对象"></a>2.flask对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,template_folder=<span class="string">'templates'</span>,static_folder=<span class="string">'static'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/static/xx/xx/mm.jpg"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 建议 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for('static',filename='xx/xx/mm.jpg')&#125;&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3.配置文件"></a>3.配置文件</h3><h4 id="3-1-基于全局变量"><a href="#3-1-基于全局变量" class="headerlink" title="3.1 基于全局变量"></a>3.1 基于全局变量</h4><p><img src="http://9017499461.linshutu.top/flask%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%85%A8%E5%B1%80.JPG" alt></p><h4 id="3-2-基于类的方式"><a href="#3-2-基于类的方式" class="headerlink" title="3.2 基于类的方式"></a>3.2 基于类的方式</h4><p><img src="http://9017499461.linshutu.top/flask%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%9F%BA%E4%BA%8E%E7%B1%BB.JPG" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">flask中的配置文件是一个flask.config.Config对象（继承字典）,默认配置为：</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'DEBUG'</span>:                                get_debug_flag(default=<span class="literal">False</span>),  是否开启Debug模式</span><br><span class="line">        <span class="string">'TESTING'</span>:                              <span class="literal">False</span>,                          是否开启测试模式</span><br><span class="line">        <span class="string">'PROPAGATE_EXCEPTIONS'</span>:                 <span class="literal">None</span>,                          </span><br><span class="line">        <span class="string">'PRESERVE_CONTEXT_ON_EXCEPTION'</span>:        <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'SECRET_KEY'</span>:                           <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'PERMANENT_SESSION_LIFETIME'</span>:           timedelta(days=<span class="number">31</span>),</span><br><span class="line">        <span class="string">'USE_X_SENDFILE'</span>:                       <span class="literal">False</span>,</span><br><span class="line">        <span class="string">'LOGGER_NAME'</span>:                          <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'LOGGER_HANDLER_POLICY'</span>:               <span class="string">'always'</span>,</span><br><span class="line">        <span class="string">'SERVER_NAME'</span>:                          <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'APPLICATION_ROOT'</span>:                     <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'SESSION_COOKIE_NAME'</span>:                  <span class="string">'session'</span>,</span><br><span class="line">        <span class="string">'SESSION_COOKIE_DOMAIN'</span>:                <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'SESSION_COOKIE_PATH'</span>:                  <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'SESSION_COOKIE_HTTPONLY'</span>:              <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'SESSION_COOKIE_SECURE'</span>:                <span class="literal">False</span>,</span><br><span class="line">        <span class="string">'SESSION_REFRESH_EACH_REQUEST'</span>:         <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'MAX_CONTENT_LENGTH'</span>:                   <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'SEND_FILE_MAX_AGE_DEFAULT'</span>:            timedelta(hours=<span class="number">12</span>),</span><br><span class="line">        <span class="string">'TRAP_BAD_REQUEST_ERRORS'</span>:              <span class="literal">False</span>,</span><br><span class="line">        <span class="string">'TRAP_HTTP_EXCEPTIONS'</span>:                 <span class="literal">False</span>,</span><br><span class="line">        <span class="string">'EXPLAIN_TEMPLATE_LOADING'</span>:             <span class="literal">False</span>,</span><br><span class="line">        <span class="string">'PREFERRED_URL_SCHEME'</span>:                 <span class="string">'http'</span>,</span><br><span class="line">        <span class="string">'JSON_AS_ASCII'</span>:                        <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'JSON_SORT_KEYS'</span>:                       <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'JSONIFY_PRETTYPRINT_REGULAR'</span>:          <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'JSONIFY_MIMETYPE'</span>:                     <span class="string">'application/json'</span>,</span><br><span class="line">        <span class="string">'TEMPLATES_AUTO_RELOAD'</span>:                <span class="literal">None</span>,</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">方式一：</span><br><span class="line">    app.config[<span class="string">'DEBUG'</span>] = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">    PS： 由于Config对象本质上是字典，所以还可以使用app.config.update(...)</span><br><span class="line"> </span><br><span class="line">方式二：</span><br><span class="line">    app.config.from_pyfile(<span class="string">"python文件名称"</span>)</span><br><span class="line">        如：</span><br><span class="line">            settings.py</span><br><span class="line">                DEBUG = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">            app.config.from_pyfile(<span class="string">"settings.py"</span>)</span><br><span class="line"> </span><br><span class="line">    app.config.from_envvar(<span class="string">"环境变量名称"</span>)</span><br><span class="line">        环境变量的值为python文件名称名称，内部调用from_pyfile方法</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    app.config.from_json(<span class="string">"json文件名称"</span>)</span><br><span class="line">        JSON文件名称，必须是json格式，因为内部会执行json.loads</span><br><span class="line"> </span><br><span class="line">    app.config.from_mapping(&#123;<span class="string">'DEBUG'</span>:<span class="literal">True</span>&#125;)</span><br><span class="line">        字典格式</span><br><span class="line"> </span><br><span class="line">    app.config.from_object(<span class="string">"python类或类的路径"</span>)</span><br><span class="line"> </span><br><span class="line">        app.config.from_object(<span class="string">'pro_flask.settings.TestingConfig'</span>)</span><br><span class="line"> </span><br><span class="line">        settings.py</span><br><span class="line"> </span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">Config</span><span class="params">(object)</span>:</span></span><br><span class="line">                DEBUG = <span class="literal">False</span></span><br><span class="line">                TESTING = <span class="literal">False</span></span><br><span class="line">                DATABASE_URI = <span class="string">'sqlite://:memory:'</span></span><br><span class="line"> </span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">ProductionConfig</span><span class="params">(Config)</span>:</span></span><br><span class="line">                DATABASE_URI = <span class="string">'mysql://user@localhost/foo'</span></span><br><span class="line"> </span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">DevelopmentConfig</span><span class="params">(Config)</span>:</span></span><br><span class="line">                DEBUG = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">TestingConfig</span><span class="params">(Config)</span>:</span></span><br><span class="line">                TESTING = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">        PS: 从sys.path中已经存在路径开始写</span><br><span class="line">     </span><br><span class="line"> </span><br><span class="line">    PS: settings.py文件默认路径要放在程序root_path目录，如果instance_relative_config为<span class="literal">True</span>，则就是instance_path目录</span><br></pre></td></tr></table></figure><h3 id="4-路由系统"><a href="#4-路由系统" class="headerlink" title="4.路由系统"></a>4.路由系统</h3><ul><li><p>路由的两种写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line">app.add_url_rule(<span class="string">'/index'</span>, <span class="string">'index'</span>, index)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 公司里一般用这种方式</span></span><br><span class="line"><span class="meta">@app.route('/login')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>)</span><br></pre></td></tr></table></figure></li><li><p>路由加载的源码流程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 将url和函数打包成为 rule 对象</span><br><span class="line">- 将rule对象添加到map对象中。</span><br><span class="line">- app.url_map = map对象</span><br></pre></td></tr></table></figure></li><li><p>动态路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/login')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route('/login/&lt;name&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(name)</span>:</span></span><br><span class="line">print(type(name))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route('/login/&lt;int:name&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(name)</span>:</span></span><br><span class="line">print(type(name))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>)</span><br></pre></td></tr></table></figure></li><li><p>支持正则表达式的路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> BaseConverter</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegConverter</span><span class="params">(BaseConverter)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, map, regex)</span>:</span></span><br><span class="line">        super().__init__(map)</span><br><span class="line">        self.regex = regex</span><br><span class="line">app.url_map.converters[<span class="string">'regex'</span>] = RegConverter</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index/&lt;regex("\d+"):x1&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(x1)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-视图"><a href="#5-视图" class="headerlink" title="5.视图"></a>5.视图</h3><h4 id="5-1-FBV"><a href="#5-1-FBV" class="headerlink" title="5.1 FBV"></a>5.1 FBV</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line">app.add_url_rule(<span class="string">'/index'</span>, <span class="string">'index'</span>, index)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 公司里一般用这种方式</span></span><br><span class="line"><span class="meta">@app.route('/login')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>)</span><br></pre></td></tr></table></figure><h4 id="5-2-CBV"><a href="#5-2-CBV" class="headerlink" title="5.2 CBV"></a>5.2 CBV</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,views</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'before1'</span>)</span><br><span class="line">        result = func(*args,**kwargs)</span><br><span class="line">        print(<span class="string">'after1'</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'before2'</span>)</span><br><span class="line">        result = func(*args,**kwargs)</span><br><span class="line">        print(<span class="string">'after2'</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span><span class="params">(views.MethodView)</span>:</span></span><br><span class="line">    methods = [<span class="string">'GET'</span>,<span class="string">"POST"</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#装饰器</span></span><br><span class="line">    decorators = [test1,test2]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'get'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'get'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'post'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'post'</span></span><br><span class="line"></span><br><span class="line">app.add_url_rule(<span class="string">'/user'</span>, view_func=UserView.as_view(<span class="string">'user'</span>)) <span class="comment"># endpoint</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br><span class="line">    </span><br><span class="line"><span class="comment">#注意：before1--&gt;before2--&gt;get--&gt;after2--&gt;after1</span></span><br></pre></td></tr></table></figure><h3 id="6-模板"><a href="#6-模板" class="headerlink" title="6.模板"></a>6.模板</h3><p>Flask使用的是Jinja2模板，所以其语法与Django无差别。</p><h4 id="6-1-基本用法"><a href="#6-1-基本用法" class="headerlink" title="6.1 基本用法"></a>6.1 基本用法</h4><p>flask比django更加接近Python。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(arg)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'你好'</span> + arg</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/md')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    nums = [<span class="number">11</span>,<span class="number">222</span>,<span class="number">33</span>]</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'md.html'</span>,nums=nums,f=func)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>头<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        &#123;% block content %&#125; &#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>底<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>模板继承</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'layout.html' %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>MD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    &#123;% include 'form.html' %&#125;</span><br><span class="line">    &#123;&#123; f("pl") &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-定义全局模板方法"><a href="#6-2-定义全局模板方法" class="headerlink" title="6.2 定义全局模板方法"></a>6.2 定义全局模板方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.template_global() #  &#123;&#123; func("pl") &#125;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(arg)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'pl'</span> + arg</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.template_filter() # &#123;&#123; "pl"|x1("pl1") &#125;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x1</span><span class="params">(arg,name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'pl'</span> + arg + name</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/md/hg')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'md_hg.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>注意：在蓝图中注册时候，应用返回只有本蓝图。</p><h3 id="7-特殊装饰器-中间件"><a href="#7-特殊装饰器-中间件" class="headerlink" title="7.特殊装饰器(中间件)"></a>7.特殊装饰器(中间件)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.path == <span class="string">'/login'</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    print(<span class="string">'f1'</span>)</span><br><span class="line">    <span class="comment"># return '123'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f10</span><span class="params">(response)</span>:</span></span><br><span class="line">    print(<span class="string">'f10'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'index'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>多个装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'f1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'f2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f10</span><span class="params">(response)</span>:</span></span><br><span class="line">    print(<span class="string">'f10'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f20</span><span class="params">(response)</span>:</span></span><br><span class="line">    print(<span class="string">'f20'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'index'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br><span class="line">    app.__call__</span><br><span class="line">    </span><br><span class="line"><span class="comment">#注意：f1--&gt;f2--&gt;index--&gt;f20--&gt;f10  请求按照顺序进来，回去的时候，将列表反转，所有顺序是反着回去</span></span><br></pre></td></tr></table></figure><p>注意：before_after/request可以在蓝图中定义，在蓝图中定义的话，作用域只在本蓝图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, flash, redirect, render_template, request</span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">'some_secret'</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route('/set')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index2</span><span class="params">()</span>:</span></span><br><span class="line">    v = request.args.get(<span class="string">'p'</span>)</span><br><span class="line">    flash(v)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'ok'</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiddleWare</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,wsgi_app)</span>:</span></span><br><span class="line">        self.wsgi_app = wsgi_app</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> self.wsgi_app(*args, **kwargs)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.wsgi_app = MiddleWare(app.wsgi_app)</span><br><span class="line">    app.run(port=<span class="number">9999</span>)</span><br></pre></td></tr></table></figure><h3 id="8-小细节"><a href="#8-小细节" class="headerlink" title="8.小细节"></a>8.小细节</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'xxx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'xxx'</span>)</span><br><span class="line">app.before_request(x1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h2 id="赠送：threading-local"><a href="#赠送：threading-local" class="headerlink" title="赠送：threading.local"></a>赠送：threading.local</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当每个线程在执行 val1.xx=1 ，在内部会为此线程开辟一个空间，来存储 xx=1</span></span><br><span class="line"><span class="comment"># val1.xx,找到此线程自己的内存地址去取自己存储 xx</span></span><br><span class="line">val1 = threading.local()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(i)</span>:</span></span><br><span class="line">    val1.num = i</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(val1.num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    t = threading.Thread(target=task,args=(i,))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h4 id="message"><a href="#message" class="headerlink" title="message"></a>message</h4><p>message是一个基于Session实现的用于保存数据的集合，其特点是：使用一次就删除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, flash, redirect, render_template, request, get_flashed_messages</span><br><span class="line"></span><br><span class="line">        app = Flask(__name__)</span><br><span class="line">        app.secret_key = <span class="string">'some_secret'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">        @app.route('/')</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">index1</span><span class="params">()</span>:</span></span><br><span class="line">            messages = get_flashed_messages()</span><br><span class="line">            print(messages)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Index1"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">        @app.route('/set')</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">index2</span><span class="params">()</span>:</span></span><br><span class="line">            v = request.args.get(<span class="string">'p'</span>)</span><br><span class="line">            flash(v)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'ok'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">            app.run()</span><br></pre></td></tr></table></figure><h4 id="请求扩展"><a href="#请求扩展" class="headerlink" title="请求扩展"></a>请求扩展</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Request, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__, template_folder=<span class="string">'templates'</span>)</span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_first_request1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'before_first_request1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_first_request2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'before_first_request2'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_request1</span><span class="params">()</span>:</span></span><br><span class="line">    Request.nnn = <span class="number">123</span></span><br><span class="line">    print(<span class="string">'before_request1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_request2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'before_request2'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_request1</span><span class="params">(response)</span>:</span></span><br><span class="line">    print(<span class="string">'before_request1'</span>, response)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_request2</span><span class="params">(response)</span>:</span></span><br><span class="line">    print(<span class="string">'before_request2'</span>, response)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span><span class="params">(error)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'This page does not exist'</span>, <span class="number">404</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.template_global()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sb</span><span class="params">(a1, a2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a1 + a2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.template_filter()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db</span><span class="params">(a1, a2, a3)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a1 + a2 + a3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'hello.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;内容回顾&quot;&gt;&lt;a href=&quot;#内容回顾&quot; class=&quot;headerlink&quot; title=&quot;内容回顾&quot;&gt;&lt;/a&gt;内容回顾&lt;/h2&gt;&lt;p&gt;1.什么是接口？&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#两个方面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- interface类型，Python没有，Java/C&lt;span class=&quot;comment&quot;&gt;#语言才有。用于约束实现了该接口的类中必须有某些指定方法。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- api也可以成为一个接口。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2.抽象类和抽象方法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;他既具有约束的功能又具有提供子类继承方法的功能，Python中通过abc实现。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;3.重载和重写？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;重载就是根据方法中参数的不同调用不同的方法，实现不同的功能。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;重写就是方法对父类方法的重写。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="flask" scheme="https://pl1649947109.github.io/pl1649947109/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>第二讲——面试题、数据库连接池</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/20/%E4%B9%A6/flask/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E2%80%94%E2%80%94%E9%9D%A2%E8%AF%95%E9%A2%98%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E3%80%81%E9%85%8D%E7%BD%AE%E3%80%81%E8%B7%AF%E7%94%B1%E3%80%81%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/20/书/flask/第二讲——面试题、数据库连接池、配置、路由、中间件/</id>
    <published>2019-11-20T12:00:00.000Z</published>
    <updated>2019-11-21T13:41:02.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>1.编程语言及他们之间的区别？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C/C++ ,很多语言的底层实现都是与C，代码执行效率高，自己做内存管理，对代码要求比较高，很多功</span><br><span class="line">能需要手动试下。</span><br><span class="line">Java，比较好的编程语言，很多企业级应用都会选择java。</span><br><span class="line">C#，是微软开始的编程语言，部署时需要放在windown server 上，最大弊端是window系统花钱。</span><br><span class="line">PHP，一般用于快速搭建网站。</span><br><span class="line">Python，简洁且入门简单，很少的代码就可以做很多事情。</span><br><span class="line">Golang，语法和C比较接近，处理并发时比较有优势 + docker。</span><br></pre></td></tr></table></figure><p>2.构造函数和析构函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">构造函数，用于创建对象的函数。</span><br><span class="line">析构函数，用于销毁对象的函数。</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(self,*args,**kwargs)</span>:</span> <span class="comment"># 构造函数</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self,*args,**kwargs)</span>:</span> <span class="comment"># 析构函数</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">obj = Foo()</span><br><span class="line"><span class="keyword">del</span> obj</span><br></pre></td></tr></table></figure><a id="more"></a><p>3.重写和重载的区别?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(self,int a1)</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(self,string a1)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">重载，函数名相同而参数类型/个数/返回值不同。</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(self)</span>:</span></span><br><span class="line">print(<span class="number">123</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span><span class="params">(Foo)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(self)</span>:</span></span><br><span class="line">print(<span class="number">666</span>)</span><br><span class="line">重写，在子类中对父类中的方法进行重写。</span><br></pre></td></tr></table></figure><p>4.什么是接口？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Interface IPerson:</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(self,a1)</span></span></span><br><span class="line"><span class="function">    <span class="title">def</span> <span class="title">f2</span><span class="params">(self,a1)</span></span></span><br><span class="line">public interface Predator &#123;</span><br><span class="line">    boolean chasePrey(Prey p);</span><br><span class="line">    void eatPrey(Prey p);</span><br><span class="line">&#125;</span><br><span class="line">接口是以interface关键字开头，内部可以定义方法，但方法中不用写具体实现，他的作用：专门用于</span><br><span class="line">约束实现他的类，Python中没有接口类型。</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(IPerson)</span>:</span> <span class="comment"># UserInfo类实现了IPerson接口</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(self,a1)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(self,a1)</span>:</span></span><br><span class="line">        print(<span class="number">123123</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">666</span></span><br></pre></td></tr></table></figure><p>5.Python的类执行多继承/ 其他语言不支持多继承</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(Base,NewBase)</span>:</span> </span><br><span class="line"><span class="keyword">pass</span> </span><br><span class="line"><span class="comment"># 其他 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>:</span> </span><br><span class="line"><span class="keyword">pass</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewBase</span><span class="params">(Base)</span>:</span> </span><br><span class="line"><span class="keyword">pass</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(NewBase)</span>:</span> </span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>6.在其他语言中 可以实现多个接口 / 不可以继承多个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Java </span><br><span class="line">interface IBase: </span><br><span class="line"><span class="function">def <span class="title">f1</span><span class="params">(sef)</span> </span></span><br><span class="line"><span class="function">interface INewBase: </span></span><br><span class="line"><span class="function">def <span class="title">f2</span><span class="params">(sef)</span> </span></span><br><span class="line"><span class="function">class <span class="title">Foo</span><span class="params">(IBase,INewBase)</span>: </span></span><br><span class="line"><span class="function">def <span class="title">f1</span><span class="params">(self)</span>: </span></span><br><span class="line"><span class="function">pass </span></span><br><span class="line"><span class="function">def <span class="title">f2</span><span class="params">(self)</span>: </span></span><br><span class="line"><span class="function">pass</span></span><br></pre></td></tr></table></figure><p>7.抽象类和抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#java </span><br><span class="line"><span class="function">abstrac class <span class="title">Base</span><span class="params">(object)</span>: # 抽象类 </span></span><br><span class="line"><span class="function">def <span class="title">f1</span><span class="params">(self)</span>: # 普通方法 </span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="number">123</span>)</span> </span></span><br><span class="line"><span class="function">def <span class="keyword">abstract</span> <span class="title">f2</span><span class="params">(self)</span>: # 抽象方法，内部不能写任何代码 </span></span><br><span class="line"><span class="function">pass </span></span><br><span class="line"><span class="function">class <span class="title">Foo</span><span class="params">(Base)</span>: </span></span><br><span class="line"><span class="function">def <span class="title">f2</span><span class="params">(sef)</span>: </span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="number">123</span>)</span> </span></span><br><span class="line"><span class="function">obj </span>= Foo() </span><br><span class="line">obj.f2() </span><br><span class="line">obj.f1()</span><br></pre></td></tr></table></figure><p>8.总结</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- 重载 </span><br><span class="line">- 重写 </span><br><span class="line">- 构造函数 </span><br><span class="line">Python</span><br><span class="line">class Foo: </span><br><span class="line">def __new__(self): </span><br><span class="line">pass </span><br><span class="line">public class Foo&#123; </span><br><span class="line"># 函数和类名相同 </span><br><span class="line">public void Foo()&#123; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">- 析构函数 </span><br><span class="line">__del__ </span><br><span class="line">finalize </span><br><span class="line">- 接口 </span><br><span class="line">- 抽象类/抽象方法</span><br></pre></td></tr></table></figure><p>9.三元运算</p><p>10.lambda 表达式</p><p>11.yield关键字</p><p>12.进程和线程的区别?</p><p>13.数据库 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">数据库设计：博客系统 / 呼啦圈 </span><br><span class="line"></span><br><span class="line">SQL语句： </span><br><span class="line">select * from user left join depart on user.depart_id = depart.id </span><br><span class="line">select * from user left join depart on user.depart_id = depart.id order by id desc </span><br><span class="line">inner join 和 left join的区别？ </span><br><span class="line">select gender,count(1) from user group by gender </span><br><span class="line">select gender,count(1) from user group by gender having count(1) &gt; 2 </span><br><span class="line"></span><br><span class="line">视图：是一个虚拟的表。 </span><br><span class="line">为某个sql语句取名字： select * from user where id&lt;100 ====&gt; t1 </span><br><span class="line">select * from t1 where name = &apos;成说&apos;、 </span><br><span class="line"></span><br><span class="line">存储过程：是大堆存储在数据库中的SQL语句。 </span><br><span class="line">create producer pro(x1): </span><br><span class="line">update ... </span><br><span class="line">delete ... </span><br><span class="line">select ... </span><br><span class="line"></span><br><span class="line">触发器：存储在数据中的一个特殊的东西。</span><br><span class="line">create trigger x1 before insert 表: </span><br><span class="line">.... </span><br><span class="line">create trigger x1 after insert 表:</span><br></pre></td></tr></table></figure><p>14.在浏览器上输入 <a href="http://www.xxx.com" target="_blank" rel="noopener">www.xxx.com</a> 发生了什么？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- dns解析：www.xxx.com 解析成 IP </span><br><span class="line">- 本质通过socket进行通信 </span><br><span class="line">- 请求到达框架，以django框架为例：.....</span><br></pre></td></tr></table></figure><p>15.http和https的区别？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http,默认端口：80 </span><br><span class="line">https，默认端口：443 </span><br><span class="line"></span><br><span class="line">http的数据是基于明文传输。 </span><br><span class="line">https的数据是基于密文传输。</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/wupeiqi/articles/11647089.html" target="_blank" rel="noopener">https://www.cnblogs.com/wupeiqi/articles/11647089.html</a></p><p>16.cookie和session的区别？ </p><p>17.get和post的区别？</p><p>18.数据结构 </p><ul><li><p>链表 </p><ul><li><p>单项 </p></li><li><p>双向 </p></li></ul></li><li><p>树 </p><ul><li><p>二叉树前序遍历 </p></li><li><p>二叉树中序遍历 </p></li><li><p>二叉树后序遍历 </p></li></ul></li><li><p>面试题 </p><ul><li><p>伪代码实现一个链表 </p></li><li><p>对链表进行反转（逆置） </p></li><li><p>两个队列生成一个栈 </p></li><li><p>前序遍历 / 中序遍历 / 后序遍历 </p><p><a href="https://www.cnblogs.com/wupeiqi/p/11604077.html" target="_blank" rel="noopener">https://www.cnblogs.com/wupeiqi/p/11604077.html</a></p></li></ul></li></ul><p>19.算法 </p><ul><li>冒泡排序 </li><li>快速排序 </li><li>二分查找</li></ul><h2 id="数据库的连接池"><a href="#数据库的连接池" class="headerlink" title="数据库的连接池"></a>数据库的连接池</h2><p>解释：python编程中可以使用pymysql进行数据库连接及增删改查操作，但每次连接mysql请求时，都是独立的去请求访问，比较浪费资源，而且访问数量达到一定数量时，对mysql的性能会产生较大的影响。因此实际使用中，通常会使用数据库的连接池技术，来访问数据库达到资源复用。</p><p><strong>使用的工具</strong>：DBUtils</p><p>它提供两种外部接口：</p><ul><li>PersistentDB：提供线程专用的数据库连接，并自动管理连接。</li><li>PooledDB：提供线程间可共享的数据库连接，并自动管理连接。 </li></ul><p><strong>对比</strong></p><p>未使用连接池</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getconn</span><span class="params">(host, user, passwd, db, sql, port=<span class="number">3306</span>,charset=<span class="string">'utf8'</span>)</span>:</span></span><br><span class="line">    conn = pymysql.connect(host=host, user=user, passwd=passwd, port=port, db=db, charset=charset)  <span class="comment">#建立连接</span></span><br><span class="line">    cur = conn.cursor(cursor=pymysql.cursors.DictCursor)        <span class="comment">#建立游标并指定游标类型</span></span><br><span class="line">    cur.execute(sql)                                            <span class="comment">#执行sql</span></span><br><span class="line">    <span class="keyword">if</span> sql.startswith(<span class="string">'select'</span>):                                <span class="comment">#判断sql是否是select</span></span><br><span class="line">        res = cur.fetchone()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        conn.commit()                                           <span class="comment">#insert\delete\update语句执行完毕后需要进行commit</span></span><br><span class="line">        res = <span class="number">88</span></span><br><span class="line">    cur.close()                                                 <span class="comment">#关闭游标</span></span><br><span class="line">    conn.close()                                                <span class="comment">#关闭连接</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>使用数据池：两种模式</p><p>模式一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">POOL = PersistentDB(</span><br><span class="line">    creator=pymysql,  <span class="comment"># 使用链接数据库的模块</span></span><br><span class="line">    maxusage=<span class="literal">None</span>,  <span class="comment"># 一个链接最多被重复使用的次数，None表示无限制</span></span><br><span class="line">    setsession=[],  <span class="comment"># 开始会话前执行的命令列表。如：["set datestyle to ...", "set time zone ..."]</span></span><br><span class="line">    ping=<span class="number">0</span>,</span><br><span class="line">    <span class="comment"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class="line">    closeable=<span class="literal">False</span>,</span><br><span class="line">    <span class="comment"># 如果为False时， conn.close() 实际上被忽略，供下次使用，再线程关闭时，才会自动关闭链接。如果为True时， conn.close()则关闭链接，那么再次调用pool.connection时就会报错，因为已经真的关闭了连接（pool.steady_connection()可以获取一个新的链接）</span></span><br><span class="line">    threadlocal=<span class="literal">None</span>,  <span class="comment"># 本线程独享值得对象，用于保存链接对象，如果链接对象被重置</span></span><br><span class="line">    host=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port=<span class="number">3306</span>,</span><br><span class="line">    user=<span class="string">'root'</span>,</span><br><span class="line">    password=<span class="string">'123'</span>,</span><br><span class="line">    database=<span class="string">'pooldb'</span>,</span><br><span class="line">    charset=<span class="string">'utf8'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    conn = POOL.connection(shareable=<span class="literal">False</span>)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(<span class="string">'select * from tb1'</span>)</span><br><span class="line">    result = cursor.fetchall()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure><p>模式二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB, SharedDBConnection</span><br><span class="line">POOL = PooledDB(</span><br><span class="line">    creator=pymysql,  <span class="comment"># 使用链接数据库的模块</span></span><br><span class="line">    maxconnections=<span class="number">6</span>,  <span class="comment"># 连接池允许的最大连接数，0和None表示不限制连接数</span></span><br><span class="line">    mincached=<span class="number">2</span>,  <span class="comment"># 初始化时，链接池中至少创建的空闲的链接，0表示不创建</span></span><br><span class="line">    maxcached=<span class="number">5</span>,  <span class="comment"># 链接池中最多闲置的链接，0和None不限制</span></span><br><span class="line">    maxshared=<span class="number">3</span>,  <span class="comment"># 链接池中最多共享的链接数量，0和None表示全部共享。PS: 无用，因为pymysql和MySQLdb等模块的 threadsafety都为1，所有值无论设置为多少，_maxcached永远为0，所以永远是所有链接都共享。</span></span><br><span class="line">    blocking=<span class="literal">True</span>,  <span class="comment"># 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错</span></span><br><span class="line">    maxusage=<span class="literal">None</span>,  <span class="comment"># 一个链接最多被重复使用的次数，None表示无限制</span></span><br><span class="line">    setsession=[],  <span class="comment"># 开始会话前执行的命令列表。如：["set datestyle to ...", "set time zone ..."]</span></span><br><span class="line">    ping=<span class="number">0</span>,</span><br><span class="line">    <span class="comment"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class="line">    host=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port=<span class="number">3306</span>,</span><br><span class="line">    user=<span class="string">'root'</span>,</span><br><span class="line">    password=<span class="string">'123'</span>,</span><br><span class="line">    database=<span class="string">'pooldb'</span>,</span><br><span class="line">    charset=<span class="string">'utf8'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 检测当前正在运行连接数的是否小于最大链接数，如果不小于则：等待或报raise TooManyConnections异常</span></span><br><span class="line">    <span class="comment"># 否则</span></span><br><span class="line">    <span class="comment"># 则优先去初始化时创建的链接中获取链接 SteadyDBConnection。</span></span><br><span class="line">    <span class="comment"># 然后将SteadyDBConnection对象封装到PooledDedicatedDBConnection中并返回。</span></span><br><span class="line">    <span class="comment"># 如果最开始创建的链接没有链接，则去创建一个SteadyDBConnection对象，再封装到PooledDedicatedDBConnection中并返回。</span></span><br><span class="line">    <span class="comment"># 一旦关闭链接后，连接就返回到连接池让后续线程继续使用。</span></span><br><span class="line">    conn = POOL.connection()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(th, '链接被拿走了', conn1._con)</span></span><br><span class="line">    <span class="comment"># print(th, '池子里目前有', pool._idle_cache, '\r\n')</span></span><br><span class="line"></span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(<span class="string">'select * from tb1'</span>)</span><br><span class="line">    result = cursor.fetchall()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure><p>进阶：使用pymysql和DBUtils连接数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OPMysql</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    __pool = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 构造函数，创建数据库连接、游标</span></span><br><span class="line">        self.coon = OPMysql.getmysqlconn()</span><br><span class="line">        self.cur = self.coon.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据库连接池连接</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getmysqlconn</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">if</span> OPMysql.__pool <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            __pool = PooledDB(creator=pymysql, mincached=<span class="number">1</span>, maxcached=<span class="number">20</span>, host=mysqlInfo[<span class="string">'host'</span>], user=mysqlInfo[<span class="string">'user'</span>], passwd=mysqlInfo[<span class="string">'passwd'</span>], db=mysqlInfo[<span class="string">'db'</span>], port=mysqlInfo[<span class="string">'port'</span>], charset=mysqlInfo[<span class="string">'charset'</span>])</span><br><span class="line">            print(__pool)</span><br><span class="line">        <span class="keyword">return</span> __pool.connection()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 插入\更新\删除sql</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">op_insert</span><span class="params">(self, sql)</span>:</span></span><br><span class="line">        print(<span class="string">'op_insert'</span>, sql)</span><br><span class="line">        insert_num = self.cur.execute(sql)</span><br><span class="line">        print(<span class="string">'mysql sucess '</span>, insert_num)</span><br><span class="line">        self.coon.commit()</span><br><span class="line">        <span class="keyword">return</span> insert_num</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">op_select</span><span class="params">(self, sql)</span>:</span></span><br><span class="line">        print(<span class="string">'op_select'</span>, sql)</span><br><span class="line">        self.cur.execute(sql)  <span class="comment"># 执行sql</span></span><br><span class="line">        select_res = self.cur.fetchone()  <span class="comment"># 返回结果为字典</span></span><br><span class="line">        print(<span class="string">'op_select'</span>, select_res)</span><br><span class="line">        <span class="keyword">return</span> select_res</span><br><span class="line"></span><br><span class="line">    <span class="comment">#释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispose</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.coon.close()</span><br><span class="line">        self.cur.close()</span><br></pre></td></tr></table></figure><p>参数解释：</p><ul><li>mincached，最少的空闲连接数，如果空闲连接数小于这个数，pool会创建一个新的连接。</li><li>maxcached，最大的空闲连接数，如果空闲连接数大于这个数，pool会关闭空闲连接。</li><li>maxconnections，最大的连接数，进程中最大可创建的线程数。</li><li>blocking， 当连接数达到最大连接数时，再次请求时，如果这个值是True，请求连接的程序会一直等待，直到当前连接数小于最大连接数；如果这个值为False，会报错。</li><li>masxshared，当连接数达到这个数时，新请求的连接会分享已经分配出去的连接。</li></ul><p><strong>连接池对性能的提升</strong></p><ul><li>在程序创建连接的时候，可以从一个空闲的连接中获取，不需要重新初始化连接，提升获取连接的速度。</li><li>关闭连接的时候，把连接放回连接池，而不是真正的关闭，所以可以减少频繁的打开和关闭连接。</li></ul><p><strong>加锁</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> RLock</span><br><span class="line"></span><br><span class="line">LOCK = RLock()</span><br><span class="line">CONN = pymysql.connect(host=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">                       port=<span class="number">3306</span>,</span><br><span class="line">                       user=<span class="string">'root'</span>,</span><br><span class="line">                       password=<span class="string">'123'</span>,</span><br><span class="line">                       database=<span class="string">'pooldb'</span>,</span><br><span class="line">                       charset=<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(arg)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> LOCK:    <span class="comment">#没有锁就会报错</span></span><br><span class="line">        cursor = CONN.cursor()</span><br><span class="line">        cursor.execute(<span class="string">'select * from tb1'</span>)</span><br><span class="line">        result = cursor.fetchall()</span><br><span class="line">        cursor.close()</span><br><span class="line"></span><br><span class="line">        print(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    t = threading.Thread(target=task, args=(i,))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><p><strong>封装成函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB</span><br><span class="line"></span><br><span class="line">POOL = PooledDB(</span><br><span class="line">    creator=pymysql,  <span class="comment"># 使用链接数据库的模块</span></span><br><span class="line">    maxconnections=<span class="number">6</span>,  <span class="comment"># 连接池允许的最大连接数，0和None表示不限制连接数</span></span><br><span class="line">    mincached=<span class="number">2</span>,  <span class="comment"># 初始化时，链接池中至少创建的链接，0表示不创建</span></span><br><span class="line">    blocking=<span class="literal">True</span>,  <span class="comment"># 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错</span></span><br><span class="line">    ping=<span class="number">0</span>, <span class="comment"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class="line"></span><br><span class="line">    host=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port=<span class="number">3306</span>,</span><br><span class="line">    user=<span class="string">'root'</span>,</span><br><span class="line">    password=<span class="string">'222'</span>,</span><br><span class="line">    database=<span class="string">'cmdb'</span>,</span><br><span class="line">    charset=<span class="string">'utf8'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetchall</span><span class="params">(sql,*args)</span>:</span></span><br><span class="line">    <span class="string">""" 获取所有数据 """</span></span><br><span class="line">    conn = POOL.connection()</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(sql,args)</span><br><span class="line">    result = cursor.fetchall()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetchone</span><span class="params">(sql, *args)</span>:</span></span><br><span class="line">    <span class="string">""" 获取单挑数据 """</span></span><br><span class="line">    conn = POOL.connection()</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(sql, args)</span><br><span class="line">    result = cursor.fetchone()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p><strong>封装成类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlHelper</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.pool = PooledDB(</span><br><span class="line">            creator=pymysql,  <span class="comment"># 使用链接数据库的模块</span></span><br><span class="line">            maxconnections=<span class="number">6</span>,  <span class="comment"># 连接池允许的最大连接数，0和None表示不限制连接数</span></span><br><span class="line">            mincached=<span class="number">2</span>,  <span class="comment"># 初始化时，链接池中至少创建的链接，0表示不创建</span></span><br><span class="line">            blocking=<span class="literal">True</span>,  <span class="comment"># 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错</span></span><br><span class="line">            ping=<span class="number">0</span>,</span><br><span class="line">            <span class="comment"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class="line">            host=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">            port=<span class="number">3306</span>,</span><br><span class="line">            user=<span class="string">'root'</span>,</span><br><span class="line">            password=<span class="string">'222'</span>,</span><br><span class="line">            database=<span class="string">'cmdb'</span>,</span><br><span class="line">            charset=<span class="string">'utf8'</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">        conn = self.pool.connection()</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        <span class="keyword">return</span> conn,cursor</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self,cursor,conn)</span>:</span></span><br><span class="line">        cursor.close()</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fetchall</span><span class="params">(self,sql, *args)</span>:</span></span><br><span class="line">        <span class="string">""" 获取所有数据 """</span></span><br><span class="line">        conn,cursor = self.open()</span><br><span class="line">        cursor.execute(sql, args)</span><br><span class="line">        result = cursor.fetchall()</span><br><span class="line">        self.close(conn,cursor)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fetchone</span><span class="params">(self,sql, *args)</span>:</span></span><br><span class="line">        <span class="string">""" 获取所有数据 """</span></span><br><span class="line">        conn, cursor = self.open()</span><br><span class="line">        cursor.execute(sql, args)</span><br><span class="line">        result = cursor.fetchone()</span><br><span class="line">        self.close(conn, cursor)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db = SqlHelper()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;面试题&quot;&gt;&lt;a href=&quot;#面试题&quot; class=&quot;headerlink&quot; title=&quot;面试题&quot;&gt;&lt;/a&gt;面试题&lt;/h2&gt;&lt;p&gt;1.编程语言及他们之间的区别？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;C/C++ ,很多语言的底层实现都是与C，代码执行效率高，自己做内存管理，对代码要求比较高，很多功&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;能需要手动试下。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Java，比较好的编程语言，很多企业级应用都会选择java。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;C#，是微软开始的编程语言，部署时需要放在windown server 上，最大弊端是window系统花钱。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PHP，一般用于快速搭建网站。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Python，简洁且入门简单，很少的代码就可以做很多事情。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Golang，语法和C比较接近，处理并发时比较有优势 + docker。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2.构造函数和析构函数&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;构造函数，用于创建对象的函数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;析构函数，用于销毁对象的函数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self,*args,**kwargs)&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 构造函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__del__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self,*args,**kwargs)&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 析构函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj = Foo()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;del&lt;/span&gt; obj&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="flask" scheme="https://pl1649947109.github.io/pl1649947109/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>SaltStack的详细解读</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/20/%E7%9F%A5%E8%AF%86%E6%89%A9%E5%B1%95/SaltStack%E7%9A%84%E8%AF%A6%E7%BB%86%E8%A7%A3%E8%AF%BB/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/20/知识扩展/SaltStack的详细解读/</id>
    <published>2019-11-20T12:00:00.000Z</published>
    <updated>2019-11-19T08:14:36.613Z</updated>
    
    <content type="html"><![CDATA[<h3 id="salt简介"><a href="#salt简介" class="headerlink" title="salt简介"></a>salt简介</h3><blockquote><p>SaltStack是一个服务器基础架构集中化管理平台，具备配置管理、远程执行、监控等功能，基于Python语言实现，结合轻量级消息队列（ZeroMQ）与Python第三方模块（Pyzmq、PyCrypto、Pyjinjia2、python-msgpack和PyYAML等）构建。</p><p>通过部署SaltStack，我们可以在成千万台服务器上做到批量执行命令，根据不同业务进行配置集中化管理、分发文件、采集服务器数据、操作系统基础及软件包管理等，SaltStack是运维人员提高工作效率、规范业务配置与操作的利器。</p></blockquote><a id="more"></a><h3 id="salt基本原理"><a href="#salt基本原理" class="headerlink" title="salt基本原理"></a>salt基本原理</h3><blockquote><p>SaltStack 采用 C/S模式，server端就是salt的master，client端就是minion，minion与master之间通过ZeroMQ消息队列通信</p><p>minion上线后先与master端联系，把自己的pub key发过去，这时master端通过salt-key -L命令就会看到minion的key，接受该minion-key后，也就是master与minion已经互信</p><p>master可以发送任何指令让minion执行了，salt有很多可执行模块，比如说cmd模块，在安装minion的时候已经自带了，它们通常位于你的python库中，<code>locate salt | grep /usr/</code> 可以看到salt自带的所有东西。</p><p>这些模块是python写成的文件，里面会有好多函数，如cmd.run，当我们执行<code>salt &#39;*&#39; cmd.run &#39;uptime&#39;</code>的时候，master下发任务匹配到的minion上去，minion执行模块函数，并返回结果。master监听4505和4506端口，4505对应的是ZMQ的PUB system，用来发送消息，4506对应的是REP system是来接受消息的。</p></blockquote><p>具体步骤如下</p><ul><li>Salt stack的Master与Minion之间通过ZeroMq进行消息传递，使用了ZeroMq的发布-订阅模式，连接方式包括tcp，ipc</li><li>salt命令，将<code>cmd.run ls</code>命令从<code>salt.client.LocalClient.cmd_cli</code>发布到master，获取一个Jodid，根据jobid获取命令执行结果。</li><li>master接收到命令后，将要执行的命令发送给客户端minion。</li><li>minion从消息总线上接收到要处理的命令，交给<code>minion._handle_aes</code>处理</li><li><code>minion._handle_aes</code>发起一个本地线程调用cmdmod执行ls命令。线程执行完ls后，调用<code>minion._return_pub</code>方法，将执行结果通过消息总线返回给master</li><li>master接收到客户端返回的结果，调用<code>master._handle_aes</code>方法，将结果写的文件中</li><li><code>salt.client.LocalClient.cmd_cli</code>通过轮询获取Job执行结果，将结果输出到终端。</li></ul><h3 id="安装salt"><a href="#安装salt" class="headerlink" title="安装salt"></a>安装salt</h3><blockquote><p>导入salt</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">7版本</span><br><span class="line">rpm --import https://repo.saltstack.com/yum/redhat/7/x86_64/latest/SALTSTACK-GPG-KEY.pub</span><br><span class="line"></span><br><span class="line">6版本</span><br><span class="line">rpm --import https://repo.saltstack.com/yum/redhat/6/x86_64/latest/SALTSTACK-GPG-KEY.pub</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#新增文件 /etc/yum.repos.d/saltstack.repo</span></span><br><span class="line">7 &amp; 6版本</span><br><span class="line"></span><br><span class="line">[saltstack-repo]</span><br><span class="line">name=SaltStack repo <span class="keyword">for</span> RHEL/CentOS <span class="variable">$releasever</span></span><br><span class="line">baseurl=https://repo.saltstack.com/yum/redhat/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/latest</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://repo.saltstack.com/yum/redhat/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/latest/SALTSTACK-GPG-KEY.pub</span><br></pre></td></tr></table></figure><blockquote><p>安装 salt-minion, salt-master,或Salt components:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install salt-master</span><br><span class="line">yum install salt-minion</span><br><span class="line">yum install salt-ssh</span><br><span class="line">yum install salt-syndic</span><br><span class="line">yum install salt-cloud</span><br></pre></td></tr></table></figure><h3 id="配置salt"><a href="#配置salt" class="headerlink" title="配置salt"></a>配置salt</h3><h4 id="master"><a href="#master" class="headerlink" title="master"></a>master</h4><blockquote><p>一般使用默认就好   (/etc/salt/master)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定master，冒号后有一个空格</span></span><br><span class="line">master: 192.168.2.22</span><br><span class="line">user: root</span><br><span class="line"></span><br><span class="line"><span class="comment">#-------以下为可选--------------</span></span><br><span class="line"><span class="comment"># salt运行的用户，影响到salt的执行权限</span></span><br><span class="line">user: root</span><br><span class="line"><span class="comment">#s alt的运行线程，开的线程越多一般处理的速度越快，但一般不要超过CPU的个数</span></span><br><span class="line">worker_threads: 10</span><br><span class="line"><span class="comment"># master的管理端口</span></span><br><span class="line">publish_port : 4505</span><br><span class="line"><span class="comment"># master跟minion的通讯端口，用于文件服务，认证，接受返回结果等</span></span><br><span class="line">ret_port : 4506</span><br><span class="line"><span class="comment"># 如果这个master运行的salt-syndic连接到了一个更高层级的master,那么这个参数需要配置成连接到的这个高层级master的监听端口</span></span><br><span class="line">syndic_master_port : 4506</span><br><span class="line"><span class="comment"># 指定pid文件位置</span></span><br><span class="line">pidfile: /var/run/salt-master.pid</span><br><span class="line"><span class="comment"># saltstack 可以控制的文件系统的开始位置</span></span><br><span class="line">root_dir: /</span><br><span class="line"><span class="comment"># 日志文件地址</span></span><br><span class="line">log_file: /var/<span class="built_in">log</span>/salt_master.log</span><br><span class="line"><span class="comment"># 分组设置</span></span><br><span class="line">nodegroups:</span><br><span class="line">  group_all: <span class="string">'*'</span></span><br><span class="line"><span class="comment"># salt state执行时候的根目录</span></span><br><span class="line">file_roots:</span><br><span class="line">  base:</span><br><span class="line">    - /srv/salt/</span><br><span class="line"><span class="comment"># 设置pillar 的根目录</span></span><br><span class="line">pillar_roots:</span><br><span class="line">  base:</span><br><span class="line">    - /srv/pillar</span><br></pre></td></tr></table></figure><h5 id="启动master"><a href="#启动master" class="headerlink" title="启动master"></a>启动master</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start salt-master</span><br><span class="line">systemctl <span class="built_in">enable</span> salt-master</span><br></pre></td></tr></table></figure><h4 id="minion"><a href="#minion" class="headerlink" title="minion"></a>minion</h4><p>(/etc/salt/minion)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定master，冒号后有一个空格</span></span><br><span class="line">master: 192.168.2.22</span><br><span class="line">id: minion-01</span><br><span class="line">user: root</span><br><span class="line"></span><br><span class="line"><span class="comment">#-------以下为可选--------------</span></span><br><span class="line"><span class="comment"># minion的识别ID，可以是IP，域名，或是可以通过DNS解析的字符串</span></span><br><span class="line">id: 192.168.0.100</span><br><span class="line"><span class="comment"># salt运行的用户权限</span></span><br><span class="line">user: root</span><br><span class="line"><span class="comment"># master的识别ID，可以是IP，域名，或是可以通过DNS解析的字符串</span></span><br><span class="line">master : 192.168.0.100</span><br><span class="line"><span class="comment"># master通讯端口</span></span><br><span class="line">master_port: 4506</span><br><span class="line"><span class="comment"># 备份模式，minion是本地备份，当进行文件管理时的文件备份模式</span></span><br><span class="line">backup_mode: minion</span><br><span class="line"><span class="comment"># 执行salt-call时候的输出方式</span></span><br><span class="line">output: nested </span><br><span class="line"><span class="comment"># minion等待master接受认证的时间</span></span><br><span class="line">acceptance_wait_time: 10</span><br><span class="line"><span class="comment"># 失败重连次数，0表示无限次，非零会不断尝试到设置值后停止尝试</span></span><br><span class="line">acceptance_wait_time_max: 0</span><br><span class="line"><span class="comment"># 重新认证延迟时间，可以避免因为master的key改变导致minion需要重新认证的syn风暴</span></span><br><span class="line">random_reauth_delay: 60</span><br><span class="line"><span class="comment"># 日志文件位置</span></span><br><span class="line">log_file: /var/logs/salt_minion.log</span><br><span class="line"><span class="comment"># 文件路径基本位置</span></span><br><span class="line">file_roots:</span><br><span class="line">  base:</span><br><span class="line">    - /etc/salt/minion/file</span><br><span class="line"><span class="comment"># pillar基本位置</span></span><br><span class="line">pillar_roots:</span><br><span class="line">  base:</span><br><span class="line">    - /data/salt/minion/pillar</span><br></pre></td></tr></table></figure><h5 id="启动minion"><a href="#启动minion" class="headerlink" title="启动minion"></a>启动minion</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start salt-master</span><br><span class="line">systemctl <span class="built_in">enable</span> salt-master</span><br></pre></td></tr></table></figure><h4 id="添加key"><a href="#添加key" class="headerlink" title="添加key"></a>添加key</h4><blockquote><p>master 端查看key</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@master salt]<span class="comment"># salt-key </span></span><br><span class="line">Accepted Keys:</span><br><span class="line">Denied Keys:</span><br><span class="line">Unaccepted Keys:   <span class="comment">#可看到 minion已经检测到，没有认证key</span></span><br><span class="line">minion-01</span><br><span class="line">Rejected Keys:</span><br><span class="line"></span><br><span class="line">[root@master salt]<span class="comment"># salt-key -a minion-01</span></span><br><span class="line">The following keys are going to be accepted:</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">minion-01</span><br><span class="line">Proceed? [n/Y] y    <span class="comment">#Y确认添加</span></span><br><span class="line">Key <span class="keyword">for</span> minion minion-01 accepted.  <span class="comment">#添加成功</span></span><br><span class="line">[root@master salt]<span class="comment"># salt-key </span></span><br><span class="line">Accepted Keys:</span><br><span class="line">minion-01</span><br><span class="line">Denied Keys:</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">Rejected Keys:</span><br><span class="line">[root@master salt]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h5 id="salt-key常用参数"><a href="#salt-key常用参数" class="headerlink" title="salt-key常用参数"></a>salt-key常用参数</h5><table><thead><tr><th align="left">-a</th><th align="left">添加指定ID 的key</th></tr></thead><tbody><tr><td align="left">-A</td><td align="left">添加全部</td></tr><tr><td align="left">-R</td><td align="left">拒绝全部</td></tr><tr><td align="left">-d</td><td align="left">删除指定ID的</td></tr><tr><td align="left">-D</td><td align="left">删除全部</td></tr></tbody></table><h5 id="测试连通性"><a href="#测试连通性" class="headerlink" title="测试连通性"></a>测试连通性</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master salt]<span class="comment"># salt 'minion-01' test.ping</span></span><br><span class="line">minion-01:</span><br><span class="line">    True   <span class="comment">#返回结果表示成功</span></span><br><span class="line">[root@master salt]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h5 id="简单服务的安装"><a href="#简单服务的安装" class="headerlink" title="简单服务的安装"></a>简单服务的安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root/] ]<span class="variable">$salt</span> <span class="string">'minion-01'</span> pkg.install ftp  <span class="comment">#解释</span></span><br><span class="line">minion-01:</span><br><span class="line">    ----------</span><br><span class="line">    ftp:</span><br><span class="line">        ----------</span><br><span class="line">        new:</span><br><span class="line">            0.17-67.el7</span><br><span class="line">        old:</span><br><span class="line">[root/] ]$</span><br><span class="line"></span><br><span class="line"><span class="comment">#去minion查看</span></span><br><span class="line">[root@minion-01 tmp]<span class="comment"># rpm -qa ftp</span></span><br><span class="line">ftp-0.17-67.el7.x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment">#salt 'minion-01' pkg.install ftp</span></span><br><span class="line"><span class="comment">#1.'*' 代表的是target是指在那些minion上操作</span></span><br><span class="line"><span class="comment">#2. 'pkg' 是一个执行模块,就像'test' </span></span><br><span class="line"><span class="comment">#3.'install' 是执行模块下面的函数，像test下的ping</span></span><br><span class="line"><span class="comment">#4.'ftp' 是函数的参数(arg)，有的函数需要参数，有的不需要比如test.ping就不需要参数</span></span><br><span class="line"> <span class="comment">##查看所有执行模块的doc</span></span><br><span class="line"> salt <span class="string">'minion'</span> sys.doc</span><br><span class="line"> <span class="comment">##查看test模块的帮助</span></span><br><span class="line"> salt <span class="string">'minion'</span> sys.doc <span class="built_in">test</span>  </span><br><span class="line"> <span class="comment">##查看test.ping函数的帮助</span></span><br><span class="line"> salt <span class="string">'minion'</span> sys.doc test.ping</span><br></pre></td></tr></table></figure><h3 id="salt常用命令"><a href="#salt常用命令" class="headerlink" title="salt常用命令"></a>salt常用命令</h3><h4 id="salt"><a href="#salt" class="headerlink" title="salt"></a>salt</h4><blockquote><p>该命令执行salt的执行模块,通常在master端运行.常用命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">salt [option] <span class="string">'&lt;target&gt;'</span> &lt;<span class="keyword">function</span>&gt; [arguments]</span><br><span class="line"></span><br><span class="line"><span class="comment">#例如</span></span><br><span class="line">salt <span class="string">'minion-01'</span> cmd.run <span class="string">'ip addr'</span></span><br></pre></td></tr></table></figure><h4 id="salt-run"><a href="#salt-run" class="headerlink" title="salt-run"></a>salt-run</h4><blockquote><p>该命令执行runner(salt自带或者自定义的，)，通常在master端执行，比如经常用到的manage</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">salt-run [options] [runner.func]</span><br><span class="line"></span><br><span class="line"><span class="comment">#例如</span></span><br><span class="line">salt-run manage.status   <span class="comment">##查看所有minion状态</span></span><br><span class="line">salt-run manage.down     <span class="comment">##查看所有没在线minion</span></span><br><span class="line">salt-run manage.up       <span class="comment">##查看所有在线minion</span></span><br></pre></td></tr></table></figure><h4 id="salt-key"><a href="#salt-key" class="headerlink" title="salt-key"></a>salt-key</h4><blockquote><p>密钥管理，通常在master端执行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">salt-key [options]</span><br><span class="line">salt-key -L              <span class="comment">##查看所有minion-key</span></span><br><span class="line">salt-key -a &lt;key-name&gt;   <span class="comment">##接受某个minion-key</span></span><br><span class="line">salt-key -d &lt;key-name&gt;   <span class="comment">##删除某个minion-key</span></span><br><span class="line">salt-key -A              <span class="comment">##接受所有的minion-key</span></span><br><span class="line">salt-key -D              <span class="comment">##删除所有的minion-key</span></span><br></pre></td></tr></table></figure><h4 id="salt-call"><a href="#salt-call" class="headerlink" title="salt-call"></a>salt-call</h4><blockquote><p>该命令通常在minion上执行，minion自己执行可执行模块，不通过master下发job</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">salt-call [options] &lt;<span class="keyword">function</span>&gt; [arguments]</span><br><span class="line">salt-call test.ping           <span class="comment">##自己执行test.ping命令</span></span><br><span class="line">salt-call cmd.run <span class="string">'ifconfig'</span>  <span class="comment">##自己执行cmd.run函数</span></span><br></pre></td></tr></table></figure><h4 id="salt-cp"><a href="#salt-cp" class="headerlink" title="salt-cp"></a>salt-cp</h4><blockquote><p>分发文件到minion上,不支持目录分发.运行在master</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">salt-cp [options] <span class="string">'&lt;target&gt;'</span> SOURCE DEST</span><br><span class="line"><span class="comment">#例如</span></span><br><span class="line">salt-cp <span class="string">'*'</span> testfile.html /tmp</span><br><span class="line">salt-cp <span class="string">'test*'</span> index.html /tmp/a.html</span><br></pre></td></tr></table></figure><h4 id="salt-master"><a href="#salt-master" class="headerlink" title="salt-master"></a>salt-master</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">salt-master [options]</span><br><span class="line">salt-master            <span class="comment">##前台运行master</span></span><br><span class="line">salt-master -d         <span class="comment">##后台运行master</span></span><br><span class="line">salt-master -l debug   <span class="comment">##前台debug输出</span></span><br></pre></td></tr></table></figure><h4 id="salt-minion"><a href="#salt-minion" class="headerlink" title="salt-minion"></a>salt-minion</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">salt-minion [options]</span><br><span class="line">salt-minion            <span class="comment">##前台运行</span></span><br><span class="line">salt-minion -d         <span class="comment">##后台运行</span></span><br><span class="line">salt-minion -l debug   <span class="comment">##前台debug输出</span></span><br></pre></td></tr></table></figure><h3 id="普通用户执行salt"><a href="#普通用户执行salt" class="headerlink" title="普通用户执行salt"></a>普通用户执行salt</h3><p>两种方法</p><blockquote><p>1: ACL(修改master)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    client_acl:</span><br><span class="line">    monitor: <span class="comment">#uonghu</span></span><br><span class="line">     - <span class="built_in">test</span>*: <span class="comment">#权限</span></span><br><span class="line">    - <span class="built_in">test</span>.*</span><br><span class="line">    dev:</span><br><span class="line">     - service.*</span><br><span class="line">    sa:</span><br><span class="line">     - .*</span><br><span class="line"><span class="comment">#重启master</span></span><br><span class="line">     </span><br><span class="line"><span class="comment">#给予目录和文件权限</span></span><br><span class="line">chmod +r /etc/salt/master</span><br><span class="line">chmod +x /var/run/salt</span><br><span class="line">chmod +x /var/cache/salt</span><br></pre></td></tr></table></figure><blockquote><p>2 external_auth(修改master)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  pam:</span><br><span class="line">    fred:</span><br><span class="line">      - <span class="built_in">test</span>.*</span><br><span class="line"><span class="comment">#重启master</span></span><br><span class="line">     </span><br><span class="line"><span class="comment">#给予目录和文件权限</span></span><br><span class="line">chmod +r /etc/salt/master</span><br><span class="line">chmod +x /var/run/salt</span><br><span class="line">chmod +x /var/cache/salt</span><br></pre></td></tr></table></figure><p>使用Token不必每次都输入账号密码，使用external_auth每次都是需要密码的，这样多麻烦，这里引入了Token，它会保存一串字符到在当前用户家目录下.salt_token中，在有效时间内使用external_auth是不需要输入密码的，默认时间12hour，可以通过master配置文件修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt -T -a pam <span class="string">'*'</span> test.ping</span><br></pre></td></tr></table></figure><h3 id="target"><a href="#target" class="headerlink" title="target"></a>target</h3><blockquote><p>target也就是目标,目的.指定master命令应该对谁执行</p></blockquote><ul><li>正则匹配</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master /]<span class="comment"># salt -E  'mini*' test.ping</span></span><br><span class="line">minion-02:</span><br><span class="line">    True</span><br><span class="line">minion-01:</span><br><span class="line">    True</span><br></pre></td></tr></table></figure><ul><li>列表匹配</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># salt -L minion-01,minion-02 test.ping</span></span><br><span class="line">minion-02:</span><br><span class="line">    True</span><br><span class="line">minion-01:</span><br><span class="line">    True</span><br></pre></td></tr></table></figure><ul><li>grains匹配</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># salt -G 'os:CentOs' test.ping</span></span><br><span class="line">minion-02:</span><br><span class="line">    True</span><br><span class="line">minion-01:</span><br><span class="line">    True</span><br></pre></td></tr></table></figure><ul><li>组匹配</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启master 的default_include</span></span><br><span class="line">vim /etc/salt/master.d/nodegroup.conf </span><br><span class="line"><span class="comment">#写到master中也是这个格式</span></span><br><span class="line">nodegroups:</span><br><span class="line"> test1: <span class="string">'L@test1,test2 or test3*'</span></span><br><span class="line"> test2: <span class="string">'G@os:CenOS or test2'</span></span><br><span class="line"></span><br><span class="line">salt -N test1 test.ping   <span class="comment">#-N指定groupname</span></span><br><span class="line"></span><br><span class="line">在top file中使用nodegroups</span><br><span class="line"></span><br><span class="line"><span class="string">'test1'</span>:</span><br><span class="line"> - match: nodegroup     <span class="comment">##没s,匹配的是文件</span></span><br><span class="line"> - webserver</span><br><span class="line">[root@master ~]<span class="comment"># salt -N nodegroups test.ping</span></span><br><span class="line">minion-02:</span><br><span class="line">    True</span><br><span class="line">minion-01:</span><br><span class="line">    True</span><br><span class="line"><span class="comment">#组需要在master中预先定义</span></span><br></pre></td></tr></table></figure><ul><li>复合匹配  <code>salt -C &#39;G@os:MacOS or L@Minion1&#39;</code> </li><li>Pillar匹配 <code>salt -I &#39;key:value&#39; test.ping</code> </li><li>CIDR匹配 <code>salt -S &#39;192.168.1.0/24&#39; test.ping</code> </li></ul><blockquote><p>在top文件中匹配 grains</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'node_type:web'</span>:</span><br><span class="line">  - match: grain         <span class="comment">#没有s</span></span><br><span class="line">  - webserver</span><br></pre></td></tr></table></figure><blockquote><p>top文件中使用jinja</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> self = grains[<span class="string">'node_type'</span>] %&#125;</span><br><span class="line">    - match: grain</span><br><span class="line">- &#123;&#123; self &#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>一次在n个minion上执行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-b n</span><br><span class="line">--batch-size n</span><br><span class="line"><span class="comment">#例：</span></span><br><span class="line">salt <span class="string">'*'</span> -b 5 test.ping</span><br><span class="line"><span class="comment">#5个5个的ping</span></span><br></pre></td></tr></table></figure><h3 id="多master"><a href="#多master" class="headerlink" title="多master"></a>多master</h3><blockquote><blockquote><p>2个master并不会共享Minion keys，一个master删除了一个key不会影响另一个</p></blockquote><blockquote><p>不会自动同步File_roots,所以需要手动去维护，如果用git就没问题了</p></blockquote><blockquote><p>不会自动同步Pillar_Roots，所以需要手工去维护，也可以用git</p></blockquote><blockquote><p>Master的配置文件也是独立的</p></blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装 salt-master</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#原master的密钥cp一份到新的master</span></span><br><span class="line">scp /etc/salt/pki/master/master* newmaster:/etc/salt/pki/master/</span><br><span class="line"><span class="comment">#启动新的Master</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置minion的配置</span></span><br><span class="line">master:</span><br><span class="line">  - master1</span><br><span class="line">  - master2</span><br><span class="line"><span class="comment">#重启minion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#新master接受所有的key</span></span><br><span class="line">salt-key -L</span><br><span class="line">salt-key -A</span><br></pre></td></tr></table></figure><h3 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h3><blockquote><p>语法风格</p></blockquote><ul><li><p>空格和TAB</p><p>yaml两个空格为缩进, TAB不要使用!</p></li><li><p>冒号: 和减号-</p><p>: 和- 后面要跟上一个空格在写</p></li><li><p>数字解析</p><p>mode: 0644 会解析成为mode: 644 最好使用mode: (0644)</p></li><li><p>简写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim:</span><br><span class="line">  pkg.installed <span class="comment">#第一个简写</span></span><br><span class="line">  user.present <span class="comment">#第二个简写.不被支持,因为不支持双简写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#建议规范书写</span></span><br><span class="line">vim:</span><br><span class="line">  pkg:</span><br><span class="line">    - installed</span><br><span class="line">  user:</span><br><span class="line">    - present</span><br></pre></td></tr></table></figure></li></ul><h3 id="Jinja"><a href="#Jinja" class="headerlink" title="Jinja"></a>Jinja</h3><blockquote><p>Jinja 基于Python模板引擎开发,saltstack默认使用yaml_jinja渲染器,渲染流程时先jinja在yaml解析.所以在开始解析yaml的时候可以使用jinja”偷个腥”</p></blockquote><ul><li>区分模板文件</li></ul><p>在salt中,files和templates都使用file这个state模块.那么如何区分模板是什么文件呢.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  - templates: jinja</span><br><span class="line">  </span><br><span class="line">file.managed:</span><br><span class="line">  - name: /tmp/<span class="built_in">test</span></span><br><span class="line">  - <span class="built_in">source</span>: salt://tmp/<span class="built_in">test</span></span><br><span class="line">  - template: jinja</span><br><span class="line">  - defaults:</span><br><span class="line">    Server: &#123;&#123; pillar[<span class="string">'.....'</span>] &#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>jinja中使用grains</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; grains[<span class="string">'os'</span>] &#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>jinja中使用执行模块</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; salt[&apos;network.hw_addr&apos;](&apos;eth0&apos;) &#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>jinja中使用Pillar</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pillar[<span class="string">'apache'</span>][<span class="string">'PORT'</span>] &#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>Jinja的逻辑关系</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> grains[<span class="string">'os'</span>] == <span class="string">'RedHat'</span> %&#125;</span><br><span class="line">apache: httpd</span><br><span class="line">&#123;% <span class="keyword">elif</span> grains[<span class="string">'os'</span>] == <span class="string">'Debian'</span> %&#125;</span><br><span class="line">apache: apache2</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p><strong>更多使用自行研究</strong></p><h3 id="salt常用模块和API"><a href="#salt常用模块和API" class="headerlink" title="salt常用模块和API"></a>salt常用模块和API</h3><h4 id="查看支持的所有modules"><a href="#查看支持的所有modules" class="headerlink" title="查看支持的所有modules"></a>查看支持的所有modules</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root/] ]<span class="variable">$salt</span> <span class="string">'minion-01'</span> sys.list_modules</span><br><span class="line">minion-01:</span><br><span class="line">    - acl</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="salt-client调用API举例"><a href="#salt-client调用API举例" class="headerlink" title="salt.client调用API举例"></a>salt.client调用API举例</h4><p><strong>[root/] ]$cd /usr/lib/python2.7/site-packages/salt/modules/</strong> 模块path</p><p><strong>API调用示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root/] ]$cat test.py </span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> salt.client</span><br><span class="line">client = salt.client.LocalClient()</span><br><span class="line"></span><br><span class="line">res = client.cmd(<span class="string">'*'</span>,<span class="string">'test.ping'</span>)</span><br><span class="line"><span class="keyword">print</span> res</span><br><span class="line">[root/] ]$./test.py </span><br><span class="line">&#123;<span class="string">'minion-02'</span>: <span class="literal">True</span>, <span class="string">'minion-01'</span>: <span class="literal">True</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">##解释一下</span></span><br><span class="line"><span class="comment">#当我们调用salt.client.LocalClient的时候,其实就等于我们执行了 salt '*' test.ping</span></span><br></pre></td></tr></table></figure><p><strong>API调用：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.cmd(<span class="string">'*'</span>,<span class="string">'file.remove'</span>,[<span class="string">'/tmp/foo'</span>])</span><br></pre></td></tr></table></figure><blockquote><p>salt  <target> sys.doc  module</target></p><p>可以查看模块支持那些命令</p></blockquote><h4 id="Archive"><a href="#Archive" class="headerlink" title="Archive"></a>Archive</h4><blockquote><p>实现对系统曾经的压缩包调用支持gzip,gunzip.rar,tar,unrar,unzip等</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#采用gunzip解压sourcefile.txt.gz包</span></span><br><span class="line">salt <span class="string">'*'</span> archive.gunzip sourcefile.txt.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#采用gzip压缩sourcefile.txt文件</span></span><br><span class="line">salt <span class="string">'*'</span> archive.gzip sourcefile.txt</span><br></pre></td></tr></table></figure><p><strong>API调用：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.cmd(<span class="string">'*'</span>,<span class="string">'archive.gunzip'</span>,[<span class="string">'sourcefile.txt.gz'</span>])</span><br></pre></td></tr></table></figure><h4 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h4><blockquote><p>实现对远程命令的调用执行,(默认具备root权限!谨慎使用)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取所欲被控主机的内存使用情况</span></span><br><span class="line">salt <span class="string">'*'</span> cmd.run <span class="string">'free -m'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在wx主机上运行test.py脚本，其中script/test.py存放在file_roots指定的目录（默认是在/srv/salt,自定义在/etc/salt/master文件中定义），</span></span><br><span class="line"><span class="comment">#该命令会做2个动作：首先同步test.py到minion的cache目录；起床运行该脚本</span></span><br><span class="line">salt <span class="string">'minion-01'</span> cmd.script salt://script/test.py</span><br></pre></td></tr></table></figure><p><strong>API调用：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.cmd(<span class="string">'*'</span>,<span class="string">'cmd.run'</span>,[<span class="string">'free -m'</span>])</span><br></pre></td></tr></table></figure><h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h4><blockquote><p>实现远程文件目录的复制,以及下载URL文件等操作</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将被控主机的/etc/hosts文件复制到被控主机本地的salt cache目录（/var/cache/salt/minion/localfiles/）</span></span><br><span class="line">salt <span class="string">'*'</span> cp.cache_local_file /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment">#将主控端file_roots指定位置下的目录复制到被控主机/minion/目录下</span></span><br><span class="line">salt <span class="string">'*'</span> cp.get_dir salt://script/ /minion/</span><br><span class="line"></span><br><span class="line"><span class="comment">#将主控端file_roots指定位置下的文件复制到被控主机/minion/test.py文件(file为文件名)</span></span><br><span class="line">salt <span class="string">'*'</span> cp.get_dir salt://script/test.py /minion/test.py</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载URL内容到被控主机指定位置(/tmp/index.html)</span></span><br><span class="line">salt <span class="string">'*'</span> cp.get_url http://www.slashdot.ort /tmp/index.html</span><br></pre></td></tr></table></figure><p><strong>API调用：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.cmd(<span class="string">'*'</span>,<span class="string">'cp.get_file'</span>,[<span class="string">'salt://script/test.py'</span>,<span class="string">'/minion/test.py'</span>])</span><br></pre></td></tr></table></figure><h4 id="cron"><a href="#cron" class="headerlink" title="cron"></a>cron</h4><blockquote><p>实现对minion的crontab控制</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看指定被控主机、root用户的crontab操作</span></span><br><span class="line">salt <span class="string">'minion-01'</span> cron.raw_cron root</span><br><span class="line"></span><br><span class="line"><span class="comment">#为指定被控主机、root用户添加/usr/local/weekly任务zuoye</span></span><br><span class="line">salt <span class="string">'minion-01'</span> cron.set_job root <span class="string">'*'</span> <span class="string">'*'</span> <span class="string">'*'</span> <span class="string">'*'</span> 1 /usr/<span class="built_in">local</span>/weekly </span><br><span class="line"></span><br><span class="line"><span class="comment">#删除指定被控主机、root用户crontab的/usr/local/weekly任务zuoye</span></span><br><span class="line">salt <span class="string">'minion-01'</span> cron.rm_job root /usr/<span class="built_in">local</span>/weekly</span><br></pre></td></tr></table></figure><p><strong>API调用：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.cmd(<span class="string">'wx'</span>,<span class="string">'cron.set_job'</span>,[<span class="string">'root'</span>,<span class="string">'*'</span>,<span class="string">'*'</span>,<span class="string">'*'</span>,<span class="string">'*'</span>,1,<span class="string">'/usr/local/weekly'</span>])</span><br></pre></td></tr></table></figure><h4 id="file"><a href="#file" class="headerlink" title="file"></a>file</h4><blockquote><p>对minion的文件操作,包括文件读写,权限,查找校验</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#校验所有被控主机/etc/fstab文件的md5值是否为xxxxxxxxxxxxx,一致则返回True值</span></span><br><span class="line">salt <span class="string">'*'</span> file.check_hash /etc/fstab md5=xxxxxxxxxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line"><span class="comment">#校验所有被控主机文件的加密信息，支持md5、sha1、sha224、shs256、sha384、sha512加密算法</span></span><br><span class="line">salt <span class="string">'*'</span> file.get_sum /etc/passwd md5</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改所有被控主机/etc/passwd文件的属组、用户权限、等价于chown root:root /etc/passwd</span></span><br><span class="line">salt <span class="string">'*'</span> file.chown /etc/passwd root root</span><br><span class="line"></span><br><span class="line"><span class="comment">#复制所有被控主机/path/to/src文件到本地的/path/to/dst文件</span></span><br><span class="line">salt <span class="string">'*'</span> file.copy /path/to/src /path/to/dst</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查所有被控主机/etc目录是否存在，存在则返回True,检查文件是否存在使用file.file_exists方法</span></span><br><span class="line">salt <span class="string">'*'</span> file.directory_exists /etc</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取所有被控主机/etc/passwd的stats信息</span></span><br><span class="line">salt <span class="string">'*'</span> file.stats /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取所有被控主机/etc/passwd的权限mode，如755，644</span></span><br><span class="line">salt <span class="string">'*'</span> file.get_mode /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改所有被控主机/etc/passwd的权限mode为0644</span></span><br><span class="line">salt <span class="string">'*'</span> file.set_mode /etc/passwd 0644</span><br><span class="line"></span><br><span class="line"><span class="comment">#在所有被控主机创建/opt/test目录</span></span><br><span class="line">salt <span class="string">'*'</span> file.mkdir /opt/<span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将所有被控主机/etc/httpd/httpd.conf文件的LogLevel参数的warn值修改为info</span></span><br><span class="line">salt <span class="string">'*'</span> file.sed /etc/httpd/httpd.conf <span class="string">'LogLevel warn'</span> <span class="string">'LogLevel info'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#给所有被控主机的/tmp/test/test.conf文件追加内容‘maxclient 100’</span></span><br><span class="line">salt <span class="string">'*'</span> file.append /tmp/<span class="built_in">test</span>/test.conf <span class="string">'maxclient 100'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除所有被控主机的/tmp/foo文件</span></span><br><span class="line">salt <span class="string">'*'</span> file.remove /tmp/foo</span><br></pre></td></tr></table></figure><h4 id="network"><a href="#network" class="headerlink" title="network"></a>network</h4><blockquote><p>返回minion的主机信息</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在指定被控主机获取dig、ping、traceroute目录域名信息</span></span><br><span class="line">salt <span class="string">'minion-01'</span> network.dig www.qq.com</span><br><span class="line">salt <span class="string">'minion-01'</span> network.ping www.qq.com</span><br><span class="line">salt <span class="string">'minion-01'</span> network.traceroute www.qq.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取指定被控主机的mac地址</span></span><br><span class="line">salt <span class="string">'minion-01'</span> network.hwaddr eth0</span><br><span class="line"></span><br><span class="line"><span class="comment">#检测指定被控主机是否属于10.0.0.0/16子网范围，属于则返回True</span></span><br><span class="line">salt <span class="string">'minion-01'</span> network.in_subnet 10.0.0.0/16</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取指定被控主机的网卡配置信息</span></span><br><span class="line">salt <span class="string">'minion-01'</span> network.interfaces</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取指定被控主机的IP地址配置信息</span></span><br><span class="line">salt <span class="string">'minion-01'</span> network.ip_addrs</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取指定被控主机的子网信息</span></span><br><span class="line">salt <span class="string">'minion-01'</span> network.subnets</span><br></pre></td></tr></table></figure><p><strong>API调用：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.cmd(<span class="string">'minion-01'</span>,<span class="string">'network.ip_addrs'</span>)</span><br></pre></td></tr></table></figure><h4 id="pkg"><a href="#pkg" class="headerlink" title="pkg"></a>pkg</h4><blockquote><p>minion的程序包管理,如yum, apt-get等</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为所有被控主机安装PHP环境，根据不同系统发行版调用不同安装工具进行部署，如redhat平台的yum，等价于yum -y install php</span></span><br><span class="line">salt <span class="string">'*'</span> pkg.install php</span><br><span class="line"></span><br><span class="line"><span class="comment">#卸载所有被控主机的PHP环境</span></span><br><span class="line">salt <span class="string">'*'</span> pkg.remove php</span><br><span class="line"></span><br><span class="line"><span class="comment">#升级所有被控主机的软件包</span></span><br><span class="line">salt <span class="string">'*'</span> pkg.upgrade</span><br></pre></td></tr></table></figure><p><strong>API调用：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.cmd(<span class="string">'*'</span>,<span class="string">'pkg.remove'</span>,[<span class="string">'php'</span>])</span><br></pre></td></tr></table></figure><h4 id="status"><a href="#status" class="headerlink" title="status"></a>status</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> status.version</span><br></pre></td></tr></table></figure><p>API</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> salt.client</span><br><span class="line">client = salt.client.LocalClient()</span><br><span class="line">client.cmd(<span class="string">'*'</span>,<span class="string">'status.uptime'</span>)</span><br></pre></td></tr></table></figure><h4 id="system"><a href="#system" class="headerlink" title="system"></a>system</h4><blockquote><p>用来日常操作计算机</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">system.halt        <span class="comment">#停止正在运行的系统</span></span><br><span class="line">system.init 3      <span class="comment">#切换到字符界面，5是图形界面</span></span><br><span class="line">system.poweroff</span><br><span class="line">system.reboot</span><br><span class="line">system.shutdown</span><br></pre></td></tr></table></figure><h4 id="systemd-service"><a href="#systemd-service" class="headerlink" title="systemd(service)"></a>systemd(service)</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">service</span><span class="selector-class">.available</span> <span class="selector-tag">sshd</span>            #查看服务是否可用</span><br><span class="line"><span class="selector-tag">service</span><span class="selector-class">.disable</span> &lt;<span class="selector-tag">service</span> <span class="selector-tag">name</span>&gt;    #设置开机启动的服务</span><br><span class="line"><span class="selector-tag">service</span><span class="selector-class">.enable</span> &lt;<span class="selector-tag">service</span> <span class="selector-tag">name</span>&gt;</span><br><span class="line"><span class="selector-tag">service</span><span class="selector-class">.disabled</span> &lt;<span class="selector-tag">service</span> <span class="selector-tag">name</span>&gt;   #查看服务是不是开机启动</span><br><span class="line"><span class="selector-tag">service</span><span class="selector-class">.enabled</span> &lt;<span class="selector-tag">service</span> <span class="selector-tag">name</span>&gt;</span><br><span class="line"><span class="selector-tag">service</span><span class="selector-class">.get_disabled</span>              #返回所有关闭的服务</span><br><span class="line"><span class="selector-tag">service</span><span class="selector-class">.get_enabled</span>               #返回所有开启的服务</span><br><span class="line"><span class="selector-tag">service</span><span class="selector-class">.get_all</span>                   #返回所有服务</span><br><span class="line"><span class="selector-tag">service</span><span class="selector-class">.reload</span> &lt;<span class="selector-tag">service</span> <span class="selector-tag">name</span>&gt;     #重新载入指定的服务</span><br><span class="line"><span class="selector-tag">service</span><span class="selector-class">.restart</span> &lt;<span class="selector-tag">service</span> <span class="selector-tag">name</span>&gt;    #重启服务</span><br><span class="line"><span class="selector-tag">service</span><span class="selector-class">.start</span> &lt;<span class="selector-tag">service</span> <span class="selector-tag">name</span>&gt;</span><br><span class="line"><span class="selector-tag">service</span><span class="selector-class">.stop</span> &lt;<span class="selector-tag">service</span> <span class="selector-tag">name</span>&gt;</span><br><span class="line"><span class="selector-tag">service</span><span class="selector-class">.status</span> &lt;<span class="selector-tag">service</span> <span class="selector-tag">name</span>&gt;</span><br><span class="line"><span class="selector-tag">service</span><span class="selector-class">.force_reload</span> &lt;<span class="selector-tag">service</span> <span class="selector-tag">name</span>&gt;  #强制载入指定的服务</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@mail python]<span class="comment"># salt '*' service.available sshdmonitor:    True</span></span><br><span class="line"></span><br><span class="line">api调用:</span><br><span class="line">&gt;&gt;&gt; client.cmd(<span class="string">'*'</span>,<span class="string">'service.available'</span>,[<span class="string">'sshd'</span>])&#123;<span class="string">'monitor'</span>: True&#125;</span><br></pre></td></tr></table></figure><h3 id="grains"><a href="#grains" class="headerlink" title="grains"></a>grains</h3><blockquote><p>服务器的一些静态信息，强调的是静态，就是不会变的东西，比如说os是centos，不会变化，除非重新安装系统</p></blockquote><h4 id="grains的使用"><a href="#grains的使用" class="headerlink" title="grains的使用"></a>grains的使用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询所有grains信息</span></span><br><span class="line">[root@master salt]<span class="comment"># salt 'minion-01' grains.items </span></span><br><span class="line">minion-01:</span><br><span class="line">    ----------</span><br><span class="line">    SSDs:</span><br><span class="line">    biosreleasedate:</span><br><span class="line">        09/21/2015</span><br><span class="line">    biosversion:</span><br><span class="line">        6.00</span><br><span class="line">    cpu_flags:</span><br><span class="line">        - fpu</span><br><span class="line">        - vme</span><br><span class="line">        - de</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询grains指定项</span></span><br><span class="line">[root@master salt]<span class="comment"># salt '*' grains.item os</span></span><br><span class="line">minion-02:</span><br><span class="line">    ----------</span><br><span class="line">    os:</span><br><span class="line">        CentOS</span><br><span class="line">minion-01:</span><br><span class="line">    ----------</span><br><span class="line">    os:</span><br><span class="line">        CentOS</span><br><span class="line">[root@master salt]<span class="comment"># </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@master salt]<span class="comment"># salt -G 'os:CentOS' test.ping</span></span><br><span class="line">minion-01:</span><br><span class="line">    True</span><br><span class="line"></span><br><span class="line"><span class="comment">#对系统是CentOS的服务器进行ping测试操作</span></span><br><span class="line"><span class="comment">#os:CentOS ; 就是对应上面grains.items显示出来的os值是CentOs的对象进行匹配 </span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">#对cpu架构是x86_64的服务器显示CPU的个数</span></span><br><span class="line">salt -G <span class="string">'cpuarch:x86_64'</span> grains.item num_cpus</span><br><span class="line"> </span><br><span class="line"><span class="comment">#对字典值的对象进行匹配</span></span><br><span class="line">salt -G <span class="string">'ip_interfaces:eno16777728:192.168.2.*'</span> test.ping</span><br></pre></td></tr></table></figure><p><strong>在SLS中用grains</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在xxx.sls中使用grains</span></span><br><span class="line"><span class="string">'os:CentOS'</span>:</span><br><span class="line">    - match: grain</span><br><span class="line">    - webserver</span><br></pre></td></tr></table></figure><h4 id="自定义grains-两种方法"><a href="#自定义grains-两种方法" class="headerlink" title="自定义grains(两种方法)"></a>自定义grains(两种方法)</h4><p><strong>1 . minion端修改</strong>  重启生效</p><blockquote><p>修改配置文件 /etc/salt/minion  或者写在/etc/salt/grains中</p><p>打开 default_include: minion.d/*.conf   或者直接添加此命令</p><p>在minion端的/etc/salt/minion.d/ 目录下新建并编辑.conf后缀文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">grains: <span class="comment">#如果是/etc/salt/grains中,不需此行</span></span><br><span class="line">  roles:</span><br><span class="line">    - webserver</span><br><span class="line">  sex: boy  <span class="comment">#名字：值</span></span><br><span class="line">  age:      <span class="comment">#名字：多个值</span></span><br><span class="line">    - 33</span><br><span class="line">    - 44</span><br><span class="line"> <span class="comment"># 重启生效</span></span><br><span class="line">[root@master ~]<span class="comment"># salt 'minion-01' grains.item age</span></span><br><span class="line">minion-01:</span><br><span class="line">    ----------</span><br><span class="line">    age:</span><br><span class="line">        - 33</span><br><span class="line">        - 44</span><br><span class="line">[root@master ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>*<em>2 . minion端修改 *</em> 同步之后生效</p><blockquote><p>base目录（在/etc/salt/master中配置的file_roots项，默认在/srv/salt）下生成<strong>_grains</strong> 目录,新建文件,用python来写</p></blockquote><p>编写文件,需要返回一个字典</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> vim test1.py</span><br><span class="line">def hello(): <span class="comment">##函数名字无所谓，应该是所有函数都会运行</span></span><br><span class="line">    agrain = &#123;&#125;</span><br><span class="line">    agrain[<span class="string">'hello'</span>] = <span class="string">'lzl'</span> </span><br><span class="line">    <span class="built_in">return</span> agrain   <span class="comment">##返回这个字典</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">========================</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">import os</span><br><span class="line">def file():</span><br><span class="line">    grains=&#123;&#125;<span class="comment">#初始化一个字典，</span></span><br><span class="line">    file = os.popen(<span class="string">'ulimit -n'</span>).<span class="built_in">read</span>()</span><br><span class="line">    grains[<span class="string">'my_file'</span>]=file</span><br><span class="line">    <span class="built_in">return</span> grains</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意文件赋予权限</span></span><br><span class="line">chmod a+x .py</span><br><span class="line"><span class="comment">#同步到各个minion中去</span></span><br><span class="line">salt <span class="string">'*'</span> saltutil.sync_all</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">[root/srv/salt/_grains] ]<span class="variable">$salt</span> <span class="string">'minion-01'</span> grains.item hello</span><br><span class="line">minion-01:</span><br><span class="line">    ----------</span><br><span class="line">    hello:</span><br><span class="line">        lzl</span><br></pre></td></tr></table></figure><h3 id="pillar"><a href="#pillar" class="headerlink" title="pillar"></a>pillar</h3><blockquote><p>Pillar在salt中是非常重要的组成部分，利用它可以完成很强大的功能，它可以指定一些信息到指定的minion上，不像grains一样是分发到所有Minion上的，它保存的数据可以是动态的,Pillar以sls来写的，格式是键值</p><p>适用</p><p>1.比较敏感的数据，比如密码，key等</p><p>2.特殊数据到特定Minion上</p><p>3.动态的内容</p><p>4.其他数据类型</p></blockquote><h4 id="pillar基本使用"><a href="#pillar基本使用" class="headerlink" title="pillar基本使用"></a>pillar基本使用</h4><p><strong>查看所有</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> pillar.items</span><br></pre></td></tr></table></figure><p><strong>查看某个</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> pillar.item KEY</span><br><span class="line"><span class="comment">#可以取到更小粒度的</span></span><br><span class="line">salt <span class="string">'*'</span> pillar.get &lt;key&gt;:&lt;key&gt;</span><br></pre></td></tr></table></figure><h4 id="编写pillar"><a href="#编写pillar" class="headerlink" title="编写pillar"></a>编写pillar</h4><blockquote><p>指定pillar_roots</p><p>默认是/srv/pillar/(可通过修改master配置文件修改),建立目录</p></blockquote><p><strong>top.sls</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">base:           <span class="comment">#指定环境</span></span><br><span class="line">  <span class="string">'*'</span>:          <span class="comment">#target</span></span><br><span class="line">    - test1     <span class="comment">#引用test1.sls 或者test1/init.sls</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#通过分组名匹配，</span></span><br><span class="line">base:</span><br><span class="line">  group1:</span><br><span class="line">    - match: nodegroup    <span class="comment">#必须要有 - match: nodegroup  </span></span><br><span class="line">    - webserver  </span><br><span class="line"></span><br><span class="line"><span class="comment">#通过grain模块匹配的示例</span></span><br><span class="line">base:</span><br><span class="line">  <span class="string">'os:CentOS'</span>:</span><br><span class="line">    - match: grain   <span class="comment">#必须要有- match: grain</span></span><br><span class="line">    - webserver</span><br></pre></td></tr></table></figure><p><strong>test1.sls</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name: test1</span><br><span class="line">user: lzl</span><br></pre></td></tr></table></figure><p><strong>刷新</strong>  pillar数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> saltutil.refresh_pillar</span><br></pre></td></tr></table></figure><p><strong>查看结果</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root/srv/pillar] ]<span class="variable">$salt</span> <span class="string">'minion-01'</span> pillar.items</span><br><span class="line">minion-01:</span><br><span class="line">    ----------</span><br><span class="line">    name:</span><br><span class="line">        test1</span><br><span class="line">    user:</span><br><span class="line">        lzl</span><br><span class="line">[root/srv/pillar] ]$</span><br></pre></td></tr></table></figure><h4 id="在state中通过jinja使用pillar"><a href="#在state中通过jinja使用pillar" class="headerlink" title="在state中通过jinja使用pillar"></a>在state中通过jinja使用pillar</h4><p>默认state文件位置/src/salt/</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">user.sls</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> user, uid <span class="keyword">in</span> pillar.get(<span class="string">'users'</span>, &#123;&#125;).items() %&#125;  </span><br><span class="line"> <span class="comment">##pillar.get('users',&#123;&#125;)可用pillar['users']代替，前者在没有得到值的情况下，赋默认值</span></span><br><span class="line">&#123;&#123;user&#125;&#125;:</span><br><span class="line">  user.present:</span><br><span class="line">    - uid: &#123;&#123;uid&#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h4 id="jinja配合grains-指定pillar数据"><a href="#jinja配合grains-指定pillar数据" class="headerlink" title="jinja配合grains 指定pillar数据"></a>jinja配合grains 指定pillar数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> grains[<span class="string">'os_family'</span>] == <span class="string">'RedHat'</span> %&#125;</span><br><span class="line">apache: httpd</span><br><span class="line">&#123;% <span class="keyword">elif</span> grains[<span class="string">'os'</span>] == <span class="string">'CentOS'</span> %&#125;</span><br><span class="line">apache: httpd</span><br><span class="line">vim: vim</span><br><span class="line">&#123;% <span class="keyword">elif</span> grains[<span class="string">'os'</span>] == <span class="string">'Arch'</span> %&#125;</span><br><span class="line">apache: apache</span><br><span class="line">vim: vim</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h3 id="使用salt-state"><a href="#使用salt-state" class="headerlink" title="使用salt state"></a>使用salt state</h3><blockquote><p>它的核心是写sls(SaLt State file)文件,sls文件默认格式是YAML格式，并默认使用jinja模板，jinja是根据django的模板语言发展而来的语言，简单并强大，支持for if 等循环判断。salt state主要用来描述系统，软性，服务，配置文件的状态，常常被称为配置管理！</p></blockquote><blockquote><p>通常state，pillar,top file会用sls文件来编写。state文件默认是放在/srv/salt中，它与你的master配置文件中的file_roots设置有关</p></blockquote><h4 id="简单的state文件配置-amp-介绍"><a href="#简单的state文件配置-amp-介绍" class="headerlink" title="简单的state文件配置&amp;介绍"></a>简单的state文件配置&amp;介绍</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/srv/salt/apahce.sls</span></span><br><span class="line"></span><br><span class="line">apache:           <span class="comment">##state ID，全文件唯一,如果模块没跟-name默认用的ID作为-name</span></span><br><span class="line"> pkg:             <span class="comment">##模块</span></span><br><span class="line">   <span class="comment">#- name: apache ##函数参数，可以省略</span></span><br><span class="line">   - installed    <span class="comment">##函数</span></span><br><span class="line"> service:         <span class="comment">##模块</span></span><br><span class="line">   - running      <span class="comment">##函数</span></span><br><span class="line">  <span class="comment">#- name: apache ##函数参数，这个是省略的，也可以写上</span></span><br><span class="line">   - require:     <span class="comment">##依赖系统</span></span><br><span class="line">     - pkg: apache  <span class="comment">##表示依赖id为apache的pkg状态</span></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line"><span class="comment">#声明一个叫apache的状态id,该id可以随意，最好能表示一定意思</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pkg代表的是pkg模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#installed是pkg模块下的一个函数，描述的是状态，该函数表示apache是否部署，返回值为True或者False，为真时，表示状态OK，否则会去满足该状态(下载安装apache)，如果满足不了会提示error,在该模块上面省略了参数-name: apache,因为ID为apache,这些参数是模块函数需要的（可以去查看源码）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#service是指的service模块</span></span><br><span class="line"><span class="comment">#这个模块下主要是描述service状态的函数，running状态函数表示apache在运行，省略-name不在表述，-require表示依赖系统，依赖系统是state system的重要组成部分，在该处描述了apache服务的运行需要依赖apache软件的部署，这里就要牵涉到sls文件的执行，sls文件在salt中执行时无序(如果没有指定顺序，后面会讲到order)，假如先执行了service这个状态，它发现依赖pkg包的安装，会去先验证pkg的状态有没有满足，如果没有依赖关系的话，我们可以想象，如果没有安装apache，apache 的service肯定运行会失败的，我们来看看怎么执行这个sls文件:</span></span><br><span class="line">     </span><br><span class="line">salt <span class="string">'*'</span> state.sls apache  </span><br><span class="line"></span><br><span class="line"><span class="comment">#在命令行里这样执行，.sls不写，如果在目录下，将目录与文件用’.’隔开，</span></span><br><span class="line"><span class="comment">#如： httpd/apache.sls –&gt; httpd.apache</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">salt <span class="string">'*'</span> state.highstate </span><br><span class="line"><span class="comment">#前提是存在top.sls 去指定minion运行的是哪个文件</span></span><br><span class="line"><span class="comment">#top.sls</span></span><br><span class="line">base:</span><br><span class="line">  <span class="string">'*'</span>:</span><br><span class="line">    - webserver</span><br></pre></td></tr></table></figure><blockquote><p>state.sls默认的运行环境是base环境，但是它并不读取top.sls（top.sls定义了运行环境以及需要运行的sls）</p><p>state.sls也可以指定读取哪个环境：state.sls  salt_env=’prod’ xxxx.sls，这个xxxx.sls可以不在top.sls中记录。</p><p>state.highstate: 这个是全局的所有环境，以及所有状态都生效。它会读取每一个环境的top.sls，并且对所有sls都生效。不在top.sls文件里面记录的sls则不会被执行；</p></blockquote><p>阅读后写的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">webserver:</span><br><span class="line">  pkg:</span><br><span class="line">    - name: httpd</span><br><span class="line">    - installed</span><br><span class="line">  service:</span><br><span class="line">    - name: httpd</span><br><span class="line">    - running</span><br><span class="line">    - reqire:</span><br><span class="line">      -pkg: httpd</span><br><span class="line"></span><br><span class="line">[root/srv/salt] ]<span class="variable">$salt</span> <span class="string">'minion-02'</span> state.sls webserver</span><br><span class="line">minion-02:</span><br><span class="line">----------</span><br><span class="line">          ID: webserver</span><br><span class="line">    Function: pkg.installed</span><br><span class="line">        Name: httpd</span><br><span class="line">      Result: True</span><br><span class="line">     Comment: The following packages were installed/updated: httpd</span><br><span class="line">     Started: 18:24:07.033564</span><br><span class="line">    Duration: 65091.443 ms</span><br><span class="line">     Changes:   </span><br><span class="line">              ----------</span><br><span class="line">              httpd:</span><br><span class="line">                  ----------</span><br><span class="line">                  new:</span><br><span class="line">                      2.4.6-45.el7.centos</span><br><span class="line">                  old:</span><br><span class="line">              httpd-tools:</span><br><span class="line">                  ----------</span><br><span class="line">                  new:</span><br><span class="line">                      2.4.6-45.el7.centos</span><br><span class="line">                  old:</span><br><span class="line">              mailcap:</span><br><span class="line">                  ----------</span><br><span class="line">                  new:</span><br><span class="line">                      2.1.41-2.el7</span><br><span class="line">                  old:</span><br><span class="line">----------</span><br><span class="line">          ID: webserver</span><br><span class="line">    Function: service.running</span><br><span class="line">        Name: httpd</span><br><span class="line">      Result: True</span><br><span class="line">     Comment: Started Service httpd</span><br><span class="line">     Started: 18:25:12.142495</span><br><span class="line">    Duration: 5599.171 ms</span><br><span class="line">     Changes:   </span><br><span class="line">              ----------</span><br><span class="line">              httpd:</span><br><span class="line">                  True</span><br><span class="line"></span><br><span class="line">Summary</span><br><span class="line">------------</span><br><span class="line">Succeeded: 2 (changed=2)</span><br><span class="line">Failed:    0</span><br><span class="line">------------</span><br><span class="line">Total states run:     2</span><br><span class="line">[root/srv/salt] ]$</span><br></pre></td></tr></table></figure><h4 id="较复杂的state"><a href="#较复杂的state" class="headerlink" title="较复杂的state"></a>较复杂的state</h4><p><strong>/srv/salt/ssh/init.sls</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">openssh-client:</span><br><span class="line">  pkg.installed</span><br><span class="line">/etc/ssh/ssh_config:</span><br><span class="line">  file.managed:</span><br><span class="line">    - user: root</span><br><span class="line">    - group: root</span><br><span class="line">    - mode: 644</span><br><span class="line">    - <span class="built_in">source</span>: salt://ssh/ssh_config</span><br><span class="line">    - require:</span><br><span class="line">      - pkg: openssh-client</span><br><span class="line"><span class="comment">#ssh/init.sls 意思是当执行 salt '*' state.sls ssh的时候其实就是执行init.sls</span></span><br><span class="line"><span class="comment">#第一行:文件名,全文件唯一,如果pkg等模块没跟- name 包名, 默认用的ID作为-name</span></span><br><span class="line"><span class="comment">#第二行: 简写,意思pkg下的installed函数</span></span><br><span class="line"><span class="comment">#第三行: ID 告诉minion下载的文件应该放哪里!</span></span><br><span class="line"><span class="comment">#第四行:简写</span></span><br><span class="line"><span class="comment">#第八行:source是告诉minion从哪里下载源文件!</span></span><br><span class="line"><span class="comment">#salt://ssh/ssh_config其实就是/srv/salt/ssh/ssh_config 前面/srv/salt这个路径和file_roots的配置有关</span></span><br></pre></td></tr></table></figure><p><strong>/srv/salt/ssh/server.sls</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">include:</span><br><span class="line">  - ssh</span><br><span class="line"><span class="comment">#include表示包含意思，就是把ssh/init.sls直接包含进来</span></span><br><span class="line"></span><br><span class="line">openssh-server:</span><br><span class="line"> pkg.installed</span><br><span class="line"></span><br><span class="line">sshd:</span><br><span class="line">  service.running:</span><br><span class="line">    - require:</span><br><span class="line">      - pkg: openssh-client</span><br><span class="line">      - pkg: openssh-server</span><br><span class="line">      - file: /etc/ssh/banner</span><br><span class="line">      - file: /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">/etc/ssh/sshd_config:</span><br><span class="line">  file.managed:</span><br><span class="line">    - user: root</span><br><span class="line">    - group: root</span><br><span class="line">    - mode: 644</span><br><span class="line">    - <span class="built_in">source</span>: salt://ssh/sshd_config</span><br><span class="line">    - require:</span><br><span class="line">      - pkg: openssh-server</span><br><span class="line">/etc/ssh/banner:</span><br><span class="line">  file:</span><br><span class="line">    - managed</span><br><span class="line">    - user: root</span><br><span class="line">    - group: root</span><br><span class="line">    - mode: 644</span><br><span class="line">    - <span class="built_in">source</span>: salt://ssh/banner</span><br><span class="line">    - require:</span><br><span class="line">      - pkg: openssh-server</span><br></pre></td></tr></table></figure><blockquote><p>此时的目录结构应该是</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├── <span class="selector-tag">ssh</span></span><br><span class="line">│   ├── <span class="selector-tag">banner</span></span><br><span class="line">│   ├── <span class="selector-tag">init</span><span class="selector-class">.sls</span></span><br><span class="line">│   ├── <span class="selector-tag">server</span><span class="selector-class">.sls</span></span><br><span class="line">│   ├── <span class="selector-tag">ssh_config</span></span><br><span class="line">│   └── <span class="selector-tag">sshd_config</span></span><br></pre></td></tr></table></figure><p><strong>关于include</strong>古官网的demo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">include:</span><br><span class="line">  - ssh.server</span><br><span class="line">extend:</span><br><span class="line">  /etc/ssh/banner:</span><br><span class="line">    file:</span><br><span class="line">      - <span class="built_in">source</span>: salt://ssh/custom-banner</span><br><span class="line"> </span><br><span class="line"><span class="comment">#包含ssh/server.sls,扩展/etc/ssh/banner，重新其source而其它的如user,group等不变，与include一致。</span></span><br><span class="line"></span><br><span class="line">include:</span><br><span class="line">  - apache</span><br><span class="line">extend:</span><br><span class="line">  apache:</span><br><span class="line">  service:</span><br><span class="line">    - watch:</span><br><span class="line">      - pkg: mod_python</span><br><span class="line"><span class="comment">#把apache.sls包含进来，想apache-service是追加了依赖关系(watch也是依赖系统的函数).</span></span><br></pre></td></tr></table></figure><h3 id="关于渲染器-render-system"><a href="#关于渲染器-render-system" class="headerlink" title="关于渲染器 render system"></a>关于渲染器 render system</h3><blockquote><p>salt默认是用的yaml_jinja渲染器处理ss文件,会优先使用jinjia处理,然后传给yaml处理然后生成salt需要的python数据类型.</p></blockquote><p><strong>apache/init.sls</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">apache:</span><br><span class="line">  pkg:installed:</span><br><span class="line">    &#123;% <span class="keyword">if</span> grains[<span class="string">'os'</span>] == <span class="string">'CentoOS'</span> %&#125;</span><br><span class="line">    - name: httpd</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  service.running:</span><br><span class="line">    &#123;% <span class="keyword">if</span> grains[<span class="string">'os'</span>] == <span class="string">'CentoOS'</span> %&#125;</span><br><span class="line">    - name: httpd</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    - watch:</span><br><span class="line">      - pkg: apache</span><br><span class="line">      </span><br><span class="line"><span class="comment">#简单的例子,使用jinja结合grains进行判断</span></span><br></pre></td></tr></table></figure><p><strong>user/init.sls</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> users = [<span class="string">'jerry'</span>,<span class="string">'tom'</span>,<span class="string">'gaga'</span>] %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> user <span class="keyword">in</span> users %&#125;</span><br><span class="line">&#123;&#123; user &#125;&#125;:</span><br><span class="line"> user.present:</span><br><span class="line">   - shell: /bin/bash</span><br><span class="line">   - home: /home/&#123;&#123; user &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">---------------------------</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">if</span> salt[<span class="string">'cmd.run'</span>](<span class="string">'uname -i'</span>) == <span class="string">'x86_64'</span> %&#125;</span><br><span class="line">hadoop:</span><br><span class="line"> user.present:</span><br><span class="line">   - shell: /bin/bash</span><br><span class="line">   - home: /home/hadoop</span><br><span class="line">&#123;% <span class="keyword">elif</span> salt[<span class="string">'cmd.run'</span>](<span class="string">'uname -i'</span>) == <span class="string">'i386'</span> %&#125;</span><br><span class="line">openstack:</span><br><span class="line"> user.present:</span><br><span class="line">   - shell: /bin/bash</span><br><span class="line">- home: /home/openstack</span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">django:</span><br><span class="line"> user.present:</span><br><span class="line">   - shell: /sbin/nologin</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h4 id="py渲染器"><a href="#py渲染器" class="headerlink" title="py渲染器"></a>py渲染器</h4><blockquote><p>纯python写的sls文件.如果使用其他的渲染器,需要在文件开头声明,!py就是声明用的py渲染器,</p><p>py中可用的变量有<strong>salt</strong>,<strong>grains</strong>,<strong>pillar</strong>,<strong>opts</strong>,<strong>env</strong>,<strong>sls</strong>,前三个分别对应jinja里的salt,grains,pillar,<strong>opts</strong>是minion的配置文件的字典，<strong>env</strong>对应的是环境如base,<strong>sls</strong>对应的是sls的文件名</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">   <span class="string">'''add user hadoop'''</span></span><br><span class="line">platform = os.popen(<span class="string">'uname -a'</span>).read().strip()</span><br><span class="line"><span class="keyword">if</span> platform == <span class="string">'x86_64'</span>:</span><br><span class="line">   <span class="keyword">return</span> &#123;<span class="string">'hadoop'</span>: &#123;<span class="string">'user'</span>: [<span class="string">'present'</span>,&#123;<span class="string">'shell'</span>: <span class="string">'/bin/bash'</span>&#125;, &#123;<span class="string">'home'</span>: <span class="string">'/home/hadoop'</span>&#125;]&#125;&#125;</span><br><span class="line"><span class="keyword">elif</span> platform == <span class="string">'i386'</span>:</span><br><span class="line">       <span class="keyword">return</span> &#123;<span class="string">'openstack'</span>: &#123;<span class="string">'user'</span>: [<span class="string">'present'</span>, &#123;<span class="string">'shell'</span>: <span class="string">'/bin/bash'</span>&#125;, &#123;<span class="string">'home'</span>: <span class="string">'/home/openstack'</span>&#125;]&#125;&#125;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">return</span> &#123;<span class="string">'django'</span>: &#123;<span class="string">'user'</span>: [<span class="string">'present'</span>, &#123;<span class="string">'shell'</span>: <span class="string">'/sbin/nologin'</span>&#125;]&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意的是return的数据结构&#123;ID: &#123;module: [func, arg1,arg2,...,]&#125;&#125; 或 &#123;ID: &#123;module.func: [arg1,arg2,..,]&#125;&#125; 。表示的内容与“示例；salt字典”表达的相同</span></span><br></pre></td></tr></table></figure><h3 id="state的执行顺序"><a href="#state的执行顺序" class="headerlink" title="state的执行顺序"></a>state的执行顺序</h3><blockquote><p>stata执行,也就是.sls文件的执行是无序的.为了保证每次的顺序是一致的,就加入了state order ,</p><p>先了解下高级数据(High Data)和低级数据(Low Data).</p><p>高级数据就是指编写的sls文件的数据</p><p>低级数据就是经过render和parser编译过的数据</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">[root~] ]<span class="variable">$salt</span> <span class="string">'minion-01'</span> state.show_highstate</span><br><span class="line">minion-01:</span><br><span class="line">    ----------</span><br><span class="line">    webserver:</span><br><span class="line">        ----------</span><br><span class="line">        __env__:</span><br><span class="line">            base</span><br><span class="line">        __sls__:</span><br><span class="line">            webserver</span><br><span class="line">        pkg:</span><br><span class="line">            |_</span><br><span class="line">              ----------</span><br><span class="line">              name:</span><br><span class="line">                  httpd</span><br><span class="line">            - installed</span><br><span class="line">            |_</span><br><span class="line">              ----------</span><br><span class="line">              order:</span><br><span class="line">                  10000</span><br><span class="line">        service:</span><br><span class="line">            |_</span><br><span class="line">              ----------</span><br><span class="line">              name:</span><br><span class="line">                  httpd</span><br><span class="line">            - running</span><br><span class="line">            |_</span><br><span class="line">              ----------</span><br><span class="line">              -pkg:</span><br><span class="line">                  httpd</span><br><span class="line">              reqire:</span><br><span class="line">                  None</span><br><span class="line">            |_</span><br><span class="line">              ----------</span><br><span class="line">              order:</span><br><span class="line">                  10001</span><br><span class="line">[root~] ]<span class="variable">$salt</span> <span class="string">'minion-01'</span> state.show_lowstate</span><br><span class="line">minion-01:</span><br><span class="line">    |_</span><br><span class="line">      ----------</span><br><span class="line">      __env__:</span><br><span class="line">          base</span><br><span class="line">      __id__:</span><br><span class="line">          webserver</span><br><span class="line">      __sls__:</span><br><span class="line">          webserver</span><br><span class="line">      fun:</span><br><span class="line">          installed</span><br><span class="line">      name:</span><br><span class="line">          httpd</span><br><span class="line">      order:</span><br><span class="line">          10000</span><br><span class="line">      state:</span><br><span class="line">          pkg</span><br><span class="line">    |_</span><br><span class="line">      ----------</span><br><span class="line">      -pkg:</span><br><span class="line">          httpd</span><br><span class="line">      __env__:</span><br><span class="line">          base</span><br><span class="line">      __id__:</span><br><span class="line">          webserver</span><br><span class="line">      __sls__:</span><br><span class="line">          webserver</span><br><span class="line">      fun:</span><br><span class="line">          running</span><br><span class="line">      name:</span><br><span class="line">          httpd</span><br><span class="line">      order:</span><br><span class="line">          10001</span><br><span class="line">      reqire:</span><br><span class="line">          None</span><br><span class="line">      state:</span><br><span class="line">          service</span><br><span class="line">[root~] ]$</span><br></pre></td></tr></table></figure><blockquote><p>查看可知,里面有个order,这个是默认salt 会自动设置,从10000开始.可通过修改master <code>state_auto_order: False</code>来关闭</p></blockquote><h4 id="order的设定"><a href="#order的设定" class="headerlink" title="order的设定"></a>order的设定</h4><ul><li>include</li></ul><blockquote><p>被include的文件Order靠前,先执行</p></blockquote><ul><li>手动定义order</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">httpd:</span><br><span class="line">  pkg:</span><br><span class="line">    - installed</span><br><span class="line">    - order: 1</span><br><span class="line"><span class="comment">#order的值越小,优先级越高.但是-1 是最后!</span></span><br></pre></td></tr></table></figure><ul><li>依赖关系系统</li></ul><p>就是前面使用过的 - require</p><h3 id="依赖关系系统-requisite-system"><a href="#依赖关系系统-requisite-system" class="headerlink" title="依赖关系系统 requisite system"></a>依赖关系系统 requisite system</h3><blockquote><p>我们已经使用过依赖关系系统了,就是定义状态和状态之间的依赖关系,常用的函数有 <code>require</code>和<code>watch</code> 以及他们的变种<code>require_in</code>和<code>watch-in</code></p><p>四者有何区别?</p><p>require,watch是指依赖，require_in,watch_in是指被依赖</p></blockquote><blockquote><p>watch 常用于service,而且当依赖条件发生变化的时候会执行一些动作</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/etc/httpd/httpd.conf:</span><br><span class="line">  file:</span><br><span class="line">    - managed</span><br><span class="line">    - <span class="built_in">source</span>: salt://httpd/httpd.conf</span><br><span class="line">  pkg.installed</span><br><span class="line">  service:</span><br><span class="line">    - running</span><br><span class="line">    - require:</span><br><span class="line">      - pkg: httpd</span><br><span class="line">    - watch:</span><br><span class="line">      - file://etc/httpd/httpd.conf <span class="comment">#当httpd.conf改变时，重启httpd服务</span></span><br><span class="line">    </span><br><span class="line">============================    </span><br><span class="line"></span><br><span class="line">/etc/httpd/httpd.conf:</span><br><span class="line">  file:</span><br><span class="line">    - managed</span><br><span class="line">    - <span class="built_in">source</span>: salt://httpd/httpd.conf   </span><br><span class="line">    - watch_in:</span><br><span class="line">      - service: httpd</span><br><span class="line">  httpd:</span><br><span class="line">    pkg:</span><br><span class="line">      - installed</span><br><span class="line">      - require_in:</span><br><span class="line">        - service: httpd</span><br><span class="line">    service:</span><br><span class="line">      - running</span><br></pre></td></tr></table></figure><h3 id="salt-state多环境"><a href="#salt-state多环境" class="headerlink" title="salt state多环境"></a>salt state多环境</h3><blockquote><p>针对不同的环境,应用不同state的file,比如开发,测试,生产等.</p><p>通过修改master对不同的环境应用不通过的目录</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#官方demo</span></span><br><span class="line">Example:</span><br><span class="line">  file_roots:</span><br><span class="line">    base:</span><br><span class="line">      - /srv/salt/</span><br><span class="line">    dev:</span><br><span class="line">      - /srv/salt/dev/services</span><br><span class="line">      - /srv/salt/dev/states</span><br><span class="line">    prod:</span><br><span class="line">      - /srv/salt/prod/services</span><br><span class="line">      - /srv/salt/prod/states</span><br><span class="line"><span class="comment">#file_roots 配置salt配置的存放目录, 其中base环境是必要的, 指定top.sls存放的位置.</span></span><br><span class="line"><span class="comment">#默认没指定环境时则从base目录获取文件</span></span><br><span class="line"><span class="comment">#其它则是一些自定义的, 可以通过环境变量指定.</span></span><br><span class="line"><span class="comment">#这样可以逻辑上隔离一些环境配置.</span></span><br><span class="line"><span class="comment">#每一个环境都可以定义多个目录, 优先级关系由定义目录的顺序决定.</span></span><br><span class="line">file_roots:</span><br><span class="line">  base:</span><br><span class="line">    - /srv/salt/foo</span><br><span class="line">    - /srv/salt/bar</span><br><span class="line"><span class="comment">#如果寻找 salt://file.sls, 如果都存在/srv/salt/foo/file.sls和/srv/salt/bar/file.sls, 则使用第一个找到的.</span></span><br></pre></td></tr></table></figure><p>另一个例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">file_roots:</span><br><span class="line">  base:</span><br><span class="line">    - /srv/salt/prod</span><br><span class="line">  qa:</span><br><span class="line">    - /srv/salt/qa</span><br><span class="line">    - /srv/salt/prod</span><br><span class="line">  dev:</span><br><span class="line">    - /srv/salt/dev</span><br><span class="line">    - /srv/salt/qa</span><br><span class="line">    - /srv/salt/prod</span><br><span class="line"><span class="comment">#/srv/salt/prod 里的配置是在三种环境下都可以, /srv/salt/qa 只在qa和dev环境下可用, /srv/salt/dev则只在dev环境下可用.</span></span><br></pre></td></tr></table></figure><p>简答你的实施案例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#master配置</span></span><br><span class="line">file_roots:</span><br><span class="line">  base:</span><br><span class="line">    - /home/base/</span><br><span class="line">  dev:</span><br><span class="line">    - /home/dev/</span><br><span class="line">    - /home/base/</span><br><span class="line">    </span><br><span class="line"><span class="comment">#base环境   </span></span><br><span class="line"><span class="comment">#/home/base</span></span><br><span class="line">├── envtest.sls</span><br><span class="line">└── top.sls</span><br><span class="line"></span><br><span class="line"><span class="comment">#cat /home/base/envtest.sls</span></span><br><span class="line">envtest:</span><br><span class="line">  cmd.run:</span><br><span class="line">    - name: <span class="string">"echo '[base] env'"</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment">#dev环境</span></span><br><span class="line"><span class="comment">#/home/dev/</span></span><br><span class="line">├── mytest.sls</span><br><span class="line">└── top.sls</span><br><span class="line"></span><br><span class="line"><span class="comment">#cat /home/dev/mytest.sls</span></span><br><span class="line">envtest:</span><br><span class="line">  cmd.run:</span><br><span class="line">    - name: <span class="string">"echo '[dev] env'"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##执行效果如下,如果不添加环境变量,则提示找不到文件</span></span><br><span class="line">[root/srv/salt/dev] ]<span class="variable">$salt</span> <span class="string">'minion-01'</span> state.sls mytest  <span class="built_in">test</span>=True</span><br><span class="line">minion-01:</span><br><span class="line">    Data failed to compile:</span><br><span class="line">----------</span><br><span class="line">    No matching sls found <span class="keyword">for</span> <span class="string">'mytest'</span> <span class="keyword">in</span> env <span class="string">'base'</span></span><br><span class="line">ERROR: Minions returned with non-zero <span class="built_in">exit</span> code</span><br><span class="line"></span><br><span class="line"><span class="comment">#加上环境变量执行</span></span><br><span class="line">[root/srv/salt/dev] ]<span class="variable">$salt</span> <span class="string">'minion-01'</span> state.sls mytest saltenv=<span class="string">'dev'</span> <span class="built_in">test</span>=True</span><br><span class="line">minion-01:</span><br><span class="line">----------</span><br><span class="line">          ID: mytest</span><br><span class="line">    Function: cmd.run</span><br><span class="line">        Name: <span class="built_in">echo</span> dev-env</span><br><span class="line">      Result: None</span><br><span class="line">     Comment: Command <span class="string">"echo dev-env"</span> would have been executed</span><br><span class="line">     Started: 23:54:46.298421</span><br><span class="line">    Duration: 0.422 ms</span><br><span class="line">     Changes:   </span><br><span class="line"></span><br><span class="line">Summary</span><br><span class="line">------------</span><br><span class="line">Succeeded: 1 (unchanged=1)</span><br><span class="line">Failed:    0</span><br><span class="line">------------</span><br><span class="line">Total states run:     1</span><br><span class="line">[root/srv/salt/dev] ]$</span><br></pre></td></tr></table></figure><h3 id="salt-schedule-salt中的crontab"><a href="#salt-schedule-salt中的crontab" class="headerlink" title="salt schedule(salt中的crontab)"></a>salt schedule(salt中的crontab)</h3><blockquote><p>周期性的执行一些函数,需要注意的是: 在minion上执行salt可执行模块里的函数,在master执行的是runner模块的函数.</p><p>共有三种方式:master minion  pillar</p></blockquote><ul><li>master端</li><li>minion端</li><li>pillar</li></ul><blockquote><p>一般而言,尤其是在minion端配置,基本不会用到的,主要还是一pillar为主</p></blockquote><p><strong>修改top.sls</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加</span></span><br><span class="line">  - schedule</span><br></pre></td></tr></table></figure><p><strong>/srv/pillar/schedule.sls</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">schedule:</span><br><span class="line">  <span class="built_in">test</span>-job:</span><br><span class="line">    <span class="keyword">function</span>: cmd.run</span><br><span class="line">    seconds: 10</span><br><span class="line">    args:</span><br><span class="line">      - <span class="string">'date &gt;&gt; /date.log'</span></span><br><span class="line">      </span><br><span class="line"><span class="comment">#没隔10S 在/目录的date.log文件中记录一条时间</span></span><br><span class="line">salt <span class="string">"*"</span> saltutil.refresh_pillar</span><br><span class="line"><span class="comment">#刷新pillar到minion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#回到minion 可以查看到</span></span><br><span class="line">[root@minion-01 /]<span class="comment"># ls</span></span><br><span class="line">bin  boot  date.log  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@minion-01 /]<span class="comment"># cat date.log </span></span><br><span class="line">Fri Mar 24 02:27:40 CST 2017</span><br><span class="line">Fri Mar 24 02:27:50 CST 2017</span><br><span class="line">Fri Mar 24 02:28:00 CST 2017</span><br><span class="line">....</span><br></pre></td></tr></table></figure><h3 id="salt-ssh"><a href="#salt-ssh" class="headerlink" title="salt ssh"></a>salt ssh</h3><blockquote><p>salt-ssh 是 0.17.0 新出现的一个功能.对于有些不能安装minion的机器,ssh不失为一种好的选择但是SSH并不能取代minion,salt的有些功能不支持ssh.而且走的是SSH 并不是ZeroMQ,所以速度会有所影响</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先安装salt-ssh.</span></span><br><span class="line">yum -y install salt-ssh</span><br><span class="line">[root~] ]<span class="variable">$cat</span> /etc/salt/roster <span class="comment">#roster文件名和路径!</span></span><br><span class="line">minion-01:</span><br><span class="line">  host: 192.168.247.153</span><br><span class="line">  user: root</span><br><span class="line">  passwd: centos</span><br><span class="line">minion-02:</span><br><span class="line">  host: 192.168.247.154</span><br><span class="line">  user: root</span><br><span class="line">  passwd: centos</span><br><span class="line">  sudo: True</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果不给passwd的话,执行salt-ssh会提示输入密码</span></span><br><span class="line"><span class="comment">#普通用户给sudo权限</span></span><br><span class="line"><span class="comment">#第一次使用记得加参数 -i 否则报错如下</span></span><br><span class="line">[root~] ]<span class="variable">$salt</span>-ssh <span class="string">'minion-01'</span> test.ping</span><br><span class="line">minion-01:</span><br><span class="line">    ----------</span><br><span class="line">    retcode:</span><br><span class="line">        254</span><br><span class="line">    stderr:</span><br><span class="line">    stdout:</span><br><span class="line">        The host key needs to be accepted, to auto accept run salt-ssh with the -i flag:</span><br><span class="line">        The authenticity of host <span class="string">'192.168.247.153 (192.168.247.153)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">        ECDSA key fingerprint is 16:f6:f5:49:24:9c:91:da:d7:02:58:a2:14:08:e4:15.</span></span><br><span class="line"><span class="string">        Are you sure you want to continue connecting (yes/no)? </span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">#第一次运行 添加-i参数</span></span><br><span class="line"><span class="string">[root~] ]$salt-ssh '</span>minion-01<span class="string">' test.ping -i</span></span><br><span class="line"><span class="string">minion-01:</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">[root~] ]$salt-ssh '</span>minion-01<span class="string">' test.ping</span></span><br><span class="line"><span class="string">minion-01:</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">[root~] ]$</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;salt简介&quot;&gt;&lt;a href=&quot;#salt简介&quot; class=&quot;headerlink&quot; title=&quot;salt简介&quot;&gt;&lt;/a&gt;salt简介&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;SaltStack是一个服务器基础架构集中化管理平台，具备配置管理、远程执行、监控等功能，基于Python语言实现，结合轻量级消息队列（ZeroMQ）与Python第三方模块（Pyzmq、PyCrypto、Pyjinjia2、python-msgpack和PyYAML等）构建。&lt;/p&gt;
&lt;p&gt;通过部署SaltStack，我们可以在成千万台服务器上做到批量执行命令，根据不同业务进行配置集中化管理、分发文件、采集服务器数据、操作系统基础及软件包管理等，SaltStack是运维人员提高工作效率、规范业务配置与操作的利器。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="知识扩展" scheme="https://pl1649947109.github.io/pl1649947109/tags/%E7%9F%A5%E8%AF%86%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>第七讲——扩展：drf中版本、认证、权限、频率限制源码分析</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/19/%E4%B9%A6/drf/%E7%AC%AC%E4%B8%83%E8%AE%B2%E2%80%94%E2%80%94%E6%89%A9%E5%B1%95%EF%BC%9Adrf%E4%B8%AD%E7%89%88%E6%9C%AC%E3%80%81%E8%AE%A4%E8%AF%81%E3%80%81%E6%9D%83%E9%99%90%E3%80%81%E9%A2%91%E7%8E%87%E9%99%90%E5%88%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/19/书/drf/第七讲——扩展：drf中版本、认证、权限、频率限制源码分析/</id>
    <published>2019-11-19T12:00:00.000Z</published>
    <updated>2019-11-19T08:39:06.505Z</updated>
    
    <content type="html"><![CDATA[<p>文章导读：在这里我们将分为两部分来讲解:第一部分，我们将随着程序执行的顺序一步步的去分析源码(看源码不可跳读，必须一步步的走)；第二部分，我们使用一个实例完整的把这个使用流程展示出来。</p><p>第一部分：源码的讲解</p><p>路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> account</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^login/$'</span>,account.LoginView.as_view()),</span><br></pre></td></tr></table></figure><p>视图类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginView</span><span class="params">(APIView)</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">CBV视图类</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>下面，我们将开始分析，<strong>login路由</strong>进入查找到我们的<strong>account.LoginView</strong>，接着执行LoginView视图类里面的<strong>as_view()</strong>视图类，在该类里面找不到，接着找他的父类，如后就到<strong>APIView</strong>父类里面查找，</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APIView</span><span class="params">(View)</span>:</span></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">as_view</span><span class="params">(cls, **initkwargs)</span>:</span></span><br><span class="line">        view = super().as_view(**initkwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> csrf_exempt(view)</span><br></pre></td></tr></table></figure><p>我们发现，在该视图类里面，它重构了<strong>父类View</strong>类的<strong>as_view()</strong>方法，我们接着找它父类的该方法，看看里面做了什么，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">View</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">@classonlymethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">as_view</span><span class="params">(cls, **initkwargs)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(request, *args, **kwargs)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> self.dispatch(request, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> view</span><br></pre></td></tr></table></figure><p>在View视图里面，我们发现它使用了开发过封闭原则执行了<strong>dispatch()</strong>方法，接着，我们开始从最开始的LoginView类往上找，最后我们在它的亲类APIView里面找到了，我们看看它里面都执行了什么</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    它里面的钩子用于启动、完成和异常处理。</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    self.args = args</span><br><span class="line">    self.kwargs = kwargs</span><br><span class="line">    request = self.initialize_request(request, *args, **kwargs)</span><br><span class="line">    self.request = request</span><br><span class="line">    self.headers = self.default_response_headers</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        self.initial(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Get the appropriate handler method</span></span><br><span class="line">        <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">            handler = getattr(self, request.method.lower(),</span><br><span class="line">                              self.http_method_not_allowed)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            handler = self.http_method_not_allowed</span><br><span class="line"></span><br><span class="line">        response = handler(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">        response = self.handle_exception(exc)</span><br><span class="line"></span><br><span class="line">    self.response = self.finalize_response(request, response, *args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> self.response</span><br></pre></td></tr></table></figure><p>执行上面的方法，首先是对<strong>request进行封装</strong>，执行<strong>initialize_request</strong>，在initialize_request里面做了什么，我们来看看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize_request</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line"></span><br><span class="line">    parser_context = self.get_parser_context(request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Request(</span><br><span class="line">        request,</span><br><span class="line">        parsers=self.get_parsers(),</span><br><span class="line">        <span class="comment">#按这个名字是不是和我们的认证有关系</span></span><br><span class="line">        authenticators=self.get_authenticators(),</span><br><span class="line">        negotiator=self.get_content_negotiator(),</span><br><span class="line">        parser_context=parser_context</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_authenticators</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [auth() <span class="keyword">for</span> auth <span class="keyword">in</span> self.authentication_classes]</span><br><span class="line"></span><br><span class="line"><span class="comment">#需要我们自己设置的，否则就使用默认的None值</span></span><br><span class="line">authentication_classes = api_settings.DEFAULT_AUTHENTICATION_CLASSES</span><br></pre></td></tr></table></figure><p>从上面的方法里面，我们发现了，新的request里面封装了更多的内容，其中一项就是我们的<strong>实例化认证类列表</strong>，我们后面会讲到，接下来，我们执行try里面的<strong>initial</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initial</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行版本相关的方法</span></span><br><span class="line">    version, scheme = self.determine_version(request, *args, **kwargs)</span><br><span class="line">    request.version, request.versioning_scheme = version, scheme</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 认证相关</span></span><br><span class="line">    self.perform_authentication(request)</span><br><span class="line">    <span class="comment"># 权限相关</span></span><br><span class="line">    self.check_permissions(request)</span><br><span class="line">    <span class="comment"># 频率限制相关</span></span><br><span class="line">    self.check_throttles(request)</span><br></pre></td></tr></table></figure><p>在这个函数里，就是我们真正需要关注的内容了，我在里面进行了简单的标注，下面，我们将一个个的分析它们：</p><p>版本：</p><p>执行<strong>determine_version</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">determine_version</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    If versioning is being used, then determine any API version for the</span></span><br><span class="line"><span class="string">    incoming request. Returns a two-tuple of (version, versioning_scheme)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> self.versioning_class <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> (<span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">    scheme = self.versioning_class()</span><br><span class="line">    <span class="keyword">return</span> (scheme.determine_version(request, *args, **kwargs), scheme)</span><br><span class="line"></span><br><span class="line"><span class="comment">#需要我们自己设置的，否则就使用默认的None值</span></span><br><span class="line">versioning_class = api_settings.DEFAULT_VERSIONING_CLASS</span><br></pre></td></tr></table></figure><p>如果我们的<strong>settings</strong>里面没有设置这个<strong>versioning_class</strong>的值，那么程序就会去<strong>api_settings</strong>里面找，返回的就是一个<strong>(None,None)</strong>的元组，否则就会把我们定义的实例化类赋值给<strong>scheme</strong>，并返回一个包含我们定义的实例化类的方法和该类<strong>(selfversioning_class().determine_version,self.versioning_class())</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.version, request.versioning_scheme = version, scheme</span><br></pre></td></tr></table></figure><p>最后，把版本的信息封装进了<strong>request</strong></p><p>认证：</p><p>执行<strong>perform_authentication</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">perform_authentication</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    request.user</span><br></pre></td></tr></table></figure><p>执行<strong>request</strong>里面封装的<strong>user</strong>（这个看着user是一个属性对不对，但是既然这里什么没有return，那么它就肯定不是一个属性，而是一个方法，只是伪装成了属性而已），</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'_user'</span>):</span><br><span class="line">        <span class="keyword">with</span> wrap_attributeerrors():</span><br><span class="line">            self._authenticate()</span><br><span class="line">    <span class="keyword">return</span> self._user</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_authenticate</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> authenticator <span class="keyword">in</span> self.authenticators:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            user_auth_tuple = authenticator.authenticate(self)</span><br><span class="line">        <span class="keyword">except</span> exceptions.APIException:</span><br><span class="line">            self._not_authenticated()</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line">        <span class="keyword">if</span> user_auth_tuple <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self._authenticator = authenticator</span><br><span class="line">            self.user, self.auth = user_auth_tuple</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    self._not_authenticated()</span><br></pre></td></tr></table></figure><p>这里的<strong>_authenticate()</strong>就是重点，它里面执行的就是我们之前在<strong>initialize_request</strong>里面封装的我们自定义的功能类，这里执行并返回一个元组，这里返回的是三种情况，抛出异常，认证失败，程序退出；返回None，接着执行下一个认证；返回一个包含用户信息和token值的元组，表示认证成功。</p><p>权限：</p><p>执行<strong>check_permissions</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_permissions</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> permission <span class="keyword">in</span> self.get_permissions():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> permission.has_permission(request, self):</span><br><span class="line">            self.permission_denied(</span><br><span class="line">                request, message=getattr(permission, <span class="string">'message'</span>, <span class="literal">None</span>)</span><br><span class="line">            )</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_permissions</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [permission() <span class="keyword">for</span> permission <span class="keyword">in</span> self.permission_classes]</span><br><span class="line"></span><br><span class="line"><span class="comment">#需要我们自己设置的，否则就使用默认的None值</span></span><br><span class="line">permission_classes = api_settings.DEFAULT_PERMISSION_CLASSES</span><br></pre></td></tr></table></figure><p>在权限里面，首先循环了<strong>get_permissions()</strong>方法，这个方法就去配置文件里面找我们自定义的<strong>实例化的权限类</strong>，并进行封装到一个列表里面，接着，循环我们自定义的实例化类，执行实例化里面的<strong>has_permission()</strong>方法，这就是我们需要在自定义类里面写的方法，他返回的是一个True（表示拥有访问的权限），该方法执行完成。</p><p>否则，执行<strong>permission_denied()</strong>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permission_denied</span><span class="params">(self, request, message=None)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.authenticators <span class="keyword">and</span> <span class="keyword">not</span> request.successful_authenticator:</span><br><span class="line">        <span class="keyword">raise</span> exceptions.NotAuthenticated()</span><br><span class="line">        <span class="keyword">raise</span> exceptions.PermissionDenied(detail=message)</span><br></pre></td></tr></table></figure><p>我们就可以很清楚的看出来，当权限不足，就是没有访问的权限的时候就会抛出异常。</p><p>频率限制：</p><p>在讲频率限制之前，我们先说一下它实现的原理，这样会帮助我们去理解源码，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">DRF中的频率控制基本原理是基于访问次数和时间的，当然我们可以通过自己定义的方法来实现。</span><br><span class="line"></span><br><span class="line">当我们请求进来，走到我们频率组件的时候，DRF内部会有一个字典来记录访问者的IP，或者是登录用户的相关信息</span><br><span class="line"></span><br><span class="line">这里，当匿名用户的IP为key，value为一个列表，存放访问者每次访问的时间，</span><br><span class="line"></span><br><span class="line">&#123;  IP1: [第三次访问时间，第二次访问时间，第一次访问时间]，&#125;</span><br><span class="line"></span><br><span class="line">把每次访问最新时间放入列表的最前面，记录这样一个数据结构后，通过什么方式限流呢~~</span><br><span class="line"></span><br><span class="line">如果我们设置的是10秒内只能访问5次，</span><br><span class="line"></span><br><span class="line">　　-- 1，判断访问者的IP是否在这个请求IP的字典里（如果是登录用户，我们可以根据用户名等信息）</span><br><span class="line"></span><br><span class="line">　　-- 2，保证这个列表里都是最近10秒内的访问的时间</span><br><span class="line"></span><br><span class="line">　　　　　　判断当前请求时间和列表里最早的(也就是最后的一个的)请求时间的差</span><br><span class="line"></span><br><span class="line">　　　　　　如果差大于10秒，说明请求已经不是最近10秒内的，删除掉，</span><br><span class="line"></span><br><span class="line">　　　　　　继续判断倒数第二个，直到差值小于10秒</span><br><span class="line"></span><br><span class="line">　　-- 3，判断列表的长度(即访问次数)，是否大于我们设置的5次，</span><br><span class="line"></span><br><span class="line">　　　　　　如果大于就限流，否则放行，并把时间放入列表的最前面。</span><br><span class="line">第二步：</span><br><span class="line">我们以一个列表来说明:</span><br><span class="line">s = &#123;&apos;IP&apos;:[1:20&apos;09&apos;&apos;,1:20&apos;08&apos;&apos;,1:20&apos;07&apos;&apos;,1:20&apos;06&apos;&apos;,1:20&apos;02&apos;&apos;,1:19&apos;50&apos;&apos;]&#125;</span><br><span class="line">现在，我们又这个IP又发来一次请求，时间为1:20&apos;10&apos;&apos;,</span><br><span class="line">我们使用1:20&apos;10&apos;&apos;- 1:19&apos;50&apos;&apos;&gt;10,发现，这个时间过期了，我们就s[&apos;IP&apos;].pop()</span><br><span class="line">现在s = &#123;&apos;IP&apos;:[1:20&apos;09&apos;&apos;,1:20&apos;08&apos;&apos;,1:20&apos;07&apos;&apos;,1:20&apos;06&apos;&apos;,1:20&apos;02&apos;&apos;]&#125;</span><br><span class="line">我们再比较1:20&apos;10&apos;&apos; - 1:20&apos;02&apos;&apos;&lt;10,说明这个时间没有过期，好我们就把1:20&apos;10&apos;&apos;这个时间插入到上面的这个列表里面</span><br><span class="line">于是s = &#123;&apos;IP&apos;:[1:20&apos;10&apos;&apos;,1:20&apos;09&apos;&apos;,1:20&apos;07&apos;&apos;,1:20&apos;02&apos;&apos;]&#125;</span><br><span class="line"></span><br><span class="line">第三步：</span><br><span class="line">现在，我们再来判断上面的列表的长度是不是&gt;5，满足表示需要限流了，就不让它访问，否则它就可以访问。最后发现它还可以访问，就是这样的原理流程</span><br></pre></td></tr></table></figure><p>执行<strong>check_throttles</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_throttles</span><span class="params">(self, request)</span>:</span></span><br><span class="line"></span><br><span class="line">    throttle_durations = []</span><br><span class="line">    <span class="keyword">for</span> throttle <span class="keyword">in</span> self.get_throttles():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> throttle.allow_request(request, self):</span><br><span class="line">            throttle_durations.append(throttle.wait())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> throttle_durations:</span><br><span class="line">                durations = [</span><br><span class="line">                    duration <span class="keyword">for</span> duration <span class="keyword">in</span> throttle_durations</span><br><span class="line">                    <span class="keyword">if</span> duration <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">                ]</span><br><span class="line"></span><br><span class="line">                duration = max(durations, default=<span class="literal">None</span>)</span><br><span class="line">                self.throttled(request, duration)</span><br><span class="line">                </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_throttles</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> [throttle() <span class="keyword">for</span> throttle <span class="keyword">in</span> self.throttle_classes]</span><br><span class="line"></span><br><span class="line"><span class="comment">#需要我们自己设置的，否则就使用默认的None值</span></span><br><span class="line">throttle_classes = api_settings.DEFAULT_THROTTLE_CLASSES</span><br></pre></td></tr></table></figure><p>和前面的几种情况一样，第一步都是去生成一个<strong>实例化限流类的列表</strong>，并循环执行，接着就执行实例化类里面的<strong>allow_request()</strong>方法，这里我们就拿<strong>SimpleRateThrottle</strong>里面的该方法来说明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allow_request</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#判断请求的方式是不是字符串的形式，确定频率限制定义的格式</span></span><br><span class="line">    <span class="keyword">if</span> self.rate <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#这里就是上面步骤的第一步</span></span><br><span class="line">    <span class="comment">#必须在我们自己定义类里面重写该方法，如果限制的话，判断用户请求（返回匿名用户IP，登录用户的user之类的）是否满足返回之，否则就不限制，直接返回Non（这里是None返回的是True）</span></span><br><span class="line">    self.key = self.get_cache_key(request, view)</span><br><span class="line">    <span class="keyword">if</span> self.key <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#拿缓存中的数据，就是我们第二步里面的列表，当缓存中没有的话默认设置为空列表</span></span><br><span class="line">    self.history = self.cache.get(self.key, [])</span><br><span class="line">    <span class="comment">#timer() = datetime.datetime()获取当前时间</span></span><br><span class="line">    self.now = self.timer()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#这里就是上面步骤的第二步</span></span><br><span class="line">    <span class="comment">#self.duration获取的是我们设置的时间间隔（10/minute），self.duration=60</span></span><br><span class="line">    <span class="comment">#剔除列表中过期的时间</span></span><br><span class="line">    <span class="keyword">while</span> self.history <span class="keyword">and</span> self.history[<span class="number">-1</span>] &lt;= self.now - self.duration:</span><br><span class="line">        self.history.pop()</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#num_requests我们的次数，这里是10</span></span><br><span class="line">    <span class="comment">#判断这个列表的长度是否超过10</span></span><br><span class="line">    <span class="keyword">if</span> len(self.history) &gt;= self.num_requests:</span><br><span class="line">        <span class="comment">#长度超过了，执行该方法返回False</span></span><br><span class="line">        <span class="keyword">return</span> self.throttle_failure()</span><br><span class="line">    <span class="comment">#长度没有超过，表示没有限制，执行该方法返回True</span></span><br><span class="line">    <span class="keyword">return</span> self.throttle_success()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cache_key</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">应返回可用于限制的唯一缓存密钥。</span></span><br><span class="line"><span class="string">必须重写。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果不应限制请求，则可以返回“None”。</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">raise</span> NotImplementedError(<span class="string">'.get_cache_key() must be overridden'</span>)</span><br></pre></td></tr></table></figure><p>执行完我们的方法，接着执行<strong>throttle_durations.append(throttle.wait())</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        返回下次建议的请求时间</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">    <span class="keyword">if</span> self.history:</span><br><span class="line">        remaining_duration = self.duration - (self.now - self.history[<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        remaining_duration = self.duration</span><br><span class="line"></span><br><span class="line">    available_requests = self.num_requests - len(self.history) + <span class="number">1</span></span><br><span class="line">    <span class="comment">#表示num_requests长度为空,返回None</span></span><br><span class="line">    <span class="keyword">if</span> available_requests &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#这个列表间隔时间/列表长度 = x次/秒（最终返回的是一个int）</span></span><br><span class="line">    <span class="keyword">return</span> remaining_duration / float(available_requests)</span><br></pre></td></tr></table></figure><p>上面的返回的是建议我们下次请求的时间，接着就剩下下面的内容没执行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> throttle_durations:</span><br><span class="line">    durations = [</span><br><span class="line">        duration <span class="keyword">for</span> duration <span class="keyword">in</span> throttle_durations</span><br><span class="line">        <span class="keyword">if</span> duration <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    duration = max(durations, default=<span class="literal">None</span>)</span><br><span class="line">    self.throttled(request, duration)</span><br></pre></td></tr></table></figure><p>我们分析，当我们定义的列表不为空的时候，我们循环遍历该列表<strong>throttle_durations</strong>剔除<strong>None</strong>值</p><p>，这种取出<strong>durations</strong>中最大的值，当作参数传递给<strong>throttled()</strong>并执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">throttled</span><span class="params">(self, request, wait)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    如果请求被限制，请确定引发哪种异常。</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">raise</span> exceptions.Throttled(wait)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Throttled</span><span class="params">(APIException)</span>:</span></span><br><span class="line">    status_code = status.HTTP_429_TOO_MANY_REQUESTS</span><br><span class="line">    default_detail = _(<span class="string">'Request was throttled.'</span>)</span><br><span class="line">    extra_detail_singular = _(<span class="string">'Expected available in &#123;wait&#125; second.'</span>)</span><br><span class="line">    extra_detail_plural = _(<span class="string">'Expected available in &#123;wait&#125; seconds.'</span>)</span><br><span class="line">    default_code = <span class="string">'throttled'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, wait=None, detail=None, code=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> detail <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            detail = force_str(self.default_detail)</span><br><span class="line">        <span class="keyword">if</span> wait <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            wait = math.ceil(wait)</span><br><span class="line">            detail = <span class="string">' '</span>.join((</span><br><span class="line">                detail,</span><br><span class="line">                force_str(ngettext(self.extra_detail_singular.format(wait=wait),</span><br><span class="line">                                   self.extra_detail_plural.format(wait=wait),</span><br><span class="line">                                   wait))))</span><br><span class="line">        self.wait = wait</span><br><span class="line">        super().__init__(detail, code)</span><br></pre></td></tr></table></figure><p>至此，我们的截流也说完了。</p><p>第二部分：应用实例</p><p>配置文件部分settings.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment">#版本控制</span></span><br><span class="line">    <span class="string">"DEFAULT_VERSIONING_CLASS"</span>:<span class="string">"rest_framework.versioning.URLPathVersioning"</span>,</span><br><span class="line">    <span class="string">"ALLOWED_VERSIONS"</span>:[<span class="string">'v1'</span>,<span class="string">'v2'</span>],</span><br><span class="line"></span><br><span class="line">    <span class="comment">#认证</span></span><br><span class="line">    <span class="string">"DEFAULT_AUTHENTICATION_CLASSES"</span>:[<span class="string">"api.extensions.auth.HulaQueryParamAuthentication"</span>,],</span><br><span class="line">    <span class="comment">#"UNAUTHENTICATED_USER":None,</span></span><br><span class="line">    <span class="comment">#"UNAUTHENTICATED_TOKEN":None,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#权限</span></span><br><span class="line"><span class="string">"DEFAULT_AUTHENTICATION_CLASSES"</span>:[<span class="string">"kka.auth.TokenAuthentication"</span>,]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#频率限制</span></span><br><span class="line">    <span class="string">"DEFAULT_THROTTLE_RATES"</span>:&#123;</span><br><span class="line">        <span class="string">'anon'</span>: <span class="string">'5/minute'</span>,  <span class="comment">#匿名用户</span></span><br><span class="line">        <span class="string">'user'</span>: <span class="string">'10/minute'</span>, <span class="comment">#登录用户</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义功能类</p><p><strong>版本</strong></p><p>不需要自定义类，再setting里面配置好就可以了</p><p><strong>认证</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> exceptions</span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> BaseAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.settings <span class="keyword">import</span> api_settings</span><br><span class="line"><span class="keyword">from</span> api <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HulaQueryParamAuthentication</span><span class="params">(BaseAuthentication)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        # raise Exception(), 不在继续往下执行，直接返回给用户。</span></span><br><span class="line"><span class="string">        # return None ,本次认证完成，执行下一个认证</span></span><br><span class="line"><span class="string">        # return ('x',"x")，认证成功，不需要再继续执行其他认证了，继续往后权限、节流、视图函数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        token = request.query_params.get(<span class="string">'token'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> token:</span><br><span class="line">            <span class="keyword">raise</span> exceptions.AuthenticationFailed(&#123;<span class="string">'code'</span>:<span class="number">10002</span>,<span class="string">'error'</span>:<span class="string">"登录成功之后才能操作"</span>&#125;)</span><br><span class="line"></span><br><span class="line">        jwt_decode_handler = api_settings.JWT_DECODE_HANDLER</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = jwt_decode_handler(token)</span><br><span class="line">        <span class="keyword">except</span> jwt.ExpiredSignature:</span><br><span class="line">            <span class="keyword">raise</span> exceptions.AuthenticationFailed(&#123;<span class="string">'code'</span>:<span class="number">10003</span>,<span class="string">'error'</span>:<span class="string">"token已过期"</span>&#125;)</span><br><span class="line">        <span class="keyword">except</span> jwt.DecodeError:</span><br><span class="line">            <span class="keyword">raise</span> exceptions.AuthenticationFailed(&#123;<span class="string">'code'</span>:<span class="number">10004</span>,<span class="string">'error'</span>:<span class="string">"token格式错误"</span>&#125;)</span><br><span class="line">        <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">            <span class="keyword">raise</span> exceptions.AuthenticationFailed(&#123;<span class="string">'code'</span>:<span class="number">10005</span>,<span class="string">'error'</span>:<span class="string">"认证失败"</span>&#125;)</span><br><span class="line"></span><br><span class="line">        jwt_get_username_from_payload = api_settings.JWT_PAYLOAD_GET_USERNAME_HANDLER</span><br><span class="line">        username = jwt_get_username_from_payload(payload)</span><br><span class="line">        user_object = models.UserInfo.objects.filter(username=username).first()</span><br><span class="line">        <span class="keyword">return</span> (user_object,token)</span><br></pre></td></tr></table></figure><p><strong>权限</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> BasePermission</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> exceptions</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPermission</span><span class="params">(BasePermission)</span>:</span></span><br><span class="line">    <span class="comment">#自定义错误信息</span></span><br><span class="line">    message = &#123;<span class="string">'code'</span>: <span class="number">10001</span>, <span class="string">'error'</span>: <span class="string">'你没权限'</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_permission</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Return `True` if permission is granted, `False` otherwise.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> request.user:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># raise exceptions.PermissionDenied(&#123;'code': 10001, 'error': '你没权限'&#125;)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_object_permission</span><span class="params">(self, request, view, obj)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Return `True` if permission is granted, `False` otherwise.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p><strong>截流</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> SimpleRateThrottle</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnonThrottle</span><span class="params">(SimpleRateThrottle)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    截流：匿名用户使用IP</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">scope = <span class="string">'anon'</span>  <span class="comment"># 相当于设置了最大的访问次数和时间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cache_key</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line"><span class="keyword">if</span> request.user:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 返回None表示我不限制，登录用户我不管</span></span><br><span class="line"><span class="comment"># 匿名用户</span></span><br><span class="line"><span class="keyword">return</span> self.get_ident(request)  <span class="comment"># 返回一个唯一标识IP</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserThrottle</span><span class="params">(SimpleRateThrottle)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    截流：登录用户使用用户名</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">scope = <span class="string">'user'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cache_key</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line"><span class="comment"># 登录用户</span></span><br><span class="line"><span class="keyword">if</span> request.user:</span><br><span class="line"><span class="keyword">return</span> request.user</span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 返回NOne表示匿名用户我不管</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章导读：在这里我们将分为两部分来讲解:第一部分，我们将随着程序执行的顺序一步步的去分析源码(看源码不可跳读，必须一步步的走)；第二部分，我们使用一个实例完整的把这个使用流程展示出来。&lt;/p&gt;
&lt;p&gt;第一部分：源码的讲解&lt;/p&gt;
&lt;p&gt;路由&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; .views &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; account&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;urlpatterns = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    url(&lt;span class=&quot;string&quot;&gt;r&#39;^login/$&#39;&lt;/span&gt;,account.LoginView.as_view()),&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;视图类&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; rest_framework.views &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; APIView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LoginView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(APIView)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;	CBV视图类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;	&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;下面，我们将开始分析，&lt;strong&gt;login路由&lt;/strong&gt;进入查找到我们的&lt;strong&gt;account.LoginView&lt;/strong&gt;，接着执行LoginView视图类里面的&lt;strong&gt;as_view()&lt;/strong&gt;视图类，在该类里面找不到，接着找他的父类，如后就到&lt;strong&gt;APIView&lt;/strong&gt;父类里面查找，&lt;/p&gt;
    
    </summary>
    
    
      <category term="drf" scheme="https://pl1649947109.github.io/pl1649947109/tags/drf/"/>
    
  </entry>
  
  <entry>
    <title>第一讲——flask的快速入门与网站的搭建</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/19/%E4%B9%A6/flask/%E7%AC%AC%E4%B8%80%E8%AE%B2%E2%80%94%E2%80%94flask%E7%9A%84%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%8E%E7%BD%91%E7%AB%99%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/19/书/flask/第一讲——flask的快速入门与网站的搭建/</id>
    <published>2019-11-19T12:00:00.000Z</published>
    <updated>2019-11-20T04:09:37.546Z</updated>
    
    <content type="html"><![CDATA[<p>django是个大而全的框架，flask是一个轻量级的框架。</p><p>django内部为我们提供了非常多的组件：orm / session / cookie / admin / form / modelform / 路由 / 视图 / 模板 /  中间件 / 分页 / auth / contenttype  / 缓存 / 信号 / 多数据库连接 </p><p>flask框架本身没有太多的功能：路由/视图/模板(jinja2)/session/中间件 ，第三方组件非常齐全。<br>注意：<strong>django的请求处理是逐一封装和传递； flask的请求是利用上下文管理来实现的</strong>。 </p><a id="more"></a><h2 id="内容回顾"><a href="#内容回顾" class="headerlink" title="内容回顾"></a>内容回顾</h2><ol><li>什么是jwt？</li><li>cmdb的实现原理？</li><li>都用到了那些命令？</li><li>遇到过哪些bug？</li><li>什么是开封封闭原则？</li></ol><h2 id="今日概要"><a href="#今日概要" class="headerlink" title="今日概要"></a>今日概要</h2><ul><li>flask的快速使用</li><li>实现一个xx管理系统</li><li>蓝图</li></ul><h2 id="今日详细"><a href="#今日详细" class="headerlink" title="今日详细"></a>今日详细</h2><h3 id="1-flask快速使用"><a href="#1-flask快速使用" class="headerlink" title="1.flask快速使用"></a>1.flask快速使用</h3><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install flask</span><br></pre></td></tr></table></figure><h4 id="1-1-依赖wsgi-Werkzeug"><a href="#1-1-依赖wsgi-Werkzeug" class="headerlink" title="1.1 依赖wsgi Werkzeug"></a>1.1 依赖wsgi Werkzeug</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    print(<span class="string">'请求来了'</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run_simple(<span class="string">'127.0.0.1'</span>, <span class="number">5000</span>, func)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(object)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self,environ, start_response)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"xx"</span></span><br><span class="line">    </span><br><span class="line">app = Flask()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run_simple(<span class="string">'127.0.0.1'</span>, <span class="number">5000</span>, app)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(object)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self,environ, start_response)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"xx"</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        run_simple(<span class="string">'127.0.0.1'</span>, <span class="number">5000</span>, self)</span><br><span class="line">        </span><br><span class="line">app = Flask()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h4 id="1-2-快速使用flask"><a href="#1-2-快速使用flask" class="headerlink" title="1.2 快速使用flask"></a>1.2 快速使用flask</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建flask对象</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'login'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>flask框架是基于werkzeug的wsgi实现，flask自己没有wsgi。 </li><li>用户请求一旦到来，就会之 <code>app.__call__</code>方法 。 </li><li>写flaks标准流程</li></ul><h4 id="1-3-用户登录-amp-用户管理"><a href="#1-3-用户登录-amp-用户管理" class="headerlink" title="1.3 用户登录&amp;用户管理"></a>1.3 用户登录&amp;用户管理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, jsonify,request,redirect,url_for</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">DATA_DICT = &#123;</span><br><span class="line">    <span class="number">1</span>: &#123;<span class="string">'name'</span>:<span class="string">'陈硕'</span>,<span class="string">"age"</span>:<span class="number">73</span>&#125;,</span><br><span class="line">    <span class="number">2</span>: &#123;<span class="string">'name'</span>:<span class="string">'汪洋'</span>,<span class="string">"age"</span>:<span class="number">84</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="comment"># return '登录' # HttpResponse</span></span><br><span class="line">        <span class="comment"># return render_template('login.html') # render</span></span><br><span class="line">        <span class="comment"># return jsonify(&#123;'code':1000,'data':[1,2,3]&#125;) # JsonResponse</span></span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>)</span><br><span class="line">    user = request.form.get(<span class="string">'user'</span>)</span><br><span class="line">    pwd = request.form.get(<span class="string">'pwd'</span>)</span><br><span class="line">    <span class="keyword">if</span> user == <span class="string">'changxin'</span> <span class="keyword">and</span> pwd == <span class="string">"dsb"</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">'/index'</span>)</span><br><span class="line">    error = <span class="string">'用户名或密码错误'</span></span><br><span class="line">    <span class="comment"># return render_template('login.html',**&#123;'error':error&#125;)</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>,error=error)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index',endpoint='idx')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    data_dict = DATA_DICT</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>,data_dict=data_dict)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/edit',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">()</span>:</span></span><br><span class="line">    nid = request.args.get(<span class="string">'nid'</span>)</span><br><span class="line">    nid = int(nid)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"GET"</span>:</span><br><span class="line">        info = DATA_DICT[nid]</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'edit.html'</span>,info=info)</span><br><span class="line"></span><br><span class="line">    user = request.form.get(<span class="string">'user'</span>)</span><br><span class="line">    age = request.form.get(<span class="string">'age'</span>)</span><br><span class="line">    DATA_DICT[nid][<span class="string">'name'</span>] = user</span><br><span class="line">    DATA_DICT[nid][<span class="string">'age'</span>] = age</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'idx'</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/del/&lt;int:nid&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(nid)</span>:</span></span><br><span class="line">    <span class="keyword">del</span> DATA_DICT[nid]</span><br><span class="line">    <span class="comment"># return redirect('/index')</span></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">"idx"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li><p>flask路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/login',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>路由的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/login',methods=['GET','POST'],endpoint="login")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：endpoint不能重名</span></span><br></pre></td></tr></table></figure></li><li><p>动态路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index/&lt;name&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(name)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index/&lt;int:nid&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(nid)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>获取提交的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">request.args <span class="comment"># GET形式传递的参数</span></span><br><span class="line">request.form <span class="comment"># POST形式提交的参数</span></span><br></pre></td></tr></table></figure></li><li><p>返回数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">'模板文件'</span>)</span><br><span class="line"><span class="keyword">return</span> jsonify()</span><br><span class="line">reutrn redirect(<span class="string">'/index/'</span>) <span class="comment"># reutrn redirect(url_for('idx'))</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"...."</span></span><br></pre></td></tr></table></figure></li><li><p>模板处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; x &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> item <span class="keyword">in</span> list %&#125;</span><br><span class="line">&#123;&#123;item&#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="1-4-保存用户会话信息"><a href="#1-4-保存用户会话信息" class="headerlink" title="1.4 保存用户会话信息"></a>1.4 保存用户会话信息</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request,render_template,redirect,session</span><br><span class="line"><span class="meta">@app.route('/login', methods=["GET", "POST"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">"GET"</span>:</span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">'login.html'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">username = request.form.get(<span class="string">"username"</span>)</span><br><span class="line">password = request.form.get(<span class="string">"password"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行sql</span></span><br><span class="line"><span class="keyword">with</span> mysql() <span class="keyword">as</span> cursor:</span><br><span class="line">row_count = cursor.execute(<span class="string">"select * from userinfo"</span>)</span><br><span class="line"><span class="keyword">for</span> count <span class="keyword">in</span> range(row_count):</span><br><span class="line">userinfo_obj = cursor.fetchone()</span><br><span class="line">user = userinfo_obj.get(<span class="string">'username'</span>)</span><br><span class="line">pwd = userinfo_obj.get(<span class="string">'password'</span>)</span><br><span class="line"><span class="keyword">if</span> username == user <span class="keyword">and</span> password == pwd:</span><br><span class="line">                        <span class="comment">#登录成功，设置session，但是session不是封装在request里面，而是需要我们  导入</span></span><br><span class="line">session[<span class="string">'is_login'</span>] = <span class="literal">True</span></span><br><span class="line"><span class="keyword">return</span> redirect(<span class="string">"/listbook"</span>)</span><br><span class="line"></span><br><span class="line">error = <span class="string">"用户名或密码失败"</span></span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">'login.html'</span>, error=error)</span><br></pre></td></tr></table></figure><h3 id="2-蓝图（blue-print"><a href="#2-蓝图（blue-print" class="headerlink" title="2. 蓝图（blue print)"></a>2. 蓝图（blue print)</h3><p>构建业务功能可拆分的目录结构。</p><p>面试题：django的app和flask的蓝图有什么区别？（一样）</p><p>总路由：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .views.book <span class="keyword">import</span> books</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span><span class="params">()</span>:</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment">#蓝图注册</span></span><br><span class="line">app.register_blueprint(books)</span><br></pre></td></tr></table></figure><p>分路由（蓝图）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span>  Blueprint</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request,render_template,redirect,url_for</span><br><span class="line"></span><br><span class="line"><span class="comment">#注册app</span></span><br><span class="line">books = Blueprint(<span class="string">'book'</span>,__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@books.route('/listbook',methods = ["GET","POST"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listbook</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>注意：这里面是最容易出现重名问题的，所以在创建的时候一定要检查</strong></p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ol><li>flask和django的区别？</li><li>其他</li><li>flask的session是保存在：加密的形式保存在浏览器的cookie上。</li><li>装饰器相关<ul><li>编写装饰器，记得加functools</li><li>多个装饰器的应用</li></ul></li><li>蓝图</li></ol><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">flask中的配置文件是一个flask.config.Config对象（继承字典）,默认配置为：</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'DEBUG'</span>:                                get_debug_flag(default=<span class="literal">False</span>),  是否开启Debug模式</span><br><span class="line">        <span class="string">'TESTING'</span>:                              <span class="literal">False</span>,                          是否开启测试模式</span><br><span class="line">        <span class="string">'PROPAGATE_EXCEPTIONS'</span>:                 <span class="literal">None</span>,                          </span><br><span class="line">        <span class="string">'PRESERVE_CONTEXT_ON_EXCEPTION'</span>:        <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'SECRET_KEY'</span>:                           <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'PERMANENT_SESSION_LIFETIME'</span>:           timedelta(days=<span class="number">31</span>),</span><br><span class="line">        <span class="string">'USE_X_SENDFILE'</span>:                       <span class="literal">False</span>,</span><br><span class="line">        <span class="string">'LOGGER_NAME'</span>:                          <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'LOGGER_HANDLER_POLICY'</span>:               <span class="string">'always'</span>,</span><br><span class="line">        <span class="string">'SERVER_NAME'</span>:                          <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'APPLICATION_ROOT'</span>:                     <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'SESSION_COOKIE_NAME'</span>:                  <span class="string">'session'</span>,</span><br><span class="line">        <span class="string">'SESSION_COOKIE_DOMAIN'</span>:                <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'SESSION_COOKIE_PATH'</span>:                  <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'SESSION_COOKIE_HTTPONLY'</span>:              <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'SESSION_COOKIE_SECURE'</span>:                <span class="literal">False</span>,</span><br><span class="line">        <span class="string">'SESSION_REFRESH_EACH_REQUEST'</span>:         <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'MAX_CONTENT_LENGTH'</span>:                   <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'SEND_FILE_MAX_AGE_DEFAULT'</span>:            timedelta(hours=<span class="number">12</span>),</span><br><span class="line">        <span class="string">'TRAP_BAD_REQUEST_ERRORS'</span>:              <span class="literal">False</span>,</span><br><span class="line">        <span class="string">'TRAP_HTTP_EXCEPTIONS'</span>:                 <span class="literal">False</span>,</span><br><span class="line">        <span class="string">'EXPLAIN_TEMPLATE_LOADING'</span>:             <span class="literal">False</span>,</span><br><span class="line">        <span class="string">'PREFERRED_URL_SCHEME'</span>:                 <span class="string">'http'</span>,</span><br><span class="line">        <span class="string">'JSON_AS_ASCII'</span>:                        <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'JSON_SORT_KEYS'</span>:                       <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'JSONIFY_PRETTYPRINT_REGULAR'</span>:          <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'JSONIFY_MIMETYPE'</span>:                     <span class="string">'application/json'</span>,</span><br><span class="line">        <span class="string">'TEMPLATES_AUTO_RELOAD'</span>:                <span class="literal">None</span>,</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">方式一：</span><br><span class="line">    app.config[<span class="string">'DEBUG'</span>] = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">    PS： 由于Config对象本质上是字典，所以还可以使用app.config.update(...)</span><br><span class="line"> </span><br><span class="line">方式二：</span><br><span class="line">    app.config.from_pyfile(<span class="string">"python文件名称"</span>)</span><br><span class="line">        如：</span><br><span class="line">            settings.py</span><br><span class="line">                DEBUG = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">            app.config.from_pyfile(<span class="string">"settings.py"</span>)</span><br><span class="line"> </span><br><span class="line">    app.config.from_envvar(<span class="string">"环境变量名称"</span>)</span><br><span class="line">        环境变量的值为python文件名称名称，内部调用from_pyfile方法</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    app.config.from_json(<span class="string">"json文件名称"</span>)</span><br><span class="line">        JSON文件名称，必须是json格式，因为内部会执行json.loads</span><br><span class="line"> </span><br><span class="line">    app.config.from_mapping(&#123;<span class="string">'DEBUG'</span>:<span class="literal">True</span>&#125;)</span><br><span class="line">        字典格式</span><br><span class="line"> </span><br><span class="line">    app.config.from_object(<span class="string">"python类或类的路径"</span>)</span><br><span class="line"> </span><br><span class="line">        app.config.from_object(<span class="string">'pro_flask.settings.TestingConfig'</span>)</span><br><span class="line"> </span><br><span class="line">        settings.py</span><br><span class="line"> </span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">Config</span><span class="params">(object)</span>:</span></span><br><span class="line">                DEBUG = <span class="literal">False</span></span><br><span class="line">                TESTING = <span class="literal">False</span></span><br><span class="line">                DATABASE_URI = <span class="string">'sqlite://:memory:'</span></span><br><span class="line"> </span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">ProductionConfig</span><span class="params">(Config)</span>:</span></span><br><span class="line">                DATABASE_URI = <span class="string">'mysql://user@localhost/foo'</span></span><br><span class="line"> </span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">DevelopmentConfig</span><span class="params">(Config)</span>:</span></span><br><span class="line">                DEBUG = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">TestingConfig</span><span class="params">(Config)</span>:</span></span><br><span class="line">                TESTING = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">        PS: 从sys.path中已经存在路径开始写</span><br><span class="line">     </span><br><span class="line"> </span><br><span class="line">    PS: settings.py文件默认路径要放在程序root_path目录，如果instance_relative_config为<span class="literal">True</span>，则就是instance_path目录</span><br></pre></td></tr></table></figure><h3 id="路由系统"><a href="#路由系统" class="headerlink" title="路由系统"></a>路由系统</h3><ul><li>@app.route(‘/login’, methods=[‘GET’, ‘POST’])</li><li>@app.route(‘/user/<code>&lt;username&gt;</code>‘)</li><li>@app.route(‘/post/<code>&lt;int:post_id&gt;</code>‘)</li><li>@app.route(‘/post/<code>&lt;float:post_id&gt;</code>‘)</li><li>@app.route(‘/post/<code>&lt;path:path&gt;</code>‘)</li></ul><p>常用路由系统有以上的五种，所有的路由系统都是基于以下对应关系来处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DEFAULT_CONVERTERS = &#123;</span><br><span class="line">    <span class="string">'default'</span>:          UnicodeConverter,</span><br><span class="line">    <span class="string">'string'</span>:           UnicodeConverter,</span><br><span class="line">    <span class="string">'any'</span>:              AnyConverter,</span><br><span class="line">    <span class="string">'path'</span>:             PathConverter,</span><br><span class="line">    <span class="string">'int'</span>:              IntegerConverter,</span><br><span class="line">    <span class="string">'float'</span>:            FloatConverter,</span><br><span class="line">    <span class="string">'uuid'</span>:             UUIDConverter,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="请求与相响应"><a href="#请求与相响应" class="headerlink" title="请求与相响应"></a>请求与相响应</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> redirect</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> make_response</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login.html', methods=['GET', "POST"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 请求相关信息</span></span><br><span class="line">    <span class="comment"># request.method</span></span><br><span class="line">    <span class="comment"># request.args</span></span><br><span class="line">    <span class="comment"># request.form</span></span><br><span class="line">    <span class="comment"># request.values</span></span><br><span class="line">    <span class="comment"># request.cookies</span></span><br><span class="line">    <span class="comment"># request.headers</span></span><br><span class="line">    <span class="comment"># request.path</span></span><br><span class="line">    <span class="comment"># request.full_path</span></span><br><span class="line">    <span class="comment"># request.script_root</span></span><br><span class="line">    <span class="comment"># request.url</span></span><br><span class="line">    <span class="comment"># request.base_url</span></span><br><span class="line">    <span class="comment"># request.url_root</span></span><br><span class="line">    <span class="comment"># request.host_url</span></span><br><span class="line">    <span class="comment"># request.host</span></span><br><span class="line">    <span class="comment"># request.files</span></span><br><span class="line">    <span class="comment"># obj = request.files['the_file_name']</span></span><br><span class="line">    <span class="comment"># obj.save('/var/www/uploads/' + secure_filename(f.filename))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 响应相关信息</span></span><br><span class="line">    <span class="comment"># return "字符串"</span></span><br><span class="line">    <span class="comment"># return render_template('html模板路径',**&#123;&#125;)</span></span><br><span class="line">    <span class="comment"># return redirect('/index.html')</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># response = make_response(render_template('index.html'))</span></span><br><span class="line">    <span class="comment"># response是flask.wrappers.Response类型</span></span><br><span class="line">    <span class="comment"># response.delete_cookie('key')</span></span><br><span class="line">    <span class="comment"># response.set_cookie('key', 'value')</span></span><br><span class="line">    <span class="comment"># response.headers['X-Something'] = 'A value'</span></span><br><span class="line">    <span class="comment"># return response</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"内容"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h3 id="蓝图"><a href="#蓝图" class="headerlink" title="蓝图"></a>蓝图</h3><ul><li>蓝图URL前缀：xxx = Blueprint(‘account’, <strong>name</strong>,url_prefix=’/xxx’)</li><li>蓝图子域名：xxx = Blueprint(‘account’, <strong>name</strong>,subdomain=’admin’)</li></ul><h3 id="请求扩展"><a href="#请求扩展" class="headerlink" title="请求扩展"></a>请求扩展</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Request, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__, template_folder=<span class="string">'templates'</span>)</span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_first_request1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'before_first_request1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_first_request2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'before_first_request2'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_request1</span><span class="params">()</span>:</span></span><br><span class="line">    Request.nnn = <span class="number">123</span></span><br><span class="line">    print(<span class="string">'before_request1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_request2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'before_request2'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_request1</span><span class="params">(response)</span>:</span></span><br><span class="line">    print(<span class="string">'before_request1'</span>, response)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_request2</span><span class="params">(response)</span>:</span></span><br><span class="line">    print(<span class="string">'before_request2'</span>, response)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span><span class="params">(error)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'This page does not exist'</span>, <span class="number">404</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.template_global()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sb</span><span class="params">(a1, a2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a1 + a2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.template_filter()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db</span><span class="params">(a1, a2, a3)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a1 + a2 + a3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'hello.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;django是个大而全的框架，flask是一个轻量级的框架。&lt;/p&gt;
&lt;p&gt;django内部为我们提供了非常多的组件：orm / session / cookie / admin / form / modelform / 路由 / 视图 / 模板 /  中间件 / 分页 / auth / contenttype  / 缓存 / 信号 / 多数据库连接 &lt;/p&gt;
&lt;p&gt;flask框架本身没有太多的功能：路由/视图/模板(jinja2)/session/中间件 ，第三方组件非常齐全。&lt;br&gt;注意：&lt;strong&gt;django的请求处理是逐一封装和传递； flask的请求是利用上下文管理来实现的&lt;/strong&gt;。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="flask" scheme="https://pl1649947109.github.io/pl1649947109/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>async——源码解读</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/18/%E7%9F%A5%E8%AF%86%E6%89%A9%E5%B1%95/async%E2%80%94%E2%80%94%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/18/知识扩展/async——源码解读/</id>
    <published>2019-11-18T12:00:00.000Z</published>
    <updated>2019-12-20T08:29:19.049Z</updated>
    
    <content type="html"><![CDATA[<h3 id="内容解读"><a href="#内容解读" class="headerlink" title="内容解读"></a>内容解读</h3><p>PEP 492 - 具有异步和等待语法的协同程序</p><p>此PEP假定异步任务类似于stdlib模块<em>asyncio.events.AbstracEventLoop</em>的事件循环调度和协调。虽然PEP不依赖任何特定的事件循环实现，但它仅与使用yield作为调度器程序信号的协程类型相关，表明协同程序将等待直到事件完成。（如IO）</p><p>新的协程声明语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_data</span><span class="params">(db)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>协程的关键属性</strong></p><ul><li>async def函数总是协程，及时他们不包含awai表达式。</li><li>从异步函数中的表达式获得yield或yield是一个SystaxError。</li><li>在内部：<ul><li>CO_CORUTTNE用于标记本机协同程序。</li><li>CO_ITERABLE_COROUNTINE用于使基于生成器的协同程序与本机协同程序兼容。</li></ul></li><li>常规生成器在被调用时返回一个生成器对象；同样，协同程序返回一个协程对象。</li><li>StopIteration异常不会从协程传播出去，而是被RuntimeError替换。</li><li>当垃圾手机本机协程时，如果从未等待过，则会引发RuntimeWarning</li></ul><a id="more"></a><p><strong>等待表达</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">async def read_data(db):</span><br><span class="line">data = await db.fetch(&apos;SELECT...&apos;)</span><br></pre></td></tr></table></figure><p>await，*<em>类似于yield from *</em>,暂停执行的read_data协程，直到db.fetch等待完成并返回结果数据。</p><p><strong>更新运算符优先级表</strong></p><table><thead><tr><th align="left">Operator</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>yield</code> <code>x</code>, <code>yield from</code> <code>x</code></td><td align="left">Yield expression</td></tr><tr><td align="left"><code>lambda</code></td><td align="left">Lambda expression</td></tr><tr><td align="left"><code>if</code> – <code>else</code></td><td align="left">Conditional expression</td></tr><tr><td align="left"><code>or</code></td><td align="left">Boolean OR</td></tr><tr><td align="left"><code>and</code></td><td align="left">Boolean AND</td></tr><tr><td align="left"><code>not</code> <code>x</code></td><td align="left">Boolean NOT</td></tr><tr><td align="left"><code>in</code>, <code>not in</code>, <code>is</code>, <code>is not</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>,<code>!=</code>, <code>==</code></td><td align="left">Comparisons, including membership tests and identity tests</td></tr><tr><td align="left">`</td><td align="left">`</td></tr><tr><td align="left"><code>^</code></td><td align="left">Bitwise XOR</td></tr><tr><td align="left"><code>&amp;</code></td><td align="left">Bitwise AND</td></tr><tr><td align="left"><code>&lt;&lt;</code>, <code>&gt;&gt;</code></td><td align="left">Shifts</td></tr><tr><td align="left"><code>+</code>, <code>-</code></td><td align="left">Addition and subtraction</td></tr><tr><td align="left"><code>*</code>, <code>@</code>, <code>/</code>, <code>//</code>, <code>%</code></td><td align="left">Multiplication, matrix multiplication, division, remainder</td></tr><tr><td align="left"><code>+x</code>, <code>-x</code>, <code>~x</code></td><td align="left">Positive, negative, bitwise NOT</td></tr><tr><td align="left"><code>**</code></td><td align="left">Exponentiation</td></tr><tr><td align="left"><code>await</code> <code>x</code></td><td align="left">Await expression</td></tr><tr><td align="left"><code>x[index]</code>, <code>x[index:index]</code>,<code>x(arguments...)</code>, <code>x.attribute</code></td><td align="left">Subscription, slicing, call, attribute reference</td></tr><tr><td align="left"><code>(expressions...)</code>,<code>[expressions...]</code>, <code>{key:value...}</code>, <code>{expressions...}</code></td><td align="left">Binding or tuple display, list display, dictionary display,</td></tr></tbody></table><p><strong>等待表达式的实例</strong></p><table><thead><tr><th><code>if await fut: pass</code></th><th><code>if (await fut): pass</code></th></tr></thead><tbody><tr><td><code>if await fut + 1: pass</code></td><td><code>if (await fut) + 1: pass</code></td></tr><tr><td><code>pair = await fut, &#39;spam&#39;</code></td><td><code>pair = (await fut), &#39;spam&#39;</code></td></tr><tr><td><code>with await fut, open(): pass</code></td><td><code>with (await fut), open(): pass</code></td></tr><tr><td><code>await foo()[&#39;spam&#39;].baz()()</code></td><td><code>await ( foo()[&#39;spam&#39;].baz()() )</code></td></tr><tr><td><code>return await coro()</code></td><td><code>return ( await coro() )</code></td></tr><tr><td><code>res = await coro() ** 2</code></td><td><code>res = (await coro()) ** 2</code></td></tr><tr><td><code>func(a1=await coro(), a2=0)</code></td><td><code>func(a1=(await coro()), a2=0)</code></td></tr><tr><td><code>await foo() + await bar()</code></td><td><code>(await foo()) + (await bar())</code></td></tr><tr><td><code>-await foo()</code></td><td><code>-(await foo())</code></td></tr></tbody></table><p><strong>异步上下文管理器和异步</strong></p><p>一个异步上下文管理器是一个上下文管理器，它能够暂停其执行进入和退出的方法。为了实现这一点，提出了一种异步上下文管理器的新协议。添加了两个新的魔法：<strong>aenter</strong>和<strong>aexit</strong>。两者都必须返回等待。</p><p>实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncCotextManager</span>:</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">__aenter__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">await</span> log(<span class="string">"进入上下文"</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">__aexit__</span><span class="params">(self,exc_type,exc,tb)</span>:</span></span><br><span class="line"><span class="keyword">await</span> log(<span class="string">"退出上下文"</span>)</span><br></pre></td></tr></table></figure><p><strong>新语法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">with</span> EXPR <span class="keyword">as</span> VAR:</span><br><span class="line">BLOCK</span><br></pre></td></tr></table></figure><p>上述的新语法就相当于下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mgr = (EXPR)</span><br><span class="line">aexit = type(mgr).__aexit__</span><br><span class="line">aenter = type(mgr).__aenter__(mgr)</span><br><span class="line"></span><br><span class="line">VAR = <span class="keyword">await</span> aenter</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">BLOCK </span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">await</span> aexit(mgr, *sys.exc_info()):</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">await</span> aexit(mgr, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>解释：与常规的with语句一样，可以在单个async with 语句中指定多个上下文管理器。将没有<strong>aenter</strong>和<strong>aexit</strong>方法的常规上下文管理器传递给异步是错误的，在异步def函数之外使用async是一个SyntaxError。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>为什么异步和等待关键字？</p><p>很久之前C#就有了，还有很多其他的语言都有。这是一个巨大的好处，因为一些用户已经具有异步/等待的经验，并且因为它使用得在一个项目中使用多种语言更加容易。</p><p>async关键字的重要性？</p><p>虽然可以实现await表达式并将至少一个await处理所有函数作为协程程序处理，但这种方法使得API设计，代码重构和长时间支持变得更加困难</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">假装python只有<span class="keyword">await</span>关键字：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">await</span> log(...)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">important</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">await</span> fun()</span><br></pre></td></tr></table></figure><p>如果func()函数被重构并且有人重中删除所有await表达式，它将称为常规python函数，并且依赖它的所有代码，都将被破坏。为了缓解这个问题，必须引入类似于@asyncio.coroutine的装饰器。</p><p>为什么异步def?</p><p>对于一些人来说哦，async func()：传递语法可能看起来比async def name()更加有吸引力。但是另一方面，它打破了async def,async之间的对称性，其中async是一个修饰符，声明该语句是异步的他也与现在的语法更加一致。</p><p>为什么不重用现有的for和with语句？</p><p>现在基于生成器的协程和此前提议背后的愿景是让用户可以轻松查看代码可能被挂起的位置。使现在for和with语句识别异步迭代器和上下文管理器不可避免地创建隐式挂起点，这使得更加难推理代码。</p><p><strong>对比异步函数和生成器之间的性能差异</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">l = <span class="keyword">yield</span> <span class="keyword">from</span> bindary(n - <span class="number">1</span>)</span><br><span class="line">r = <span class="keyword">yield</span> fron bindary(n - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> l + <span class="number">1</span> +r</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">abinary</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">l = <span class="keyword">await</span> abinary(n - <span class="number">1</span>)</span><br><span class="line">r = <span class="keyword">await</span> abinary(n - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> l + <span class="number">1</span> + r</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeit</span><span class="params">(func,depth,repeat)</span>:</span></span><br><span class="line"> t0 = time.time()</span><br><span class="line"> <span class="keyword">for</span> _ <span class="keyword">in</span> range(repeat):</span><br><span class="line"> o = func(depth)</span><br><span class="line"> <span class="keyword">try</span>:</span><br><span class="line"> <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"> o.send(<span class="literal">None</span>)</span><br><span class="line"> <span class="keyword">except</span> StoIteration:</span><br><span class="line"> <span class="keyword">pass</span></span><br><span class="line"> t1 = time.time()</span><br><span class="line"> <span class="keyword">print</span> (<span class="string">'&#123;&#125;(&#123;&#125;) * &#123;&#125;: total &#123;:.3f&#125;s'</span>.format(</span><br><span class="line">        func.__name__, depth, repeat, t1-t0))</span><br><span class="line">结果：</span><br><span class="line">binary(<span class="number">19</span>) * <span class="number">30</span>: total <span class="number">53.321</span>s</span><br><span class="line">abinary(<span class="number">19</span>) * <span class="number">30</span>: total <span class="number">55.073</span>s</span><br><span class="line"></span><br><span class="line">binary(<span class="number">19</span>) * <span class="number">30</span>: total <span class="number">53.361</span>s</span><br><span class="line">abinary(<span class="number">19</span>) * <span class="number">30</span>: total <span class="number">51.360</span>s</span><br><span class="line"></span><br><span class="line">binary(<span class="number">19</span>) * <span class="number">30</span>: total <span class="number">49.438</span>s</span><br><span class="line">abinary(<span class="number">19</span>) * <span class="number">30</span>: total <span class="number">51.047</span>s</span><br></pre></td></tr></table></figure><p><strong>工作实例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">echo_server</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Serving on localhost:8000'</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.start_server(handle_connection,</span><br><span class="line">                               <span class="string">'localhost'</span>, <span class="number">8000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">handle_connection</span><span class="params">(reader, writer)</span>:</span></span><br><span class="line">    print(<span class="string">'New connection...'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = <span class="keyword">await</span> reader.read(<span class="number">8192</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">'Sending &#123;:.10&#125;... back'</span>.format(repr(data)))</span><br><span class="line">        writer.write(data)</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(echo_server())</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    loop.run_forever()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    loop.close()</span><br></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">之前使用Python的人往往纠缠在多线程，多进程，评判哪个效率更高？</span><br><span class="line">其实，相对于别家的协程和异步，不管多线程还是多进程效率都要被吊打，多线程之间切换耗费cpu寄存器资源，OS 调度的不太可控，多进程间通信不便的问题。</span><br><span class="line">后来Python改进了语法，引入了yiled from充当协程调度，后来有人根据这个新特性开发了第三方协程框架，Tornado，Gevent等。</span><br><span class="line">在这场效率之争里，Python这么受欢迎的语言，官方怎么能默不出声？所以Python之父深入简出3年，苦心钻研自家的协程，async/await和asyncio库，并放到Python3.5后成为远程原生的协程，</span><br><span class="line">对于类似爬虫这种延时的IO操作，协程是个大利器，优点很多，他可以在一个阻塞发生时，挂起当前程序，跑去执行其他程序，把事件注册到循环中，实现多程序并发，据说超越了10k限制，不过我没有试验过极限。</span><br><span class="line"></span><br><span class="line">作者：予岁月以文明</span><br><span class="line">链接：https://www.jianshu.com/p/7690edfe9ba5</span><br><span class="line">来源：简书</span><br></pre></td></tr></table></figure><p>协程一次发起100个请求（其实也是一个一个的发），不同的是协程发送一个请求，挂起，再发送下一个请求，再挂起，发起100个，挂起100个。然后等待100个返回，效率提升了100倍。可以理解为同时做了100件事情，相当于多线程，做到了自己调度而不是交给CPU，程序流程可控，节省资源，效率极大提升。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url)</span>:</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">await</span> response.text()</span><br><span class="line"><span class="comment">#await是挂起命令，挂起当前，执行response.text()，response.text()执行完后重新激活当前函数运行，返回。如果response迟迟不回，程序不会死等，而是去我们定义的任务循环中寻找另一个任务，如果没有循环任务，那就只能死等，毕竟总是要有返回结果的。如下图：</span></span><br></pre></td></tr></table></figure><p><img src="http://9017499461.linshutu.top/await.webp" alt></p><p>可以从上图中看出：任务一直在跑，每到一个地方await一次，然后返回await，直到最终全部返回。主程序结束。</p><p><strong>调用协程</strong></p><p>协程不能直接运行，组要把协程注册到事件循环（loop）.asyncio.get_event_loop方法可以创建一个事件循环，然后run_until_complete将协程注册到事件循环，并启动事件循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line">now = <span class="keyword">lambda</span>: time.time()</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">do_some_work</span><span class="params">(x)</span>：</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"Waiting:"</span>,x)</span></span></span><br><span class="line">start = now()</span><br><span class="line">coroutine = do_some_work(<span class="number">2</span>)</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(coroutine)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"TIME:"</span>,now() - start)</span><br><span class="line">结果：</span><br><span class="line">Waiting: <span class="number">2</span></span><br><span class="line">TIME: <span class="number">0.004952669143676758</span></span><br></pre></td></tr></table></figure><p><strong>关于task</strong></p><p>协程对象不能直接运行，在注册事件循环的时候，其实run_until_complete方法将协程包装成一个任务（task）对象。这个task保存了协程运行后的状态，用来未来获取协程的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line">now = <span class="keyword">lambda</span>:time.time()</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">do_some_work</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Waiting:"</span>,x)</span><br><span class="line">start = now()</span><br><span class="line">coroutine = do_some_work(<span class="number">2</span>)</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"></span><br><span class="line">task = loop.create_task(coroutine)</span><br><span class="line"><span class="keyword">print</span> (task)</span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line"><span class="keyword">print</span> (task)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"TIME:"</span>,now() - start)</span><br><span class="line">结果：</span><br><span class="line">&lt;Task pending coro=&lt;do_some_work()&gt;</span><br><span class="line">Waiting: <span class="number">2</span></span><br><span class="line">&lt;Task finished coro=&lt;do_some_work() done&gt;</span><br><span class="line">TIME: <span class="number">0.004949092864990234</span></span><br></pre></td></tr></table></figure><p><strong>从上面的代码可以看出来，创建task后，task在加入事件循环之前是pending状态，当loop事件循环开始，所有的pending状态的task都开始执行到await那一步（函数体内不是这样），不管loop里面是否调用。</strong></p><p>结论：asyncio.ensure_future(coroutine) 和 loop.create_task(coroutine)都可以创建一个task，run_until_complete的参数是一个futrue对象。当传入一个协程，其内部会自动封装成task，task是Future的子类。isinstance(task, asyncio.Future)将会输出True。<br><strong>两个例子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tic</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'at %1.1f seconds'</span> % (time.time() - start)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">gr1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># Busy waits for a second, but we don't want to stick around...</span></span><br><span class="line">    print(<span class="string">'gr1 started work: &#123;&#125;'</span>.format(tic()))</span><br><span class="line">    <span class="comment"># 暂停两秒，但不阻塞时间循环，下同</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'gr1 ended work: &#123;&#125;'</span>.format(tic()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">gr2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># Busy waits for a second, but we don't want to stick around...</span></span><br><span class="line">    print(<span class="string">'gr2 started work: &#123;&#125;'</span>.format(tic()))</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'gr2 Ended work: &#123;&#125;'</span>.format(tic()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">gr3</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Let's do some stuff while the coroutines are blocked, &#123;&#125;"</span>.format(tic()))</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"Done!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 事件循环</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"></span><br><span class="line"><span class="comment"># tasks中也可以使用asyncio.ensure_future(gr1())..</span></span><br><span class="line"><span class="comment">#tasks = [</span></span><br><span class="line"><span class="comment">#    loop.create_task(gr1()),</span></span><br><span class="line"><span class="comment">#    loop.create_task(gr2()),</span></span><br><span class="line"><span class="comment">#    loop.create_task(gr3())</span></span><br><span class="line"><span class="comment">#]</span></span><br><span class="line">tasks = [gr1(), gr2(), gr3() ]  <span class="comment">#简便的写法</span></span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">loop.close()</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">gr1 started work: at <span class="number">0.0</span> seconds</span><br><span class="line">gr2 started work: at <span class="number">0.0</span> seconds</span><br><span class="line">Let<span class="string">'s do some stuff while the coroutines are blocked, at 0.0 seconds</span></span><br><span class="line"><span class="string">Done!</span></span><br><span class="line"><span class="string">gr2 Ended work: at 2.0 seconds</span></span><br><span class="line"><span class="string">gr1 ended work: at 2.0 seconds</span></span><br><span class="line"><span class="string">解释：</span></span><br><span class="line"><span class="string">asyncio.wait(...)协程的参数是一个由future或协程构成的可迭代对象，wait会分别把各个协程包装进Task对象。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">生产者消费者模型</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> asyncio <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span> <span class="keyword">return</span> time.time()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(q)</span>:</span><span class="comment">#工作者消费队列</span></span><br><span class="line">    print(<span class="string">'Start worker'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:<span class="comment">#无限循环</span></span><br><span class="line">        start = now()</span><br><span class="line">        task = <span class="keyword">await</span> q.get()<span class="comment">#开始消费</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> task:</span><br><span class="line">            <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        print(<span class="string">'working on '</span>, int(task))</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(int(task))</span><br><span class="line">        q.task_done()<span class="comment">#队列通知</span></span><br><span class="line">        print(<span class="string">'Job Done for '</span>, task, now() - start)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">generate_run</span><span class="params">(q)</span>:</span><span class="comment">#生成worker线程函数</span></span><br><span class="line">    asyncio.ensure_future(worker(q))</span><br><span class="line">    asyncio.ensure_future(worker(q))<span class="comment">#先弄了两个worker去跑</span></span><br><span class="line">    <span class="keyword">await</span> q.join()主线程挂起等待队列完成通知</span><br><span class="line">    jobs = asyncio.Task.all_tasks()完成后收集所有线程，这里是<span class="number">3</span>个，算上自己</span><br><span class="line">    print(<span class="string">'是否已经关闭任务'</span>, asyncio.gather(*jobs).cancel())<span class="comment">#关闭线程方法，返回True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    q = Queue()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        q.put_nowait(str(i))<span class="comment">#一定要放入字符，数字0是空，队列一直不会结束。</span></span><br><span class="line">    loop.run_until_complete(generate_run(q))<span class="comment">#启动生成函数</span></span><br><span class="line"></span><br><span class="line">    loop.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;内容解读&quot;&gt;&lt;a href=&quot;#内容解读&quot; class=&quot;headerlink&quot; title=&quot;内容解读&quot;&gt;&lt;/a&gt;内容解读&lt;/h3&gt;&lt;p&gt;PEP 492 - 具有异步和等待语法的协同程序&lt;/p&gt;
&lt;p&gt;此PEP假定异步任务类似于stdlib模块&lt;em&gt;asyncio.events.AbstracEventLoop&lt;/em&gt;的事件循环调度和协调。虽然PEP不依赖任何特定的事件循环实现，但它仅与使用yield作为调度器程序信号的协程类型相关，表明协同程序将等待直到事件完成。（如IO）&lt;/p&gt;
&lt;p&gt;新的协程声明语法：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;read_data&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(db)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;协程的关键属性&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;async def函数总是协程，及时他们不包含awai表达式。&lt;/li&gt;
&lt;li&gt;从异步函数中的表达式获得yield或yield是一个SystaxError。&lt;/li&gt;
&lt;li&gt;在内部：&lt;ul&gt;
&lt;li&gt;CO_CORUTTNE用于标记本机协同程序。&lt;/li&gt;
&lt;li&gt;CO_ITERABLE_COROUNTINE用于使基于生成器的协同程序与本机协同程序兼容。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常规生成器在被调用时返回一个生成器对象；同样，协同程序返回一个协程对象。&lt;/li&gt;
&lt;li&gt;StopIteration异常不会从协程传播出去，而是被RuntimeError替换。&lt;/li&gt;
&lt;li&gt;当垃圾手机本机协程时，如果从未等待过，则会引发RuntimeWarning&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="知识扩展" scheme="https://pl1649947109.github.io/pl1649947109/tags/%E7%9F%A5%E8%AF%86%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>第七部分——算法部分</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/18/%E5%B0%8F%E7%BB%BF%E6%9C%AC/%E7%AC%AC%E4%B8%83%E9%83%A8%E5%88%86%E2%80%94%E2%80%94%E7%AE%97%E6%B3%95%E9%83%A8%E5%88%86/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/18/小绿本/第七部分——算法部分/</id>
    <published>2019-11-18T12:00:00.000Z</published>
    <updated>2019-11-18T16:13:40.510Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-顺序表、链表的区别及应用场景？"><a href="#1-顺序表、链表的区别及应用场景？" class="headerlink" title="1.顺序表、链表的区别及应用场景？"></a>1.顺序表、链表的区别及应用场景？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-哈希树的构造与应用场景？"><a href="#2-哈希树的构造与应用场景？" class="headerlink" title="2.哈希树的构造与应用场景？"></a>2.哈希树的构造与应用场景？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="3-B-Tree和B-Tree的区别？"><a href="#3-B-Tree和B-Tree的区别？" class="headerlink" title="3.B Tree和B+ Tree的区别？"></a>3.B Tree和B+ Tree的区别？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-什么是中序遍历？"><a href="#4-什么是中序遍历？" class="headerlink" title="4.什么是中序遍历？"></a>4.什么是中序遍历？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-什么是二叉树？"><a href="#5-什么是二叉树？" class="headerlink" title="5.什么是二叉树？"></a>5.什么是二叉树？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-手写快排；堆排；几种常用排序的算法复杂度是多少；快排平均复杂度多少，最坏情况如何优化"><a href="#6-手写快排；堆排；几种常用排序的算法复杂度是多少；快排平均复杂度多少，最坏情况如何优化" class="headerlink" title="6.手写快排；堆排；几种常用排序的算法复杂度是多少；快排平均复杂度多少，最坏情况如何优化"></a>6.手写快排；堆排；几种常用排序的算法复杂度是多少；快排平均复杂度多少，最坏情况如何优化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="7-手写：已知一个长度n的无序列表，元素均是数字，要求把所有间隔为d的组合找出来，你写的解法算法复杂度多少"><a href="#7-手写：已知一个长度n的无序列表，元素均是数字，要求把所有间隔为d的组合找出来，你写的解法算法复杂度多少" class="headerlink" title="7.手写：已知一个长度n的无序列表，元素均是数字，要求把所有间隔为d的组合找出来，你写的解法算法复杂度多少"></a>7.手写：已知一个长度n的无序列表，元素均是数字，要求把所有间隔为d的组合找出来，你写的解法算法复杂度多少</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-手写：一个列表A-A1，A2，…-An-，要求把列表中所有的组合情况打印出来；"><a href="#8-手写：一个列表A-A1，A2，…-An-，要求把列表中所有的组合情况打印出来；" class="headerlink" title="8.手写：一个列表A=[A1，A2，…,An]，要求把列表中所有的组合情况打印出来；"></a>8.手写：一个列表A=[A1，A2，…,An]，要求把列表中所有的组合情况打印出来；</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="9-手写：用一行python写出1-2-3-…-10-8"><a href="#9-手写：用一行python写出1-2-3-…-10-8" class="headerlink" title="9.手写：用一行python写出1+2+3+…+10**8"></a>9.手写：用一行python写出1+2+3+…+10**8</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="10-手写python：用递归的方式判断字符串是否为回文"><a href="#10-手写python：用递归的方式判断字符串是否为回文" class="headerlink" title="10.手写python：用递归的方式判断字符串是否为回文"></a>10.手写python：用递归的方式判断字符串是否为回文</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="11-单向链表长度未知，如何判断其中是否有环"><a href="#11-单向链表长度未知，如何判断其中是否有环" class="headerlink" title="11.单向链表长度未知，如何判断其中是否有环"></a>11.单向链表长度未知，如何判断其中是否有环</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="12-单向链表如何使用快速排序算法进行排序"><a href="#12-单向链表如何使用快速排序算法进行排序" class="headerlink" title="12.单向链表如何使用快速排序算法进行排序"></a>12.单向链表如何使用快速排序算法进行排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="13-手写：一个长度n的无序数字元素列表，如何求中位数，如何尽快的估算中位数，"><a href="#13-手写：一个长度n的无序数字元素列表，如何求中位数，如何尽快的估算中位数，" class="headerlink" title="13.手写：一个长度n的无序数字元素列表，如何求中位数，如何尽快的估算中位数，"></a>13.手写：一个长度n的无序数字元素列表，如何求中位数，如何尽快的估算中位数，</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="14-你的算法复杂度是多少；"><a href="#14-你的算法复杂度是多少；" class="headerlink" title="14.你的算法复杂度是多少；"></a>14.你的算法复杂度是多少；</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="15-如何遍历一个内部未知的文件夹（两种树的优先遍历方式）"><a href="#15-如何遍历一个内部未知的文件夹（两种树的优先遍历方式）" class="headerlink" title="15.如何遍历一个内部未知的文件夹（两种树的优先遍历方式）"></a>15.如何遍历一个内部未知的文件夹（两种树的优先遍历方式）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="16-1-1-2-2-3-4-4-5-5-5-找出不重复的元素（黄包车）"><a href="#16-1-1-2-2-3-4-4-5-5-5-找出不重复的元素（黄包车）" class="headerlink" title="16.[1,1,2,2,3,4,4,5,5,5] 找出不重复的元素（黄包车）"></a>16.[1,1,2,2,3,4,4,5,5,5] 找出不重复的元素（黄包车）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="17-反转链表，要求时间复杂度O-N-，空间复杂度O-1-（火币）"><a href="#17-反转链表，要求时间复杂度O-N-，空间复杂度O-1-（火币）" class="headerlink" title="17.反转链表，要求时间复杂度O(N)，空间复杂度O(1) （火币）"></a>17.反转链表，要求时间复杂度O(N)，空间复杂度O(1) （火币）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="18-非递归实现斐波那契数列-（爱奇艺）"><a href="#18-非递归实现斐波那契数列-（爱奇艺）" class="headerlink" title="18.非递归实现斐波那契数列 （爱奇艺）"></a>18.非递归实现斐波那契数列 （爱奇艺）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="19-使用递归的方式实现斐波那契数列"><a href="#19-使用递归的方式实现斐波那契数列" class="headerlink" title="19.使用递归的方式实现斐波那契数列"></a>19.使用递归的方式实现斐波那契数列</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="20-这一周股市价格为-2-6-1-4-8-，求哪一天买入哪一天卖出，可获得最大收益，最大收益为多少-（爱奇艺）"><a href="#20-这一周股市价格为-2-6-1-4-8-，求哪一天买入哪一天卖出，可获得最大收益，最大收益为多少-（爱奇艺）" class="headerlink" title="20.这一周股市价格为[2,6,1,4,8]，求哪一天买入哪一天卖出，可获得最大收益，最大收益为多少 （爱奇艺）"></a>20.这一周股市价格为[2,6,1,4,8]，求哪一天买入哪一天卖出，可获得最大收益，最大收益为多少 （爱奇艺）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="21-一个整形无序数组，里面三个数只和等于一个目标值，求这三个数-（小米）"><a href="#21-一个整形无序数组，里面三个数只和等于一个目标值，求这三个数-（小米）" class="headerlink" title="21.一个整形无序数组，里面三个数只和等于一个目标值，求这三个数 （小米）"></a>21.一个整形无序数组，里面三个数只和等于一个目标值，求这三个数 （小米）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="22-链表问题-（小米）"><a href="#22-链表问题-（小米）" class="headerlink" title="22.链表问题 （小米）"></a>22.链表问题 （小米）</h4><p>input:(2-&gt;4-&gt;3)+(5-&gt;6-&gt;-&gt;4)<br>output:7-&gt;0-&gt;8<br>342+465 = 807</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="23-扑克牌问题-（小米）"><a href="#23-扑克牌问题-（小米）" class="headerlink" title="23.扑克牌问题 （小米）"></a>23.扑克牌问题 （小米）</h4><p>有十张扑克牌，从上面开始抽，抽出一张放桌子上，然后再抽出一张放扑克牌的最下面，这样循环往复的操作，直到手里的牌都没有了。这时，桌子上牌的顺序正好是1 2 3 4 5 6 7 8 9 10。要求写代码求出原顺序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="24-手写大顶堆-（linkedMe）"><a href="#24-手写大顶堆-（linkedMe）" class="headerlink" title="24.手写大顶堆 （linkedMe）"></a>24.手写大顶堆 （linkedMe）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="25-手写LRU-算法-（火币）"><a href="#25-手写LRU-算法-（火币）" class="headerlink" title="25.手写LRU 算法 （火币）"></a>25.手写LRU 算法 （火币）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="26-字符串相加-（滴滴）"><a href="#26-字符串相加-（滴滴）" class="headerlink" title="26.字符串相加 （滴滴）"></a>26.字符串相加 （滴滴）</h4><p>两个数字类型的字符串，直接转int或者double肯定都放不下，然后求这两个数的和，返回值还是字符串，15分钟时间，要求无Bug</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="27-寻找目标值位置-（滴滴）"><a href="#27-寻找目标值位置-（滴滴）" class="headerlink" title="27.寻找目标值位置 （滴滴）"></a>27.寻找目标值位置 （滴滴）</h4><p>有一个二维数组，数组横向有序，纵向有序，求目标值的位置，10分钟时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="28-求字符串“efabcbaefehiabcba”中最长的回文数，不去重（美团）"><a href="#28-求字符串“efabcbaefehiabcba”中最长的回文数，不去重（美团）" class="headerlink" title="28.求字符串“efabcbaefehiabcba”中最长的回文数，不去重（美团）"></a>28.求字符串“efabcbaefehiabcba”中最长的回文数，不去重（美团）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="29-反转int类型的值x，不要借用String，只用int-即可。-amp-amp-针对该程序，写出其应有的测试用例-（美团）"><a href="#29-反转int类型的值x，不要借用String，只用int-即可。-amp-amp-针对该程序，写出其应有的测试用例-（美团）" class="headerlink" title="29.反转int类型的值x，不要借用String，只用int 即可。&amp;&amp; 针对该程序，写出其应有的测试用例 （美团）"></a>29.反转int类型的值x，不要借用String，只用int 即可。&amp;&amp; 针对该程序，写出其应有的测试用例 （美团）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="30-哨兵机制、选举算法"><a href="#30-哨兵机制、选举算法" class="headerlink" title="30.哨兵机制、选举算法"></a>30.哨兵机制、选举算法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="31-HashMap、concurrentHashMap的区别及底层实现、HashMap和HashTable-的区别？"><a href="#31-HashMap、concurrentHashMap的区别及底层实现、HashMap和HashTable-的区别？" class="headerlink" title="31.HashMap、concurrentHashMap的区别及底层实现、HashMap和HashTable 的区别？"></a>31.HashMap、concurrentHashMap的区别及底层实现、HashMap和HashTable 的区别？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="32-什么是红黑树，什么是B-Tree，为什么HashMap中用红黑树不用其他树？（B-树还是很多公司考的）"><a href="#32-什么是红黑树，什么是B-Tree，为什么HashMap中用红黑树不用其他树？（B-树还是很多公司考的）" class="headerlink" title="32.什么是红黑树，什么是B-Tree，为什么HashMap中用红黑树不用其他树？（B+树还是很多公司考的）"></a>32.什么是红黑树，什么是B-Tree，为什么HashMap中用红黑树不用其他树？（B+树还是很多公司考的）</h4><p>对MySQL索引的理解，为什么MySQL索引中用B+Tree，不用B-Tree 或者其他树，为什么不用hash 索引？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="33-实现一个二分查找"><a href="#33-实现一个二分查找" class="headerlink" title="33.实现一个二分查找"></a>33.实现一个二分查找</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="34-简单描述一下快速排序的原理"><a href="#34-简单描述一下快速排序的原理" class="headerlink" title="34.简单描述一下快速排序的原理"></a>34.简单描述一下快速排序的原理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实现以下的算法:</p><h4 id="35-链表的冒泡排序"><a href="#35-链表的冒泡排序" class="headerlink" title="35.链表的冒泡排序"></a>35.链表的冒泡排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="36-树的顺序遍历"><a href="#36-树的顺序遍历" class="headerlink" title="36.树的顺序遍历"></a>36.树的顺序遍历</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="37-顺序表"><a href="#37-顺序表" class="headerlink" title="37.顺序表"></a>37.顺序表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>逻辑回归</p><p>决策树</p><p>随机森林</p><p>神经网络</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-顺序表、链表的区别及应用场景？&quot;&gt;&lt;a href=&quot;#1-顺序表、链表的区别及应用场景？&quot; class=&quot;headerlink&quot; title=&quot;1.顺序表、链表的区别及应用场景？&quot;&gt;&lt;/a&gt;1.顺序表、链表的区别及应用场景？&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;2-哈希树的构造与应用场景？&quot;&gt;&lt;a href=&quot;#2-哈希树的构造与应用场景？&quot; class=&quot;headerlink&quot; title=&quot;2.哈希树的构造与应用场景？&quot;&gt;&lt;/a&gt;2.哈希树的构造与应用场景？&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="小绿本" scheme="https://pl1649947109.github.io/pl1649947109/tags/%E5%B0%8F%E7%BB%BF%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>EJS文件</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/17/%E7%9F%A5%E8%AF%86%E6%89%A9%E5%B1%95/EJS%E6%96%87%E4%BB%B6/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/17/知识扩展/EJS文件/</id>
    <published>2019-11-17T12:00:00.000Z</published>
    <updated>2019-11-16T15:41:41.820Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是EJS？"><a href="#什么是EJS？" class="headerlink" title="什么是EJS？"></a>什么是EJS？</h3><p>“E” 代表 “effective”，即【高效】。EJS 是一套简单的模板语言，帮你利用普通的 JavaScript 代码生成 HTML 页面。EJS 没有如何组织内容的教条；也没有再造一套迭代和控制流语法；有的只是普通的 JavaScript 代码而已。</p><h3 id="标签的含义"><a href="#标签的含义" class="headerlink" title="标签的含义"></a>标签的含义</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%:脚本标签，用于流程控制</span><br><span class="line">&lt;%_:删除其前面的空格符</span><br><span class="line">&lt;%=:输出数据到模板（输出的是转移HTML标签）</span><br><span class="line">&lt;%-:输出非转移的数据到模板</span><br><span class="line">&lt;%#:注释标签</span><br><span class="line">&lt;%%:输出字符串&lt;%</span><br><span class="line">%&gt;:一般结束标签</span><br><span class="line">-%&gt;:删除紧随其后的换行符</span><br><span class="line">_%&gt;:将结束标签后面的空格符号删除</span><br><span class="line">&lt;??&gt;:自定义分隔符，替换&lt;%%&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是EJS？&quot;&gt;&lt;a href=&quot;#什么是EJS？&quot; class=&quot;headerlink&quot; title=&quot;什么是EJS？&quot;&gt;&lt;/a&gt;什么是EJS？&lt;/h3&gt;&lt;p&gt;“E” 代表 “effective”，即【高效】。EJS 是一套简单的模板语言，帮你利用普通的 Ja
      
    
    </summary>
    
    
      <category term="知识扩展" scheme="https://pl1649947109.github.io/pl1649947109/tags/%E7%9F%A5%E8%AF%86%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>buffer和cache的区别</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/16/%E7%9F%A5%E8%AF%86%E6%89%A9%E5%B1%95/buffer%E5%92%8Ccache%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/16/知识扩展/buffer和cache的区别/</id>
    <published>2019-11-16T12:00:00.000Z</published>
    <updated>2019-11-16T15:41:26.978Z</updated>
    
    <content type="html"><![CDATA[<p>1 ,buffer（缓冲）</p><p><strong>是为了提高内存和硬盘（或其他I/O设备）之间的数据交换的速度而设计的。</strong></p><p>2, cache（缓存）</p><p><strong>从CPU角度考虑，是为了提高cpu和内存之间的数据交换速度而设计的，例如平常见到的一级缓存、二级缓存、三级缓存。</strong></p><a id="more"></a><p>cpu在执行程序所用的指令和读数据都是针对内存的，也就是从内存中取得的。由于内存读写速度慢，为了提高cpu和内存之间数据交换的速度，在cpu和内存之间增加了cache，它的速度比内存快，但是造价高，又由于在cpu内不能集成太多集成电路，所以一般cache比较小，为了进一步提高速度，又增加了二级cache，甚至三级cache，它是根据程序的局部性原理而设计的，就是cpu执行的指令和访问的数据往往在集中的某一块，所以把这块内容放入cache后，cpu就不用在访问内存了，这就提高了访问速度。当然若cache中没有cpu所需要的内容，还是要访问内存的。</p><p>从内存读取与磁盘读取角度考虑，cache可以理解为操作系统为了更高的读取效率，更多的使用内存来缓存可能被再次访问的数据。</p><p>缓冲（buffers）是根据磁盘的读写设计的，把分散的写操作集中进行，减少磁盘碎片和硬盘的反复寻道，从而提高系统性能。linux有一个守护进程定期清空缓冲内容（即写入磁盘），也可以通过sync命令手动清空缓冲。</p><p>简单来说，buffer是即将要被写入磁盘的，而cache是被从磁盘中读出来的。 buffer是由各种进程分配的，被用在如输入队列等方面。一个简单的例子如某个进程要求有多个字段读入，在所有字段被读入完整之前，进程把先前读入的字段放在buffer中保存。</p><p>cache经常被用在磁盘的I/O请求上，如果有多个进程都要访问某个文件，于是该文件便被做成cache以方便下次被访问，这样可提高系统性能。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1 ,buffer（缓冲）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;是为了提高内存和硬盘（或其他I/O设备）之间的数据交换的速度而设计的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2, cache（缓存）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从CPU角度考虑，是为了提高cpu和内存之间的数据交换速度而设计的，例如平常见到的一级缓存、二级缓存、三级缓存。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="知识扩展" scheme="https://pl1649947109.github.io/pl1649947109/tags/%E7%9F%A5%E8%AF%86%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>第六部分——drf</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/16/%E5%B0%8F%E7%BB%BF%E6%9C%AC/%E7%AC%AC%E5%85%AD%E9%83%A8%E5%88%86%E2%80%94%E2%80%94drf/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/16/小绿本/第六部分——drf/</id>
    <published>2019-11-16T12:00:00.000Z</published>
    <updated>2019-11-16T15:55:42.368Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-装饰器"><a href="#1-装饰器" class="headerlink" title="1.装饰器"></a>1.装饰器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@outer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(a1)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">index()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(a1)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这种方式执行的和装饰器的效果是一样的，但是这种方法要看懂，因为源码里面有这样写的</span></span><br><span class="line">index = outer(index)</span><br><span class="line"><span class="comment">#现在index = inner</span></span><br><span class="line"></span><br><span class="line">index()</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="2-django中可以免除csrftoken认证"><a href="#2-django中可以免除csrftoken认证" class="headerlink" title="2.django中可以免除csrftoken认证"></a>2.django中可以免除csrftoken认证</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># index = csrf_exempt(index)</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^index/$'</span>,index),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在drf中的应用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^login/$'</span>,account.LoginView.as_view()),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APIView</span><span class="params">(View)</span>:</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">as_view</span><span class="params">(cls, **initkwargs)</span>:</span></span><br><span class="line">        view = super().as_view(**initkwargs)</span><br><span class="line">        view.cls = cls</span><br><span class="line">        view.initkwargs = initkwargs</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 注意：基于会话的身份验证是明确的CSRF验证，</span></span><br><span class="line">        <span class="comment"># 所有其他身份验证都是CSRF豁免的。</span></span><br><span class="line">        <span class="keyword">return</span> csrf_exempt(view)</span><br></pre></td></tr></table></figure><h4 id="3-面向对象中基于继承-异常处理来做的约束"><a href="#3-面向对象中基于继承-异常处理来做的约束" class="headerlink" title="3.面向对象中基于继承+异常处理来做的约束"></a>3.面向对象中基于继承+异常处理来做的约束</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseVersioning</span>:</span></span><br><span class="line">    <span class="comment">#父类约束</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">determine_version</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">"must be implemented"</span>)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">URLPathVersioning</span><span class="params">(BaseVersioning)</span>:</span></span><br><span class="line">    <span class="comment">#子类执行父类约束方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">determine_version</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        version = kwargs.get(self.version_param, self.default_version)</span><br><span class="line">        <span class="keyword">if</span> version <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            version = self.default_version</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_allowed_version(version):</span><br><span class="line">            <span class="keyword">raise</span> exceptions.NotFound(self.invalid_version_message)</span><br><span class="line">        <span class="keyword">return</span> version</span><br></pre></td></tr></table></figure><h4 id="4-面向对象封装"><a href="#4-面向对象封装" class="headerlink" title="4.面向对象封装"></a>4.面向对象封装</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">self.name = name</span><br><span class="line">self.age = age </span><br><span class="line"></span><br><span class="line">obj = Foo(<span class="string">'pl'</span>,<span class="number">18</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APIView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line"><span class="comment">#封装request</span></span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line">        request = self.initialize_request(request, *args, **kwargs)</span><br><span class="line">        <span class="comment">#返回封装的request，但是现在的request里面包含了更多的内容</span></span><br><span class="line">        self.request = request</span><br><span class="line">...</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize_request</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns the initial request object.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        parser_context = self.get_parser_context(request)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Request(</span><br><span class="line">            request,</span><br><span class="line">            parsers=self.get_parsers(),</span><br><span class="line">            authenticators=self.get_authenticators(), <span class="comment"># [MyAuthentication(),]</span></span><br><span class="line">            negotiator=self.get_content_negotiator(),</span><br><span class="line">            parser_context=parser_context</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><h4 id="5-面向对象继承"><a href="#5-面向对象继承" class="headerlink" title="5.面向对象继承"></a>5.面向对象继承</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">View</span><span class="params">(object)</span>:</span></span><br><span class="line">   <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APIView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self)</span>:</span></span><br><span class="line">        method = getattr(self,<span class="string">'get'</span>)</span><br><span class="line">        method()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericAPIView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    serilizer_class = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_seriliser_class</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.serilizer_class</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListModelMixin</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        ser_class = self.get_seriliser_class()</span><br><span class="line">        print(ser_class)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListAPIView</span><span class="params">(ListModelMixin,GenericAPIView)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfoView</span><span class="params">(ListAPIView)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_seriliser_class</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"咩咩"</span></span><br><span class="line"></span><br><span class="line">view = UserInfoView()</span><br><span class="line">view.dispatch()</span><br></pre></td></tr></table></figure><h4 id="6-反射"><a href="#6-反射" class="headerlink" title="6.反射"></a>6.反射</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">View</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 通过反射的方式去执行method方法</span></span><br><span class="line">        <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">            handler = getattr(self, request.method.lower(), self.http_method_not_allowed)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            handler = self.http_method_not_allowed</span><br><span class="line">        <span class="keyword">return</span> handler(request, *args, **kwargs)</span><br></pre></td></tr></table></figure><h4 id="7-发送ajax请求"><a href="#7-发送ajax请求" class="headerlink" title="7.发送ajax请求"></a>7.发送ajax请求</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url:&apos;地址&apos;,</span><br><span class="line">type:&apos;GET&apos;,</span><br><span class="line">data:&#123;...&#125;,</span><br><span class="line">success:function(arg)&#123;</span><br><span class="line">console.log(arg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="8-浏览器具有-“同源策略的限制”，导致-发送ajax请求-跨域-存在无法获取数据。"><a href="#8-浏览器具有-“同源策略的限制”，导致-发送ajax请求-跨域-存在无法获取数据。" class="headerlink" title="8.浏览器具有 “同源策略的限制”，导致 发送ajax请求 + 跨域 存在无法获取数据。"></a>8.浏览器具有 “同源策略的限制”，导致 <code>发送ajax请求</code> + <code>跨域</code> 存在无法获取数据。</h4><ul><li>3个不同：协议、域名、端口号</li><li>简单请求，发送一次请求。</li><li>复杂请求，先options请求做预检，然后再发送真正请求</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>常鑫的网站<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点我"</span> <span class="attr">onclick</span>=<span class="string">"sendMsg()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点他"</span> <span class="attr">onclick</span>=<span class="string">"sendRemoteMsg()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">sendMsg</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                url:<span class="string">'/msg/'</span>,</span></span><br><span class="line"><span class="javascript">                type:<span class="string">'GET'</span>,</span></span><br><span class="line"><span class="javascript">                success:<span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(arg);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">sendRemoteMsg</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                url:<span class="string">'http://127.0.0.1:8002/json/'</span>,</span></span><br><span class="line"><span class="javascript">                type:<span class="string">'GET'</span>,</span></span><br><span class="line"><span class="javascript">                success:<span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(arg);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="9-如何解决ajax-跨域？"><a href="#9-如何解决ajax-跨域？" class="headerlink" title="9.如何解决ajax+跨域？"></a>9.如何解决ajax+跨域？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CORS，跨站资源共享，本质：设置响应头。</span><br></pre></td></tr></table></figure><h4 id="10-常见的Http请求方法"><a href="#10-常见的Http请求方法" class="headerlink" title="10.常见的Http请求方法"></a>10.常见的Http请求方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">get</span><br><span class="line">post</span><br><span class="line">put</span><br><span class="line">patch</span><br><span class="line">delete</span><br><span class="line">options:对于跨域时的预检</span><br></pre></td></tr></table></figure><h4 id="11-http请求中Content-type请求头"><a href="#11-http请求中Content-type请求头" class="headerlink" title="11.http请求中Content-type请求头"></a>11.http请求中Content-type请求头</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">情况一：</span><br><span class="line">    content-type:x-www-form-urlencode</span><br><span class="line">    name=alex&amp;age=<span class="number">19</span>&amp;xx=<span class="number">10</span></span><br><span class="line"></span><br><span class="line">request.POST和request.body中均有值。</span><br><span class="line"></span><br><span class="line">情况二：</span><br><span class="line">content-type:application/json</span><br><span class="line">    &#123;<span class="string">"name"</span>:<span class="string">"ALex"</span>,<span class="string">"Age"</span>:<span class="number">19</span>&#125;</span><br><span class="line">    </span><br><span class="line">    request.POST没值</span><br><span class="line">    request.body有值。</span><br></pre></td></tr></table></figure><h4 id="12-django中获取空Queryset"><a href="#12-django中获取空Queryset" class="headerlink" title="12.django中获取空Queryset"></a>12.django中获取空Queryset</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models.User.object.all().none()</span><br></pre></td></tr></table></figure><h4 id="13-基于django的fbv和cbv都能实现遵循restful规范的接口"><a href="#13-基于django的fbv和cbv都能实现遵循restful规范的接口" class="headerlink" title="13.基于django的fbv和cbv都能实现遵循restful规范的接口"></a>13.基于django的fbv和cbv都能实现遵循restful规范的接口</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.metho == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">()</span>...</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    <span class="title">def</span> <span class="title">post</span>...</span></span><br></pre></td></tr></table></figure><h4 id="14-基于django-rest-framework框架实现restful-api的开发"><a href="#14-基于django-rest-framework框架实现restful-api的开发" class="headerlink" title="14.基于django rest framework框架实现restful api的开发"></a>14.基于django rest framework框架实现restful api的开发</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- 免除csrf认证</span><br><span class="line">- 视图（三种继承：APIView、ListAPIView、ListModelMinx）</span><br><span class="line">- 版本</span><br><span class="line">- 认证</span><br><span class="line">- 权限</span><br><span class="line">- 节流</span><br><span class="line">- 解析器</span><br><span class="line">- 筛选器</span><br><span class="line">- 分页</span><br><span class="line">- 序列化</span><br><span class="line">- 渲染器</span><br></pre></td></tr></table></figure><h4 id="15-简述drf中认证流程？"><a href="#15-简述drf中认证流程？" class="headerlink" title="15.简述drf中认证流程？"></a>15.简述drf中认证流程？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- 如何编写？写类并实现authenticators</span><br><span class="line">　　请求进来认证需要编写一个类，类里面有一个authenticators方法，我们可以自定义这个方法，可以定制3类返回值。</span><br><span class="line">　　成功返回元组，返回none为匿名用户，抛出异常为认证失败。</span><br><span class="line"></span><br><span class="line">源码流程：请求进来先走dispatch方法，然后封装的request对象会执行user方法，由user触发authenticators认证流程</span><br><span class="line">- 方法中可以定义三种返回值：</span><br><span class="line">    - （user,auth），认证成功</span><br><span class="line">    - None , 匿名用户</span><br><span class="line">    - 异常 ，认证失败</span><br><span class="line">- 流程：</span><br><span class="line">    - dispatch </span><br><span class="line">    - 再去request中进行认证处理</span><br></pre></td></tr></table></figure><h4 id="16-简述drf中节流的实现原理以及过程？匿名用户-非匿名用户-如何实现频率限制？"><a href="#16-简述drf中节流的实现原理以及过程？匿名用户-非匿名用户-如何实现频率限制？" class="headerlink" title="16.简述drf中节流的实现原理以及过程？匿名用户/非匿名用户 如何实现频率限制？"></a>16.简述drf中节流的实现原理以及过程？匿名用户/非匿名用户 如何实现频率限制？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 对匿名用户，根据用户IP或代理IP作为标识进行记录，为每个用户在redis中建一个列表</span><br><span class="line">    &#123;</span><br><span class="line">        throttle_1.1.1.1:[1526868876.497521,152686885.497521...]，</span><br><span class="line">        throttle_1.1.1.2:[1526868876.497521,152686885.497521...]，</span><br><span class="line">        throttle_1.1.1.3:[1526868876.497521,152686885.497521...]，</span><br><span class="line">    &#125; </span><br><span class="line"> 每个用户再来访问时，需先去记录中剔除过期记录，再根据列表的长度判断是否可以继续访问。</span><br><span class="line"> &apos;如何封IP&apos;：在防火墙中进行设置</span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line"># 对注册用户，根据用户名或邮箱进行判断。</span><br><span class="line">    &#123;</span><br><span class="line">        throttle_xxxx1:[1526868876.497521,152686885.497521...]，</span><br><span class="line">        throttle_xxxx2:[1526868876.497521,152686885.497521...]，</span><br><span class="line">        throttle_xxxx3:[1526868876.497521,152686885.497521...]，</span><br><span class="line">    &#125;</span><br><span class="line">每个用户再来访问时，需先去记录中剔除过期记录，再根据列表的长度判断是否可以继续访问。</span><br><span class="line">如1分钟：40次，列表长度限制在40，超过40则不可访问</span><br></pre></td></tr></table></figure><h4 id="17-GenericAPIView视图类的作用？"><a href="#17-GenericAPIView视图类的作用？" class="headerlink" title="17.GenericAPIView视图类的作用？"></a>17.GenericAPIView视图类的作用？</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">他提供了一些规则，例如：</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericAPIView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    serializer_class = <span class="literal">None</span></span><br><span class="line">    queryset = <span class="literal">None</span></span><br><span class="line">    lookup_field = <span class="string">'pk'</span></span><br><span class="line">    </span><br><span class="line">    filter_backends = api_settings.DEFAULT_FILTER_BACKENDS</span><br><span class="line">    pagination_class = api_settings.DEFAULT_PAGINATION_CLASS</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.queryset</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.serializer_class</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_queryset</span><span class="params">(self, queryset)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> backend <span class="keyword">in</span> list(self.filter_backends):</span><br><span class="line">            queryset = backend().filter_queryset(self.request, queryset, self)</span><br><span class="line">        <span class="keyword">return</span> queryset</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paginator</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'_paginator'</span>):</span><br><span class="line">            <span class="keyword">if</span> self.pagination_class <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                self._paginator = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self._paginator = self.pagination_class()</span><br><span class="line">        <span class="keyword">return</span> self._paginator</span><br><span class="line">    </span><br><span class="line">他相当于提供了一些规则，建议子类中使用固定的方式获取数据，例如：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleView</span><span class="params">(GenericAPIView)</span>:</span></span><br><span class="line">    queryset = models.User.objects.all()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        query = self.get_queryset()</span><br><span class="line"></span><br><span class="line">我们可以自己继承GenericAPIView来实现具体操作，但是一般不会，因为更加麻烦。</span><br><span class="line">而GenericAPIView主要是提供给drf内部的 ListAPIView、Create....</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListModelMixin</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line"></span><br><span class="line">        page = self.paginate_queryset(queryset)</span><br><span class="line">        <span class="keyword">if</span> page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            serializer = self.get_serializer(page, many=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span> self.get_paginated_response(serializer.data)</span><br><span class="line"></span><br><span class="line">        serializer = self.get_serializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListAPIView</span><span class="params">(mixins.ListModelMixin,GenericAPIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.list(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyView</span><span class="params">(ListAPIView)</span>:</span></span><br><span class="line">    queryset = xxxx </span><br><span class="line">    ser...</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">总结：GenericAPIView主要为drf内部帮助我们提供增删改查的类LIstAPIView、CreateAPIView、UpdateAPIView、提供了执行流程和功能，我们在使用drf内置类做CURD时，就可以通过自定义 静态字段（类变量）或重写方法（get_queryset、get_serializer_class）来进行更高级的定制。</span><br></pre></td></tr></table></figure><h4 id="18-jwt以及其优势。"><a href="#18-jwt以及其优势。" class="headerlink" title="18.jwt以及其优势。"></a>18.jwt以及其优势。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">一般在前后端分离时，用于做用户认证（登录）使用的技术。</span><br><span class="line">jwt的实现原理：</span><br><span class="line">- 用户登录成功之后，会给前端返回一段token。</span><br><span class="line">- token是由.分割的三段组成。</span><br><span class="line">- 第一段：类型和算法信心</span><br><span class="line">- 第二段：用户信息+超时时间</span><br><span class="line">- 第三段：hs256（前两段拼接）加密 + base64url</span><br><span class="line">- 以后前端再次发来信息时</span><br><span class="line">- 超时验证</span><br><span class="line">- token合法性校验</span><br><span class="line">优势：</span><br><span class="line">- token只在前端保存，后端只负责校验。</span><br><span class="line">- 内部集成了超时时间，后端可以根据时间进行校验是否超时。</span><br><span class="line">- 由于内部存在hash256加密，所以用户不可以修改token，只要一修改就认证失败。</span><br></pre></td></tr></table></figure><h4 id="19-序列化时many-True和many-False的区别？"><a href="#19-序列化时many-True和many-False的区别？" class="headerlink" title="19.序列化时many=True和many=False的区别？"></a>19.序列化时many=True和many=False的区别？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在序列化的时候，many=True可以针对的是多条数据</span><br><span class="line">many=False针对的是单条数据而言</span><br></pre></td></tr></table></figure><h4 id="20-应用DRF中的功能进行项目开发"><a href="#20-应用DRF中的功能进行项目开发" class="headerlink" title="20.应用DRF中的功能进行项目开发"></a>20.应用DRF中的功能进行项目开发</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">*****</span><br><span class="line">解析器:request.query_parmas/request.data</span><br><span class="line">视图</span><br><span class="line">序列化</span><br><span class="line">渲染器：Response</span><br><span class="line"></span><br><span class="line">****</span><br><span class="line">request对象封装</span><br><span class="line">版本处理</span><br><span class="line">分页处理</span><br><span class="line">***</span><br><span class="line">认证</span><br><span class="line">权限</span><br><span class="line">节流</span><br></pre></td></tr></table></figure><ul><li>基于APIView实现呼啦圈</li><li>继承ListAPIView+ GenericViewSet,ListModelMixin实现呼啦圈</li></ul><h4 id="21-接口的幂等性是什么意思？"><a href="#21-接口的幂等性是什么意思？" class="headerlink" title="21.接口的幂等性是什么意思？"></a>21.接口的幂等性是什么意思？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">首先，我们来看一下接口存在的问题：</span><br><span class="line">-现如今我们的系统大多拆分为分布式SOA，或者微服务，一套系统中包含了多个子系统服务，而一个子系统服务往往会去调用另一个服务，而服务调用服务无非就是使用RPC通信或者restful，既然是通信，那么就有可能在服务器处理完毕后返回结果的时候挂掉，这个时候用户端发现很久没有反应，那么就会多次点击按钮，这样请求有多次，那么处理数据的结果是否要统一呢？那是肯定的！尤其在支付场景。</span><br><span class="line"></span><br><span class="line">那么，什么是接口的幂等性？</span><br><span class="line">-接口幂等性就是用户对于同一操作发起的一次请求或者多次请求的结果是一致的，不会因为多次点击而产生副作用。</span><br><span class="line"></span><br><span class="line">什么情况下需要保证接口的幂等性？</span><br><span class="line">-在增删查改中，尤其注意增加和修改</span><br><span class="line">新增：比如支付时候的重复提交事件</span><br><span class="line">修改：比如A字段增加1，这种操作就不是幂等的</span><br><span class="line"></span><br><span class="line">那么，如何设计接口才能做到幂等呢？</span><br><span class="line">-通过代码逻辑判断实现</span><br><span class="line">-使用token机制是实现</span><br></pre></td></tr></table></figure><h4 id="22-什么是RPC？"><a href="#22-什么是RPC？" class="headerlink" title="22.什么是RPC？"></a>22.什么是RPC？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&apos;远程过程调用协议&apos;</span><br><span class="line">是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。</span><br><span class="line">进化的顺序: 先有的RPC,然后有的RESTful规范</span><br></pre></td></tr></table></figure><h4 id="23-Http和Https的区别？"><a href="#23-Http和Https的区别？" class="headerlink" title="23.Http和Https的区别？"></a>23.Http和Https的区别？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#Http: 80端口</span><br><span class="line">#https: 443端口</span><br><span class="line"># http信息是明文传输，https则是具有安全性的ssl加密传输协议。</span><br><span class="line">#- 自定义证书 </span><br><span class="line">    - 服务端：创建一对证书</span><br><span class="line">    - 客户端：必须携带证书</span><br><span class="line">#- 购买证书</span><br><span class="line">    - 服务端： 创建一对证书，。。。。</span><br><span class="line">    - 客户端： 去机构获取证书，数据加密后发给咱们的服务单</span><br><span class="line">    - 证书机构:公钥给改机构</span><br></pre></td></tr></table></figure><h4 id="24-为什么要使用django-rest-framework框架？"><a href="#24-为什么要使用django-rest-framework框架？" class="headerlink" title="24.为什么要使用django rest framework框架？"></a>24.为什么要使用django rest framework框架？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 在编写接口时可以不使用django rest framework框架，</span><br><span class="line"># 不使用：也可以做，可以用django的CBV来实现，开发者编写的代码会更多一些。</span><br><span class="line"># 使用：内部帮助我们提供了很多方便的组件，我们通过配置就可以完成相应操作，如：</span><br><span class="line">    &apos;序列化&apos;可以做用户请求数据校验+queryset对象的序列化称为json</span><br><span class="line">    &apos;解析器&apos;获取用户请求数据request.data，会自动根据content-type请求头的不能对数据进行解析</span><br><span class="line">    &apos;分页&apos;将从数据库获取到的数据在页面进行分页显示。</span><br><span class="line">     # 还有其他组件：</span><br><span class="line">         &apos;认证&apos;、&apos;权限&apos;、&apos;访问频率控制</span><br></pre></td></tr></table></figure><h4 id="25-django-rest-framework框架中的视图都可以继承哪些类"><a href="#25-django-rest-framework框架中的视图都可以继承哪些类" class="headerlink" title="25.django rest framework框架中的视图都可以继承哪些类"></a>25.django rest framework框架中的视图都可以继承哪些类</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">a. 继承APIView（最原始）但定制性比较强</span><br><span class="line">    这个类属于rest framework中的顶层类，内部帮助我们实现了只是基本功能：认证、权限、频率控制，</span><br><span class="line">但凡是数据库、分页等操作都需要手动去完成，比较原始。</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">GenericAPIView</span><span class="params">(APIView)</span></span></span><br><span class="line"><span class="class">    <span class="title">def</span> <span class="title">post</span><span class="params">(...)</span>:</span></span><br><span class="line">          <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line">b.继承GenericViewSet（ViewSetMixin，generics.GenericAPIView）</span><br><span class="line">　　首先他的路由就发生变化</span><br><span class="line">    如果继承它之后，路由中的as_view需要填写对应关系</span><br><span class="line">　　在内部也帮助我们提供了一些方便的方法：</span><br><span class="line">　　get_queryset</span><br><span class="line">　　get_object</span><br><span class="line">　　get_serializer</span><br><span class="line">　　get_serializer_class</span><br><span class="line">　　get_serializer_context</span><br><span class="line">　　filter_queryset</span><br><span class="line">注意：要设置queryset字段，否则会抛出断言的异常。</span><br><span class="line"></span><br><span class="line">代码</span><br><span class="line">只提供增加功能 只继承GenericViewSet</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestView</span><span class="params">(GenericViewSet)</span>:</span></span><br><span class="line">　　serialazer_class = xxx</span><br><span class="line">　　<span class="function"><span class="keyword">def</span> <span class="title">creat</span><span class="params">(self,*args,**kwargs)</span>:</span></span><br><span class="line">　　　　<span class="keyword">pass</span>  <span class="comment"># 获取数据并对数据</span></span><br><span class="line"></span><br><span class="line">c. 继承  modelviewset  --&gt; 快速快发</span><br><span class="line">　　　　-ModelViewSet(增删改查全有+数据库操作)</span><br><span class="line">　　　　-mixins.CreateModelMixin（只有增）,GenericViewSet</span><br><span class="line">　　　　-mixins.CreateModelMixin,DestroyModelMixin,GenericViewSet</span><br><span class="line">　　对数据库和分页等操作不用我们在编写，只需要继承相关类即可。</span><br><span class="line">　　</span><br><span class="line">示例：只提供增加功能</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestView</span><span class="params">(mixins.CreateModelMixin,GenericViewSet)</span>:</span></span><br><span class="line">　　　　serializer_class = XXXXXXX</span><br><span class="line">*** </span><br><span class="line">　　modelviewset --&gt; 快速开发，复杂点的genericview、apiview</span><br></pre></td></tr></table></figure><h4 id="26-drf框架如何对Queryset进行序列化？"><a href="#26-drf框架如何对Queryset进行序列化？" class="headerlink" title="26.drf框架如何对Queryset进行序列化？"></a>26.drf框架如何对Queryset进行序列化？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">queryset = Book.objects.all()</span><br><span class="line">#定义一个序列化类</span><br><span class="line">serializer = BookSerializer(queryset, many=True)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-装饰器&quot;&gt;&lt;a href=&quot;#1-装饰器&quot; class=&quot;headerlink&quot; title=&quot;1.装饰器&quot;&gt;&lt;/a&gt;1.装饰器&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(func)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(*args,**kwargs)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; func(*args,**kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; inner&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@outer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(a1)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(func)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(*args,**kwargs)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; func(*args,**kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; inner&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(a1)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#这种方式执行的和装饰器的效果是一样的，但是这种方法要看懂，因为源码里面有这样写的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index = outer(index)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#现在index = inner&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="小绿本" scheme="https://pl1649947109.github.io/pl1649947109/tags/%E5%B0%8F%E7%BB%BF%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>消息队列——初识</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/15/%E4%B9%A6/linux/%E7%AC%AC%E4%B8%83%E8%AE%B2%E2%80%94%E2%80%94%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%88%9D%E8%AF%86/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/15/书/linux/第七讲——消息队列初识/</id>
    <published>2019-11-15T12:30:00.000Z</published>
    <updated>2019-11-16T15:57:31.223Z</updated>
    
    <content type="html"><![CDATA[<h2 id="消息队列初始"><a href="#消息队列初始" class="headerlink" title="消息队列初始"></a>消息队列初始</h2><h3 id="什么是消息队列"><a href="#什么是消息队列" class="headerlink" title="什么是消息队列"></a>什么是消息队列</h3><p>我们可以把消息队列比作是一个存放消息的容器，当我们需要使用消息的时候可以取出消息供自己使用。</p><p>消息队列是分布式系统中重要的组件，主要解决应用解耦，异步消息，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。</p><p>目前使用较多的消息队列有ActiveMQ，RabbitMQ，Kafka，RocketMQ，我们后面会一一对比这些消息队列。</p><a id="more"></a><h3 id="应用场景一"><a href="#应用场景一" class="headerlink" title="应用场景一"></a>应用场景一</h3><p>我觉得使用消息队列主要有两点好处：1.通过异步处理提高系统性能（削峰、减少响应所需时间）;2.降低系统耦合性。如果在面试的时候你被面试官问到这个问题的话，一般情况是你在你的简历上涉及到消息队列这方面的内容，这个时候推荐你结合你自己的项目来回答。</p><p><strong>(1) 通过异步处理提高系统性能（削峰、减少响应所需时间）</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/2509688-311483f18a8d228e?imageMogr2/auto-orient/strip%7CimageView2/2/w/910/format/webp" alt="img"></p><p>如上图，<strong>在不使用消息队列服务器的时候，用户的请求数据直接写入数据库，在高并发的情况下数据库压力剧增，使得响应速度变慢。但是在使用消息队列之后，用户的请求数据发送给消息队列之后立即 返回，再由消息队列的消费者进程从消息队列中获取数据，异步写入数据库。由于消息队列服务器处理速度快于数据库（消息队列也比数据库有更好的伸缩性），因此响应速度得到大幅改善。</strong></p><p>通过以上分析我们可以得出<strong>消息队列具有很好的削峰作用的功能</strong>——即<strong>通过异步处理，将短时间高并发产生的事务消息存储在消息队列中，从而削平高峰期的并发事务。</strong> 举例：在电子商务一些秒杀、促销活动中，合理使用消息队列可以有效抵御促销活动刚开始大量订单涌入对系统的冲击。如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/2509688-f9b9af2c6620e724?imageMogr2/auto-orient/strip%7CimageView2/2/w/780/format/webp" alt="img"></p><p>因为<strong>用户请求数据写入消息队列之后就立即返回给用户了，但是请求数据在后续的业务校验、写数据库等操作中可能失败</strong>。因此使用消息队列进行异步处理之后，需要<strong>适当修改业务流程进行配合</strong>，比如<strong>用户在提交订单之后，订单数据写入消息队列，不能立即返回用户订单提交成功，需要在消息队列的订单消费者进程真正处理完该订单之后，甚至出库后，再通过电子邮件或短信通知用户订单成功</strong>，以免交易纠纷。这就类似我们平时手机订火车票和电影票。</p><p><strong>(2) 降低系统耦合性</strong></p><p>我们知道如果模块之间不存在直接调用，那么新增模块或者修改模块就对其他模块影响较小，这样系统的可扩展性无疑更好一些。</p><p>我们最常见的<strong>事件驱动架构</strong>类似生产者消费者模式，在大型网站中通常用利用消息队列实现事件驱动结构。如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/2509688-f3bddbdea97bb30c?imageMogr2/auto-orient/strip%7CimageView2/2/w/790/format/webp" alt="img"></p><p><strong>消息队列使利用发布-订阅模式工作，消息发送者（生产者）发布消息，一个或多个消息接受者（消费者）订阅消息。</strong> 从上图可以看到<strong>消息发送者（生产者）和消息接受者（消费者）之间没有直接耦合</strong>，消息发送者将消息发送至分布式消息队列即结束对消息的处理，消息接受者从分布式消息队列获取该消息后进行后续处理，并不需要知道该消息从何而来。<strong>对新增业务，只要对该类消息感兴趣，即可订阅该消息，对原有系统和业务没有任何影响，从而实现网站业务的可扩展性设计</strong>。</p><p>消息接受者对消息进行过滤、处理、包装后，构造成一个新的消息类型，将消息继续发送出去，等待其他消息接受者订阅该消息。因此基于事件（消息对象）驱动的业务架构可以是一系列流程。</p><p><strong>另外为了避免消息队列服务器宕机造成消息丢失，会将成功发送到消息队列的消息存储在消息生产者服务器上，等消息真正被消费者服务器处理后才删除消息。在消息队列服务器宕机后，生产者服务器会选择分布式消息队列服务器集群中的其他服务器发布消息。</strong></p><p><strong>备注：</strong> 不要认为消息队列只能利用发布-订阅模式工作，只不过在解耦这个特定业务环境下是使用发布-订阅模式的。<strong>除了发布-订阅模式，还有点对点订阅模式（一个消息只有一个消费者），我们比较常用的是发布-订阅模式。</strong> 另外，这两种消息模型是 JMS 提供的，AMQP 协议还提供了 5 种消息模型。</p><h3 id="应用场景二"><a href="#应用场景二" class="headerlink" title="应用场景二"></a>应用场景二</h3><h4 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h4><p>场景说明：用户注册后，需要发注册邮件和注册短信。传统的做法有两种 1.串行的方式；2.并行方式</p><p>a、串行方式：将注册信息写入数据库成功后，发送注册邮件，再发送注册短信。以上三个任务全部完成后，返回给客户端。</p><p><img src="http://images2015.cnblogs.com/blog/270324/201607/270324-20160730141220778-784471498.png" alt="img"></p><p>b、并行方式：将注册信息写入数据库成功后，发送注册邮件的同时，发送注册短信。以上三个任务完成后，返回给客户端。与串行的差别是，并行的方式可以提高处理的时间</p><p><img src="http://images2015.cnblogs.com/blog/270324/201607/270324-20160730141228575-679122919.png" alt="img"></p><p>假设三个业务节点每个使用50毫秒钟，不考虑网络等其他开销，则串行方式的时间是150毫秒，并行的时间可能是100毫秒。<br>因为CPU在单位时间内处理的请求数是一定的，假设CPU1秒内吞吐量是100次。则串行方式1秒内CPU可处理的请求量是7次（1000/150）。并行方式处理的请求量是10次（1000/100）</p><p>小结：如以上案例描述，传统的方式系统的性能（并发量，吞吐量，响应时间）会有瓶颈。如何解决这个问题呢？</p><p>引入消息队列，将不是必须的业务逻辑，异步处理。改造后的架构如下：</p><p><img src="http://images2015.cnblogs.com/blog/270324/201607/270324-20160730141236169-1140938329.png" alt="img"></p><p>按照以上约定，用户的响应时间相当于是注册信息写入数据库的时间，也就是50毫秒。注册邮件，发送短信写入消息队列后，直接返回，因此写入消息队列的速度很快，基本可以忽略，因此用户的响应时间可能是50毫秒。因此架构改变后，系统的吞吐量提高到每秒20 QPS。比串行提高了3倍，比并行提高了两倍。</p><h4 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h4><p>场景说明：用户下单后，订单系统需要通知库存系统。传统的做法是，订单系统调用库存系统的接口。如下图：</p><p><img src="http://images2015.cnblogs.com/blog/270324/201607/270324-20160730143219809-1948583125.png" alt="img"></p><p>传统模式的缺点：假如库存系统无法访问，则订单减库存将失败，从而导致订单失败，订单系统与库存系统耦合</p><p>如何解决以上问题呢？引入应用消息队列后的方案，如下图：</p><p><img src="http://images2015.cnblogs.com/blog/270324/201607/270324-20160730143228325-953675504.png" alt="img"></p><p>订单系统：用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户订单下单成功<br>库存系统：订阅下单的消息，采用拉/推的方式，获取下单信息，库存系统根据下单信息，进行库存操作<br>假如：在下单时库存系统不能正常使用。也不影响正常下单，因为下单后，订单系统写入消息队列就不再关心其他的后续操作了。实现订单系统与库存系统的应用解耦</p><h4 id="流量削峰"><a href="#流量削峰" class="headerlink" title="流量削峰"></a>流量削峰</h4><p>流量削锋也是消息队列中的常用场景，一般在秒杀或团抢活动中使用广泛。<br>应用场景：秒杀活动，一般会因为流量过大，导致流量暴增，应用挂掉。为解决这个问题，一般需要在应用前端加入消息队列。<br>a、可以控制活动的人数<br>b、可以缓解短时间内高流量压垮应用</p><p><img src="http://images2015.cnblogs.com/blog/270324/201607/270324-20160730151710106-2043115158.png" alt="img"></p><p>用户的请求，服务器接收后，首先写入消息队列。假如消息队列长度超过最大数量，则直接抛弃用户请求或跳转到错误页面。<br>秒杀业务根据消息队列中的请求信息，再做后续处理</p><h4 id="日志处理"><a href="#日志处理" class="headerlink" title="日志处理"></a>日志处理</h4><p>消息通讯是指，消息队列一般都内置了高效的通信机制，因此也可以用在纯的消息通讯。比如实现点对点消息队列，或者聊天室等</p><p>点对点通讯：</p><p><img src="http://images2015.cnblogs.com/blog/270324/201607/270324-20160730153544294-1894255488.png" alt="img"></p><p>客户端A和客户端B使用同一队列，进行消息通讯。</p><p>聊天室通讯：</p><p><img src="http://images2015.cnblogs.com/blog/270324/201607/270324-20160730153550184-1160563716.png" alt="img"></p><p>客户端A，客户端B，客户端N订阅同一主题，进行消息发布和接收。实现类似聊天室效果。</p><p>以上实际是消息队列的两种消息模式，点对点或发布订阅模式。模型为示意图，供参考。</p><h3 id="消息中间件示例"><a href="#消息中间件示例" class="headerlink" title="消息中间件示例"></a>消息中间件示例</h3><h4 id="电商系统"><a href="#电商系统" class="headerlink" title="电商系统"></a>电商系统</h4><p><img src="http://images2015.cnblogs.com/blog/270324/201608/270324-20160801102300309-25949110.jpg" alt="img"></p><p>消息队列采用高可用，可持久化的消息中间件。比如Active MQ，Rabbit MQ，Rocket Mq。<br>（1）应用将主干逻辑处理完成后，写入消息队列。消息发送是否成功可以开启消息的确认模式。（消息队列返回消息接收成功状态后，应用再返回，这样保障消息的完整性）<br>（2）扩展流程（发短信，配送处理）订阅队列消息。采用推或拉的方式获取消息并处理。<br>（3）消息将应用解耦的同时，带来了数据一致性问题，可以采用最终一致性方式解决。比如主数据写入数据库，扩展应用根据消息队列，并结合数据库方式实现基于消息队列的后续处理。</p><h4 id="日志收集系统"><a href="#日志收集系统" class="headerlink" title="日志收集系统"></a>日志收集系统</h4><p><img src="http://images2015.cnblogs.com/blog/270324/201608/270324-20160801102309481-1983324345.jpg" alt="img"></p><p>分为Zookeeper注册中心，日志收集客户端，Kafka集群和Storm集群（OtherApp）四部分组成。<br>Zookeeper注册中心，提出负载均衡和地址查找服务<br>日志收集客户端，用于采集应用系统的日志，并将数据推送到kafka队列<br>Kafka集群：接收，路由，存储，转发等消息处理<br>Storm集群：与OtherApp处于同一级别，采用拉的方式消费队列中的数据</p><h3 id="使用消息队列带来的一些问题"><a href="#使用消息队列带来的一些问题" class="headerlink" title="使用消息队列带来的一些问题"></a>使用消息队列带来的一些问题</h3><ul><li><strong>系统可用性降低：</strong> 系统可用性在某种程度上降低，为什么这样说呢？在加入MQ之前，你不用考虑消息丢失或者说MQ挂掉等等的情况，但是，引入MQ之后你就需要去考虑了！</li><li><strong>系统复杂性提高：</strong> 加入MQ之后，你需要保证消息没有被重复消费、处理消息丢失的情况、保证消息传递的顺序性等等问题！</li><li><strong>一致性问题：</strong> 我上面讲了消息队列可以实现异步，消息队列带来的异步确实可以提高系统响应速度。但是，万一消息的真正消费者并没有正确消费消息怎么办？这样就会导致数据不一致的情况了!</li></ul><h3 id="常见的消息队列对比"><a href="#常见的消息队列对比" class="headerlink" title="常见的消息队列对比"></a>常见的消息队列对比</h3><table><thead><tr><th>对比方向</th><th>概要</th></tr></thead><tbody><tr><td>吞吐量</td><td>万级的 ActiveMQ 和 RabbitMQ 的吞吐量（ActiveMQ 的性能最差）要比 十万级甚至是百万级的 RocketMQ 和 Kafka 低一个数量级。</td></tr><tr><td>可用性</td><td>都可以实现高可用。ActiveMQ 和 RabbitMQ 都是基于主从架构实现高可用性。RocketMQ 基于分布式架构。 kafka 也是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td></tr><tr><td>时效性</td><td>RabbitMQ 基于erlang开发，所以并发能力很强，性能极其好，延时很低，达到微秒级。其他三个都是 ms 级。</td></tr><tr><td>功能支持</td><td>除了 Kafka，其他三个功能都较为完备。 Kafka 功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用，是事实上的标准</td></tr><tr><td>消息丢失</td><td>ActiveMQ 和 RabbitMQ 丢失的可能性非常低， RocketMQ 和 Kafka 理论上不会丢失。</td></tr></tbody></table><p>小结：</p><p>ActiveMQ 的社区算是比较成熟，但是较目前来说，ActiveMQ 的性能比较差，而且版本迭代很慢，不推荐使用。</p><p>RabbitMQ 在吞吐量方面虽然稍逊于 Kafka 和 RocketMQ ，但是由于它基于 erlang 开发，所以并发能力很强，性能极其好，延时很低，达到微秒级。但是也因为 RabbitMQ 基于 erlang 开发，所以国内很少有公司有实力做erlang源码级别的研究和定制。如果业务场景对并发量要求不是太高（十万级、百万级），那这四种消息队列中，RabbitMQ 一定是你的首选。如果是大数据领域的实时计算、日志采集等场景，用 Kafka 是业内标准的，绝对没问题，社区活跃度很高，绝对不会黄，何况几乎是全世界这个领域的事实性规范。</p><p>RocketMQ 阿里出品，Java 系开源项目，源代码我们可以直接阅读，然后可以定制自己公司的MQ，并且 RocketMQ 有阿里巴巴的实际业务场景的实战考验。RocketMQ 社区活跃度相对较为一般，不过也还可以，文档相对来说简单一些，然后接口这块不是按照标准 JMS 规范走的有些系统要迁移需要修改大量代码。还有就是阿里出台的技术，你得做好这个技术万一被抛弃，社区黄掉的风险，那如果你们公司有技术实力我觉得用RocketMQ 挺好的</p><p>kafka 的特点其实很明显，就是仅仅提供较少的核心功能，但是提供超高的吞吐量，ms 级的延迟，极高的可用性以及可靠性，而且分布式可以任意扩展。同时 kafka 最好是支撑较少的 topic 数量即可，保证其超高吞吐量。kafka 唯一的一点劣势是有可能消息重复消费，那么对数据准确性会造成极其轻微的影响，在大数据领域中以及日志采集中，这点轻微影响可以忽略这个特性天然适合大数据实时计算以及日志收集。</p><p><img src="https://img-blog.csdn.net/20160506134211236" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;消息队列初始&quot;&gt;&lt;a href=&quot;#消息队列初始&quot; class=&quot;headerlink&quot; title=&quot;消息队列初始&quot;&gt;&lt;/a&gt;消息队列初始&lt;/h2&gt;&lt;h3 id=&quot;什么是消息队列&quot;&gt;&lt;a href=&quot;#什么是消息队列&quot; class=&quot;headerlink&quot; title=&quot;什么是消息队列&quot;&gt;&lt;/a&gt;什么是消息队列&lt;/h3&gt;&lt;p&gt;我们可以把消息队列比作是一个存放消息的容器，当我们需要使用消息的时候可以取出消息供自己使用。&lt;/p&gt;
&lt;p&gt;消息队列是分布式系统中重要的组件，主要解决应用解耦，异步消息，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。&lt;/p&gt;
&lt;p&gt;目前使用较多的消息队列有ActiveMQ，RabbitMQ，Kafka，RocketMQ，我们后面会一一对比这些消息队列。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://pl1649947109.github.io/pl1649947109/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>python2和python3的区别</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/15/%E7%9F%A5%E8%AF%86%E6%89%A9%E5%B1%95/python2%E5%92%8Cpython3%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/15/知识扩展/python2和python3的区别/</id>
    <published>2019-11-15T12:30:00.000Z</published>
    <updated>2019-11-15T08:49:51.612Z</updated>
    
    <content type="html"><![CDATA[<p>区别一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">默认编码 </span><br><span class="line">py2默认为 ascII 编码 不支持汉字输入和输出 如果想要支持 在首行加上 <span class="comment"># encoding:utf-8</span></span><br><span class="line"></span><br><span class="line">py3默认就是utf<span class="number">-8</span></span><br></pre></td></tr></table></figure><p>区别二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入input</span><br><span class="line">py2用的是：rawinput </span><br><span class="line"></span><br><span class="line">py3用的是：input</span><br></pre></td></tr></table></figure><a id="more"></a><p>区别三：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">打印<span class="keyword">print</span></span><br><span class="line">python2的print可以不用括号--&gt;print "hello"</span><br><span class="line"></span><br><span class="line">python3必须有--&gt;print("hello")</span><br><span class="line"></span><br><span class="line">在python2中是使用的<span class="keyword">print</span>是语句，</span><br><span class="line">在python3中使用的是print()函数。</span><br></pre></td></tr></table></figure><p>区别四：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python2和python3的unicode编码</span><br><span class="line"></span><br><span class="line">python2的时候没有str和bytes的区别</span><br><span class="line"></span><br><span class="line">python3就有了，于是就有了encode和decode（他们就是上述的类型的转换）</span><br></pre></td></tr></table></figure><p>区别五：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Python2.2起，如果整数发生溢出，Python会自动将整数数据转换为长整数(long)，所以如今在长整数数据后面不加字母L也不会导致严重后果了。</span><br><span class="line"></span><br><span class="line">在Python3里不再有long类型了，全都是int</span><br></pre></td></tr></table></figure><p>区别六：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">range和xrange</span><br><span class="line">python2中有range和xrange</span><br><span class="line"></span><br><span class="line">但是python3中只有range</span><br></pre></td></tr></table></figure><p>区别七：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">package包</span><br><span class="line">package 在py2 中必须有__init__方法，</span><br><span class="line"></span><br><span class="line">但是在py3中可以没有</span><br></pre></td></tr></table></figure><p>区别八：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">对于betys和str类型，</span><br><span class="line">在3.0版本之前不区分betys和str类型，内部隐式自动切换</span><br><span class="line"></span><br><span class="line">在3.0版本之后不再隐形的自动切换了，而是需要我们使用decode(“ascall”)和encode(“utf-8”)</span><br></pre></td></tr></table></figure><p>区别九：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> <span class="keyword">except</span> 语句的变化</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>版本: </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   ......</span><br><span class="line"><span class="keyword">except</span> Exception, e :</span><br><span class="line">   ......</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>版本：</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   ......</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e :</span><br><span class="line">   ......</span><br></pre></td></tr></table></figure><p>区别十:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">打开文件</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>版本： </span><br><span class="line">    file( ..... )</span><br><span class="line">    或 open(.....)</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>版本：</span><br><span class="line">只能用 open(.....)</span><br></pre></td></tr></table></figure><p>区别十一： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chr(K) 与 ord(c)</span><br><span class="line">python 2.4.2以前</span><br><span class="line">   chr(K)   将编码K 转为字符，K的范围是 0 ~ 255</span><br><span class="line">   ord(c)   取单个字符的编码, 返回值的范围: 0 ~ 255</span><br><span class="line">python 3.0</span><br><span class="line">   chr(K)   将编码K 转为字符，K的范围是 0 ~ 65535</span><br><span class="line">   ord(c)   取单个字符的编码, 返回值的范围: 0 ~ 65535</span><br></pre></td></tr></table></figure><p>区别十二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">除法运算符</span><br><span class="line"></span><br><span class="line">数据类型的不同，在<span class="number">2.</span>x下数字的数据类型有int和long，在<span class="number">3.</span>x之后就中有float</span><br><span class="line"></span><br><span class="line">python <span class="number">2.4</span><span class="number">.2</span>以前</span><br><span class="line">   <span class="number">10</span>/<span class="number">3</span>      结果为 <span class="number">3</span>     </span><br><span class="line"></span><br><span class="line">python <span class="number">3.0</span></span><br><span class="line">   <span class="number">10</span> / <span class="number">3</span> 结果为 <span class="number">3.3333333333333335</span></span><br><span class="line">   <span class="number">10</span> // <span class="number">3</span> 结果为 <span class="number">3</span></span><br></pre></td></tr></table></figure><p>区别十三：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">不等号的区别：</span><br><span class="line"></span><br><span class="line">在python2中，不等号有两种写法：!=  和&lt;&gt;  </span><br><span class="line"></span><br><span class="line">在python3中，不等号只剩下了 !=这一种</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;区别一：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;默认编码 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;py2默认为 ascII 编码 不支持汉字输入和输出 如果想要支持 在首行加上 &lt;span class=&quot;comment&quot;&gt;# encoding:utf-8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;py3默认就是utf&lt;span class=&quot;number&quot;&gt;-8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;区别二：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入input&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;py2用的是：rawinput &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;py3用的是：input&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="知识扩展" scheme="https://pl1649947109.github.io/pl1649947109/tags/%E7%9F%A5%E8%AF%86%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>第五部分——Django</title>
    <link href="https://pl1649947109.github.io/pl1649947109/2019/11/15/%E5%B0%8F%E7%BB%BF%E6%9C%AC/%E7%AC%AC%E4%BA%94%E9%83%A8%E5%88%86%E2%80%94%E2%80%94Django/"/>
    <id>https://pl1649947109.github.io/pl1649947109/2019/11/15/小绿本/第五部分——Django/</id>
    <published>2019-11-15T12:00:00.000Z</published>
    <updated>2019-11-16T15:55:22.656Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-简述http协议以及常用的请求头"><a href="#1-简述http协议以及常用的请求头" class="headerlink" title="1.简述http协议以及常用的请求头"></a>1.简述http协议以及常用的请求头</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">User-Agent：标识浏览器</span><br><span class="line">Content_Type：用来标记请求体的数据的格式，服务端根据这个对数据进行解析</span><br><span class="line">Accept：指定客户端能够接收的内容类型</span><br><span class="line">Accept-Encoding:指定浏览器可以支持的web服务器返回内容压缩编码类型</span><br><span class="line">Accept-Language:浏览器可接受的语言</span><br><span class="line">Content-Length:请求的内容长度</span><br><span class="line">Date：请求发送的日期和时间</span><br></pre></td></tr></table></figure><h3 id="2-列举常见请求方法："><a href="#2-列举常见请求方法：" class="headerlink" title="2.列举常见请求方法："></a>2.列举常见请求方法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET</span><br><span class="line">POST</span><br></pre></td></tr></table></figure><h3 id="3-列举常见的状态码"><a href="#3-列举常见的状态码" class="headerlink" title="3.列举常见的状态码"></a>3.列举常见的状态码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">200：请求成功</span><br><span class="line">301：永久重定向</span><br><span class="line">302：临时重定向</span><br><span class="line">403：没有通过跨站请求伪造</span><br><span class="line">404：请求的页面不存在</span><br><span class="line">500：服务器错误</span><br></pre></td></tr></table></figure><h3 id="4-简述websocket协议及实现原理"><a href="#4-简述websocket协议及实现原理" class="headerlink" title="4.简述websocket协议及实现原理"></a>4.简述websocket协议及实现原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">协议：WebSocket 是一种标准协议，用于在客户端和服务端之间进行双向数据传输。但它跟 HTTP 没什么关系，它是基于 TCP 的一种独立实现。用来弥补http协议在持久通信能力上的不足。</span><br><span class="line"></span><br><span class="line">原理：WebSocket是HTML5下一种新的协议。它实现了浏览器与服务器全双工通信，能更好的节省服务器资源和带宽并达到实时通讯的目的。它与HTTP一样通过已建立的TCP连接来传输数据，但是它和HTTP最大不同是：</span><br><span class="line">WebSocket是一种双向通信协议。在建立连接后，WebSocket服务器端和客户端都能主动向对方发送或接收数据，就像Socket一样；</span><br><span class="line">WebSocket需要像TCP一样，先建立连接，连接成功后才能相互通信。</span><br><span class="line"></span><br><span class="line">相比HTTP长连接，WebSocket有以下特点：</span><br><span class="line">1，是真正的全双工方式，建立连接后客户端与服务器端是完全平等的，可以互相主动请求。</span><br><span class="line">2，Websocket协议通过第一个request建立了TCP连接之后，之后交换的数据都不需要发送 HTTP header就能交换数据</span><br><span class="line">3，此外还有 multiplexing、不同的URL可以复用同一个WebSocket连接等功能</span><br><span class="line"></span><br><span class="line">Wesocket协议的优点：</span><br><span class="line">Websocket协议一旦建立后，互相沟通所消耗的请求头是很小的</span><br><span class="line">服务端可以向客户端推送消息了</span><br><span class="line">Wesocket协议的缺点：</span><br><span class="line">少部分浏览器不支持，浏览器支持的成都与方式有区别</span><br><span class="line"></span><br><span class="line">Wesocket协议的应用场景：</span><br><span class="line">即时聊天通信</span><br><span class="line">多玩家游戏</span><br><span class="line">在线协同编辑</span><br><span class="line">实时数据流的拉取与推送</span><br><span class="line">体育实况</span><br><span class="line">实时地图位置</span><br></pre></td></tr></table></figure><h3 id="5-Python-web开发中，跨域问题的解决思路是什么"><a href="#5-Python-web开发中，跨域问题的解决思路是什么" class="headerlink" title="5.Python web开发中，跨域问题的解决思路是什么"></a>5.Python web开发中，跨域问题的解决思路是什么</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">首先，什么是跨域？</span><br><span class="line">同源策略/SOP（Same origin policy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。</span><br><span class="line"></span><br><span class="line">SOP要求两个通讯地址的协议、域名、端口号必须相同，否则两个地址的通讯将被浏览器视为不安全的，并被block下来。比如“http页面”和“https页面”属于不同协议；“qq.com”、“www.qq.com”、“a.qq.com”都属于不同域名（或主机）；“a.com”和“a.com:8000”属于不同端口号。这三种情况常规都是无法直接进行通讯的。</span><br><span class="line"></span><br><span class="line">解决办法：</span><br><span class="line">目前业界流行的解决方案有三种：服务器代理、JSONP、CORS（不展开）</span><br></pre></td></tr></table></figure><h3 id="6-简述http的缓存机制"><a href="#6-简述http的缓存机制" class="headerlink" title="6.简述http的缓存机制"></a>6.简述http的缓存机制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP的缓存可以分为两大类：强制缓存和协商缓存。强制缓存的优先级高于比较缓存。</span><br><span class="line">强制缓存（状态码200）：服务端通知浏览器一个缓存时间，在缓存期间内，下次请求，直接使用浏览器中缓存的数据，不在时间内，执行比较缓存策略。</span><br><span class="line">比较缓存（状态码：304）：对于 比较缓存而言，将缓存信息中的Etag（浏览器当前资源在服务器的唯一标识）和Last-Modified（浏览器资源的最后修改时间）通过请求发送给服务器，由服务器校验，比较成功，返回304状态，浏览器直接使用缓存。</span><br></pre></td></tr></table></figure><p><img src="http://9017499461.linshutu.top/Http%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6.webp" alt></p><h3 id="7-谈谈你知道的python-web框架："><a href="#7-谈谈你知道的python-web框架：" class="headerlink" title="7.谈谈你知道的python web框架："></a>7.谈谈你知道的python web框架：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Django</span><br><span class="line">flask</span><br><span class="line">Tornado</span><br><span class="line">Twisted</span><br></pre></td></tr></table></figure><h3 id="8-django中model的SulgFiled类型字段有什么用途"><a href="#8-django中model的SulgFiled类型字段有什么用途" class="headerlink" title="8.django中model的SulgFiled类型字段有什么用途"></a>8.django中model的SulgFiled类型字段有什么用途</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slug是一个新闻行业的术语。一个slug就是一个某种东西的简短标签，包含字母、数字、下划线或者连接线，通常用于URLs中。可以设置max_length参数，默认为50。</span><br></pre></td></tr></table></figure><h3 id="9-django常见的线上部署方式有哪几种"><a href="#9-django常见的线上部署方式有哪几种" class="headerlink" title="9.django常见的线上部署方式有哪几种"></a>9.django常见的线上部署方式有哪几种</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Nginx+uwsgi+Django+mysql（目前我用到的）</span><br></pre></td></tr></table></figure><h3 id="10-django中使用memcached作为缓存的具体方法？优缺点说明？"><a href="#10-django中使用memcached作为缓存的具体方法？优缺点说明？" class="headerlink" title="10.django中使用memcached作为缓存的具体方法？优缺点说明？"></a>10.django中使用memcached作为缓存的具体方法？优缺点说明？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1，settings.py</span><br><span class="line">CACHES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;BACKEND&apos;: &apos;django.core.cache.backends.memcached.MemcachedCache&apos;,</span><br><span class="line">        &apos;LOCATION&apos;: &apos;127.0.0.1:11211&apos;, #多个使用列表</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2，views.py</span><br><span class="line">from django.http import  HttpResponse</span><br><span class="line"># 使用cache来操作memcached</span><br><span class="line">from django.core.cache import cache</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line">def index(request):</span><br><span class="line">    cache.set(&apos;username&apos;,&apos;zhiliao&apos;,12000)</span><br><span class="line">    username = cache.get(&apos;username&apos;)</span><br><span class="line">    print(username)</span><br><span class="line">    return HttpResponse(&apos;index&apos;)</span><br><span class="line">我认为：</span><br><span class="line">优点：对于一些访问量高的文件放在缓存中，可以提高访问的效率</span><br><span class="line">缺点：缓存的缺点即使数据断电丢失，这点memcached没有好的办法处理</span><br></pre></td></tr></table></figure><p>memcached的具体操作：<a href="https://blog.csdn.net/xujin0/article/details/84311862" target="_blank" rel="noopener">https://blog.csdn.net/xujin0/article/details/84311862</a></p><a id="more"></a><h3 id="11-django、flask、tornado框架的比较？"><a href="#11-django、flask、tornado框架的比较？" class="headerlink" title="11.django、flask、tornado框架的比较？"></a>11.django、flask、tornado框架的比较？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">-django，大而全的框架它的内部组件比较多，内部提供：ORM、Admin、中间件、Form、ModelForm、Session、缓存、信号、CSRF；功能也都挺完善的</span><br><span class="line"></span><br><span class="line">- flask，微型框架，内部组件就比较少了，但是有很多第三方组件来扩展它，　　比如说有那个wtform（与django的modelform类似，表单验证）、flask-sqlalchemy（操作数据库的）、　　flask-session、flask-migrate、flask-script、blinker可扩展强，第三方组件丰富。所以对他本身来说有那种短小精悍的感觉</span><br><span class="line"></span><br><span class="line">- tornado，异步非阻塞。</span><br><span class="line">#是一个轻量级的Web框架，异步非阻塞+内置WebSocket功能。</span><br><span class="line">&apos;目标&apos;：通过一个线程处理N个并发请求(处理IO)。</span><br><span class="line">&apos;内部组件</span><br><span class="line">    #内部自己实现socket</span><br><span class="line">    #路由系统</span><br><span class="line">    #视图</span><br><span class="line">    #模板</span><br><span class="line">　　 #cookie</span><br><span class="line">    #csrf</span><br><span class="line"></span><br><span class="line">相同点：</span><br><span class="line">django和flask的共同点就是，他们2个框架都没有写socket，所以他们都是利用第三方模块wsgi。</span><br><span class="line">不同点：</span><br><span class="line">1，但是内部使用的wsgi也是有些不同的：django本身运行起来使用wsgiref，而flask使用werkzeug wsgi,</span><br><span class="line">2，还有一个区别就是他们的请求管理不太一样：django是通过将请求封装成request对象，再通过参数传递，而flask是通过上下文管理机制</span><br><span class="line"></span><br><span class="line">另一种说法：</span><br><span class="line">1. Django 、Flask、Tornado的对比</span><br><span class="line">答案:</span><br><span class="line">    1.Django走的是大而全的方向,开发效率高。它的MTV框架,自带的ORM,admin后台管理,自带的sqlite数据库和开发测试用的服务器</span><br><span class="line">    给开发者提高了超高的开发效率</span><br><span class="line">    2.Flask是轻量级的框架,自由,灵活,可扩展性很强,核心基于Werkzeug WSGI工具和jinja2模板引擎</span><br><span class="line">    3.Tornado走的是少而精的方向,性能优越。它最出名的是异步非阻塞的设计方式</span><br><span class="line">    Tornado的两大核心模块：</span><br><span class="line">        1.iostraem：对非阻塞式的socket进行简单的封装</span><br><span class="line">        2.ioloop：对I/O多路复用的封装，它实现了一个单例</span><br></pre></td></tr></table></figure><h3 id="12-什么是wsgi？"><a href="#12-什么是wsgi？" class="headerlink" title="12.什么是wsgi？"></a>12.什么是wsgi？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">是web服务网关接口，是一套协议。</span><br><span class="line">是通过以下模块实现了wsgi协议：</span><br><span class="line">    - wsgiref</span><br><span class="line">    - werkzurg</span><br><span class="line">    - uwsgi   关于部署</span><br><span class="line">以上模块本质：编写socket服务端，用于监听请求，当有请求到来，则将请求数据进行封装，然后交给web框架处理。</span><br></pre></td></tr></table></figure><h3 id="13-django请求的生命周期？"><a href="#13-django请求的生命周期？" class="headerlink" title="13.django请求的生命周期？"></a>13.django请求的生命周期？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户请求进来先走到  wsgi   然后将请求交给  jango的中间件   穿过django中间件（方法是process_request）  接着就是   路由匹配   路由匹配成功之后就执行相应的    视图函数   在视图函数中可以调用orm做数据库操作  再从模板路径   将模板拿到   然后在后台进行模板渲染   模板渲染完成之后就变成一个字符串     再把这个字符串经过所有中间件（方法：process_response）  和wsgi 返回给用户</span><br></pre></td></tr></table></figure><p><img src="https://images2018.cnblogs.com/blog/1258691/201806/1258691-20180601114444453-1347550743.png" alt="img"></p><h3 id="14-列举django的内置组件？"><a href="#14-列举django的内置组件？" class="headerlink" title="14.列举django的内置组件？"></a>14.列举django的内置组件？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">form 组件</span><br><span class="line">- 对用户请求的数据进行校验</span><br><span class="line">- 生成HTML标签</span><br><span class="line"></span><br><span class="line">PS：</span><br><span class="line">- form对象是一个可迭代对象。</span><br><span class="line">- 问题：choice的数据如果从数据库获取可能会造成数据无法实时更新</span><br><span class="line">        - 重写构造方法，在构造方法中重新去数据库获取值。</span><br><span class="line">        - ModelChoiceField字段</span><br><span class="line">            from django.forms import Form</span><br><span class="line">            from django.forms import fields</span><br><span class="line">            from django.forms.models import ModelChoiceField</span><br><span class="line">            class UserForm(Form):</span><br><span class="line">                name = fields.CharField(label=&apos;用户名&apos;,max_length=32)</span><br><span class="line">                email = fields.EmailField(label=&apos;邮箱&apos;)</span><br><span class="line">                ut_id = ModelChoiceField(queryset=models.UserType.objects.all())    </span><br><span class="line">            </span><br><span class="line">            依赖：</span><br><span class="line">                class UserType(models.Model):</span><br><span class="line">                    title = models.CharField(max_length=32)</span><br><span class="line"></span><br><span class="line">                    def __str__(self):</span><br><span class="line">                        return self.title</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">信号、</span><br><span class="line">django的信号其实就是django内部为开发者预留的一些自定制功能的钩子。</span><br><span class="line">只要在某个信号中注册了函数，那么django内部执行的过程中就会自动触发注册在信号中的函数。</span><br><span class="line">如： </span><br><span class="line">pre_init # django的modal执行其构造方法前，自动触发</span><br><span class="line">post_init # django的modal执行其构造方法后，自动触发</span><br><span class="line">pre_save # django的modal对象保存前，自动触发</span><br><span class="line">post_save # django的modal对象保存后，自动触发</span><br><span class="line">场景:</span><br><span class="line">在数据库某些表中添加数据时，可以进行日志记录。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CSRF、</span><br><span class="line">目标：防止用户直接向服务端发起POST请求。对所有的post请求做验证/ 将jango生成的一串字符串发送给我们，一种是从请求体发过来，一种是放在隐藏的标签里面用的是process_view　</span><br><span class="line">方案：先发送GET请求时，将token保存到：cookie、Form表单中（隐藏的input标签），以后再发送请求时只要携带过来即可。 ContentType contenttype是django的一个组件（app），为我们找到django程序中所有app中的所有表并添加到记录中。 可以使用他再加上表中的两个字段实现：一张表和N张表创建FK关系。 - 字段：表名称 - 字段：数据行ID 应用：路飞表结构优惠券和专题课和学位课关联。javascript:void(0);)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">中间件</span><br><span class="line">对所有的请求进行批量处理，在视图函数执行前后进行自定义操作。应用：用户登录校验问题：为甚么不使用装饰器？如果不使用中间件，就需要给每个视图函数添加装饰器，太繁琐</span><br><span class="line">权限组件:</span><br><span class="line">用户登录后，将权限放到session中，然后再每次请求进来在中间件里，根据当前的url去session中匹配，判断当前用户是否有权限访问当前url,有权限就继续访问，没有就返回，</span><br><span class="line"> （检查的东西就可以放到中间件中进行统一处理）在process_request方法里面做的，</span><br><span class="line">　我们的中间件是放在session后面，因为中间件需要到session里面取数据</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">session</span><br><span class="line">cookie与session区别</span><br><span class="line">（a）cookie是保存在浏览器端的键值对，而session是保存的服务器端的键值对，但是依赖cookie。（也可以不依赖cookie，可以放在url，或请求头但是cookie比较方便）</span><br><span class="line">（b）以登录为例，cookie为通过登录成功后，设置明文的键值对，并将键值对发送客户端存，明文信息可能存在泄漏，不安全；　　session则是生成随机字符串，发给用户，并写到浏览器的cookie中，同时服务器自己也会保存一份。</span><br><span class="line">（c）在登录验证时，cookie：根据浏览器发送请求时附带的cookie的键值对进行判断，如果存在，则验证通过；　　session：在请求用户的cookie中获取随机字符串，根据随机字符串在session中获取其对应的值进行验证</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cors跨域（场景：前后端分离时，本地测试开发时使用）</span><br><span class="line">如果网站之间存在跨域，域名不同，端口不同会导致出现跨域，但凡出现跨域，浏览器就会出现同源策略的限制</span><br><span class="line">解决：在我们的服务端给我们响应数据，加上响应头---&gt; 在中间件加的</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">缓存/   常用的数据放在缓存里面，就不用走视图函数，请求进来通过所有的process_request,会到缓存里面查数据，有就直接拿，　　　　　　　　没有就走视图函数　　　　　　关键点：1：执行完所有的process_request才去缓存取数据　　　　　　　　　　2：执行完所有的process_response才将数据放到缓存</span><br><span class="line">关于缓存问题</span><br><span class="line">1:为什么放在最后一个process_request才去缓存</span><br><span class="line">因为需要验证完用户的请求，才能返回数据</span><br><span class="line"></span><br><span class="line">2:什么时候将数据放到缓存中</span><br><span class="line">第一次走中间件，缓存没有数据，会走视图函数，取数据库里面取数据，</span><br><span class="line">当走完process_response,才将数据放到缓存里，因为，走process_response的时候可能给我们的响应加处理</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">为什么使用缓存</span><br><span class="line">将常用且不太频繁修改的数据放入缓存。</span><br><span class="line">以后用户再来访问，先去缓存查看是否存在，如果有就返回</span><br><span class="line">否则，去数据库中获取并返回给用户（再加入到缓存，以便下次访问）</span><br></pre></td></tr></table></figure><h3 id="15-列举django中间件的5个方法？以及django中间件的应用场景？"><a href="#15-列举django中间件的5个方法？以及django中间件的应用场景？" class="headerlink" title="15.列举django中间件的5个方法？以及django中间件的应用场景？"></a>15.列举django中间件的5个方法？以及django中间件的应用场景？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">process_request(self,request)  先走request 通过路由匹配返回</span><br><span class="line">process_view(self, request, callback, callback_args, callback_kwargs) 再返回执行view</span><br><span class="line">process_template_response(self,request,response)   当视图函数的返回值</span><br><span class="line">process_exception(self, request, exception)  当视图函数的返回值对象中有render方法时，该方法才会被调用</span><br><span class="line">process_response(self, request, response)</span><br></pre></td></tr></table></figure><p>执行流程</p><p><img src="https://images2018.cnblogs.com/blog/1258691/201806/1258691-20180601133706615-2118245019.png" alt="img"></p><h3 id="16-简述什么是FBV和CBV？"><a href="#16-简述什么是FBV和CBV？" class="headerlink" title="16.简述什么是FBV和CBV？"></a>16.简述什么是FBV和CBV？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">FBV 基于函数</span><br><span class="line"># FBV 写法</span><br><span class="line"># urls.py</span><br><span class="line"> url(r&apos;^login/$&apos;,views.login, name=&quot;login&quot;),</span><br><span class="line"></span><br><span class="line"># views.py</span><br><span class="line">def login(request):</span><br><span class="line">    if request.method == &quot;POST&quot;:</span><br><span class="line">        print(request.POST)</span><br><span class="line"></span><br><span class="line">    return render(request,&quot;login.html&quot;)</span><br><span class="line"></span><br><span class="line"># HTML</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">    &lt;title&gt;登录页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=&quot;&#123;% url &apos;login&apos; %&#125;&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;user2&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">CBV 基于类</span><br><span class="line"># urls.py    </span><br><span class="line">url(r&apos;^login/$&apos;,views.Login.as_view(), name=&quot;login&quot;), </span><br><span class="line"></span><br><span class="line"># views.py</span><br><span class="line">from django.views import View</span><br><span class="line">class Login(View):   # 类首字母大写</span><br><span class="line">    def get(self,request):</span><br><span class="line">        return render(request,&quot;login.html&quot;)</span><br><span class="line">    def post(self,request):</span><br><span class="line">        print(request.POST)</span><br><span class="line">        return HttpResponse(&quot;OK&quot;)</span><br><span class="line"></span><br><span class="line">加装饰器</span><br><span class="line"></span><br><span class="line">=================================</span><br><span class="line">class IndexView(View):</span><br><span class="line">    </span><br><span class="line">    # 如果是crsf相关，必须放在此处</span><br><span class="line">    def dispach(self,request):</span><br><span class="line">        # 通过反射执行post/get </span><br><span class="line">    </span><br><span class="line">    @method_decoretor(装饰器函数)</span><br><span class="line">    def get(self,request):</span><br><span class="line">        pass</span><br><span class="line">        </span><br><span class="line">    def post(self,request):</span><br><span class="line">        pass </span><br><span class="line">路由：IndexView.as_view()</span><br></pre></td></tr></table></figure><h3 id="17-FBV与CBV的区别"><a href="#17-FBV与CBV的区别" class="headerlink" title="17.FBV与CBV的区别"></a>17.FBV与CBV的区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 没什么区别，因为他们的本质都是函数。CBV的.as_view()返回的view函数，view函数中调用类的dispatch方法，</span><br><span class="line">在dispatch方法中通过反射执行get/post/delete/put等方法。D</span><br><span class="line"></span><br><span class="line">非要说区别的话：</span><br><span class="line">- CBV比较简洁，GET/POST等业务功能分别放在不同get/post函数中。FBV自己做判断进行区分。</span><br></pre></td></tr></table></figure><h3 id="18-django的request对象是在什么时候创建的？"><a href="#18-django的request对象是在什么时候创建的？" class="headerlink" title="18.django的request对象是在什么时候创建的？"></a>18.django的request对象是在什么时候创建的？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当请求一个页面时, Django会建立一个包含请求元数据的 HttpRequest 对象. 当Django 加载对应的视图时, HttpRequest对象将作为视图函数的第一个参数. 每个视图会返回一个HttpResponse对象.</span><br></pre></td></tr></table></figure><h3 id="19-如何给CBV的程序添加装饰器？"><a href="#19-如何给CBV的程序添加装饰器？" class="headerlink" title="19.如何给CBV的程序添加装饰器？"></a>19.如何给CBV的程序添加装饰器？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">添加装饰器</span><br><span class="line">方式一：</span><br><span class="line">from django.views import View</span><br><span class="line">from django.utils.decorators import method_decorator  ---&gt; 需要引入memethod_decorator</span><br><span class="line"></span><br><span class="line">def auth(func):</span><br><span class="line">    def inner(*args,**kwargs):</span><br><span class="line">        return func(*args,**kwargs)</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line">class UserView(View):</span><br><span class="line">    @method_decorator(auth)</span><br><span class="line">    def get(self,request,*args,**kwargs):</span><br><span class="line">        return HttpResponse(&apos;...&apos;)    </span><br><span class="line"></span><br><span class="line">方式二：</span><br><span class="line">- csrf的装饰器要加到dispath前面</span><br><span class="line">from django.views import View</span><br><span class="line">from django.utils.decorators import method_decorator</span><br><span class="line">from django.views.decorators.csrf import csrf_exempt,csrf_protect   ---&gt; 需要引入 csrf_exempt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserView(View):</span><br><span class="line">    @method_decorator(csrf_exempt)</span><br><span class="line">    def dispatch(self, request, *args, **kwargs):</span><br><span class="line">        return HttpResponse(&apos;...&apos;)</span><br><span class="line"></span><br><span class="line">或者：</span><br><span class="line">from django.views import View</span><br><span class="line">from django.utils.decorators import method_decorator</span><br><span class="line">from django.views.decorators.csrf import csrf_exempt,csrf_protect</span><br><span class="line"></span><br><span class="line">@method_decorator(csrf_exempt,name=&apos;dispatch&apos;)  ---&gt;  指定名字</span><br><span class="line">class UserView(View):</span><br><span class="line">    def dispatch(self, request, *args, **kwargs):</span><br><span class="line">        return HttpResponse(&apos;...&apos;)</span><br></pre></td></tr></table></figure><h3 id="20-列举django-orm-中所有的方法（QuerySet对象的所有方法）"><a href="#20-列举django-orm-中所有的方法（QuerySet对象的所有方法）" class="headerlink" title="20.列举django orm 中所有的方法（QuerySet对象的所有方法）"></a>20.列举django orm 中所有的方法（QuerySet对象的所有方法）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">返回QuerySet对象的方法有：</span><br><span class="line">      all()</span><br><span class="line">      filter()</span><br><span class="line">      exclude()</span><br><span class="line">      order_by()</span><br><span class="line">      reverse()</span><br><span class="line">      distinct()</span><br><span class="line">  特殊的QuerySet：</span><br><span class="line">      values()       返回一个可迭代的字典序列</span><br><span class="line">      values_list() 返回一个可迭代的元组序列</span><br><span class="line">  返回具体对象的：</span><br><span class="line">      get()</span><br><span class="line">      first()</span><br><span class="line">      last()</span><br><span class="line">  返回布尔值的方法有：</span><br><span class="line">      exists()</span><br><span class="line">  返回数字的方法有：</span><br><span class="line">      count()</span><br></pre></td></tr></table></figure><h3 id="21-only和defer的区别？"><a href="#21-only和defer的区别？" class="headerlink" title="21.only和defer的区别？"></a>21.only和defer的区别？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def defer(self, *fields):</span><br><span class="line">   models.UserInfo.objects.defer(&apos;username&apos;,&apos;id&apos;)</span><br><span class="line">   或</span><br><span class="line">   models.UserInfo.objects.filter(...).defer(&apos;username&apos;,&apos;id&apos;)</span><br><span class="line">   #映射中排除某列数据</span><br><span class="line"></span><br><span class="line">def only(self, *fields):</span><br><span class="line">   #仅取某个表中的数据</span><br><span class="line">    models.UserInfo.objects.only(&apos;username&apos;,&apos;id&apos;)</span><br><span class="line">    或</span><br><span class="line">    models.UserInfo.objects.filter(...).only(&apos;username&apos;,&apos;id&apos;)</span><br></pre></td></tr></table></figure><h3 id="22-select-related和prefetch-related的区别？"><a href="#22-select-related和prefetch-related的区别？" class="headerlink" title="22.select_related和prefetch_related的区别？"></a>22.select_related和prefetch_related的区别？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 他俩都用于连表查询，减少SQL查询次数</span><br><span class="line">\select_related</span><br><span class="line">select_related主要针一对一和多对一关系进行优化，通过多表join关联查询，一次性获得所有数据，</span><br><span class="line">存放在内存中，但如果关联的表太多，会严重影响数据库性能。</span><br><span class="line">def index(request):</span><br><span class="line">    obj = Book.objects.all().select_related(&quot;publisher&quot;)</span><br><span class="line">    return render(request, &quot;index.html&quot;, locals())</span><br><span class="line">\prefetch_related</span><br><span class="line">prefetch_related是通过分表，先获取各个表的数据，存放在内存中，然后通过Python处理他们之间的关联。</span><br><span class="line">def index(request):</span><br><span class="line">    obj = Book.objects.all().prefetch_related(&quot;publisher&quot;)</span><br><span class="line">    return render(request, &quot;index.html&quot;, locals())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">def select_related(self, *fields)</span><br><span class="line">     性能相关：表之间进行join连表操作，一次性获取关联的数据。</span><br><span class="line">     model.tb.objects.all().select_related()</span><br><span class="line">     model.tb.objects.all().select_related(&apos;外键字段&apos;)</span><br><span class="line">     model.tb.objects.all().select_related(&apos;外键字段__外键字段&apos;)</span><br><span class="line"></span><br><span class="line">def prefetch_related(self, *lookups)</span><br><span class="line">    性能相关：多表连表操作时速度会慢，使用其执行多次SQL查询在Python代码中实现连表操作。</span><br><span class="line">            # 获取所有用户表</span><br><span class="line">            # 获取用户类型表where id in (用户表中的查到的所有用户ID)</span><br><span class="line">            models.UserInfo.objects.prefetch_related(&apos;外键字段&apos;)</span><br><span class="line"></span><br><span class="line">            from django.db.models import Count, Case, When, IntegerField</span><br><span class="line">            Article.objects.annotate(</span><br><span class="line">                numviews=Count(Case(</span><br><span class="line">                    When(readership__what_time__lt=treshold, then=1),</span><br><span class="line">                    output_field=CharField(),</span><br><span class="line">                ))</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            students = Student.objects.all().annotate(num_excused_absences=models.Sum(</span><br><span class="line">                models.Case(</span><br><span class="line">                    models.When(absence__type=&apos;Excused&apos;, then=1),</span><br><span class="line">                default=0,</span><br><span class="line">                output_field=models.IntegerField()</span><br><span class="line">            )))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 1次SQL</span><br><span class="line"># select * from userinfo</span><br><span class="line">objs = UserInfo.obejcts.all()</span><br><span class="line">for item in objs:</span><br><span class="line">    print(item.name)</span><br><span class="line">    </span><br><span class="line"># n+1次SQL</span><br><span class="line"># select * from userinfo</span><br><span class="line">objs = UserInfo.obejcts.all()</span><br><span class="line">for item in objs:</span><br><span class="line">    # select * from usertype where id = item.id </span><br><span class="line">    print(item.name,item.ut.title)</span><br><span class="line">    </span><br><span class="line">select_related（）</span><br><span class="line"># 1次SQL</span><br><span class="line"># select * from userinfo inner join usertype on userinfo.ut_id = usertype.id </span><br><span class="line">objs = UserInfo.obejcts.all().select_related(&apos;ut&apos;)  连表查询</span><br><span class="line">for item in objs:</span><br><span class="line">    print(item.name,item.ut.title)</span><br><span class="line">            </span><br><span class="line">.prefetch_related()</span><br><span class="line">    # select * from userinfo where id &lt;= 8</span><br><span class="line">    # 计算：[1,2]</span><br><span class="line">    # select * from usertype where id in [1,2]</span><br><span class="line">    objs = UserInfo.obejcts.filter(id__lte=8).prefetch_related(&apos;ut&apos;)</span><br><span class="line">    for obj in objs:</span><br><span class="line">        print(obj.name,obj.ut.title)</span><br></pre></td></tr></table></figure><h3 id="23-filter和exclude的区别？"><a href="#23-filter和exclude的区别？" class="headerlink" title="23.filter和exclude的区别？"></a>23.filter和exclude的区别？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def filter(self, *args, **kwargs)</span><br><span class="line">    # 条件查询(符合条件)</span><br><span class="line">     # 查出符合条件</span><br><span class="line">    # 条件可以是：参数，字典，Q</span><br><span class="line"></span><br><span class="line">def exclude(self, *args, **kwargs)</span><br><span class="line">    # 条件查询(排除条件)</span><br><span class="line">    # 排除不想要的</span><br><span class="line">    # 条件可以是：参数，字典，Q</span><br></pre></td></tr></table></figure><h3 id="24-列举django-orm中三种能写sql语句的方法。"><a href="#24-列举django-orm中三种能写sql语句的方法。" class="headerlink" title="24.列举django orm中三种能写sql语句的方法。"></a>24.列举django orm中三种能写sql语句的方法。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">原生SQL ---&gt;  connection</span><br><span class="line">from django.db import connection, connections</span><br><span class="line">cursor = connection.cursor()  # cursor = connections[&apos;default&apos;].cursor()</span><br><span class="line">cursor.execute(&quot;&quot;&quot;SELECT * from auth_user where id = %s&quot;&quot;&quot;, [1])</span><br><span class="line">row = cursor.fetchone() # fetchall()/fetchmany(..)</span><br><span class="line">靠近原生SQL--&gt;extra\raw</span><br><span class="line">extra</span><br><span class="line">- extra</span><br><span class="line">    def extra(self, select=None, where=None, params=None, tables=None, order_by=None, </span><br><span class="line">select_params=None)</span><br><span class="line">        # 构造额外的查询条件或者映射，如：子查询</span><br><span class="line">        Entry.objects.extra(select=&#123;&apos;new_id&apos;: &quot;select col from sometable where othercol &gt; %s&quot;&#125;,</span><br><span class="line"> select_params=(1,))</span><br><span class="line">        Entry.objects.extra(where=[&apos;headline=%s&apos;], params=[&apos;Lennon&apos;])</span><br><span class="line">        Entry.objects.extra(where=[&quot;foo=&apos;a&apos; OR bar = &apos;a&apos;&quot;, &quot;baz = &apos;a&apos;&quot;])</span><br><span class="line">        Entry.objects.extra(select=&#123;&apos;new_id&apos;: &quot;select id from tb where id &gt; %s&quot;&#125;, s</span><br><span class="line">elect_params=(1,), order_by=[&apos;-nid&apos;])</span><br><span class="line"></span><br><span class="line">- raw </span><br><span class="line">def raw(self, raw_query, params=None, translations=None, using=None):</span><br><span class="line">    # 执行原生SQL</span><br><span class="line">    models.UserInfo.objects.raw(&apos;select * from userinfo&apos;)</span><br><span class="line">    # 如果SQL是其他表时，必须将名字设置为当前UserInfo对象的主键列名</span><br><span class="line">    models.UserInfo.objects.raw(&apos;select id as nid,name as title  from 其他表&apos;)</span><br><span class="line">    # 为原生SQL设置参数</span><br><span class="line">    models.UserInfo.objects.raw(&apos;select id as nid from userinfo where nid&gt;%s&apos;, params=[12,])</span><br><span class="line">    # 将获取的到列名转换为指定列名</span><br><span class="line">    name_map = &#123;&apos;first&apos;: &apos;first_name&apos;, &apos;last&apos;: &apos;last_name&apos;, &apos;bd&apos;: &apos;birth_date&apos;, &apos;pk&apos;: &apos;id&apos;&#125;</span><br><span class="line">    Person.objects.raw(&apos;SELECT * FROM some_other_table&apos;, translations=name_map)</span><br><span class="line">    # 指定数据库</span><br><span class="line">    models.UserInfo.objects.raw(&apos;select * from userinfo&apos;, using=&quot;default&quot;)</span><br></pre></td></tr></table></figure><h3 id="25-django-orm-中如何设置读写分离？"><a href="#25-django-orm-中如何设置读写分离？" class="headerlink" title="25.django orm 中如何设置读写分离？"></a>25.django orm 中如何设置读写分离？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"> 方式一：手动使用queryset的using方法</span><br><span class="line">from django.shortcuts import render,HttpResponse</span><br><span class="line">from app01 import models</span><br><span class="line">def index(request):</span><br><span class="line"></span><br><span class="line">    models.UserType.objects.using(&apos;db1&apos;).create(title=&apos;普通用户&apos;)</span><br><span class="line">　　# 手动指定去某个数据库取数据</span><br><span class="line">    result = models.UserType.objects.all().using(&apos;db1&apos;)</span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line">    return HttpResponse(&apos;...&apos;)</span><br><span class="line"></span><br><span class="line">方式二：写配置文件</span><br><span class="line">class Router1:</span><br><span class="line">　　#  指定到某个数据库取数据</span><br><span class="line">    def db_for_read(self, model, **hints):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Attempts to read auth models go to auth_db.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if model._meta.model_name == &apos;usertype&apos;:</span><br><span class="line">            return &apos;db1&apos;</span><br><span class="line">        else:</span><br><span class="line">            return &apos;default&apos;</span><br><span class="line">　　　# 指定到某个数据库存数据</span><br><span class="line">    def db_for_write(self, model, **hints):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Attempts to write auth models go to auth_db.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return &apos;default&apos;</span><br><span class="line">再写到配置</span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;,</span><br><span class="line">        &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;),</span><br><span class="line">    &#125;,</span><br><span class="line">    &apos;db1&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;,</span><br><span class="line">        &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">DATABASE_ROUTERS = [&apos;db_router.Router1&apos;,]</span><br></pre></td></tr></table></figure><h3 id="26-F和Q的作用"><a href="#26-F和Q的作用" class="headerlink" title="26.F和Q的作用?"></a>26.F和Q的作用?</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  F:主要用来获取原数据进行计算。</span><br><span class="line">  Django 支持 F() 对象之间以及 F() 对象和常数之间的加减乘除和取模的操作。</span><br><span class="line">  修改操作也可以使用F函数,比如将每件商品的价格都在原价格的基础上增加10</span><br><span class="line">from django.db.models import F</span><br><span class="line">from app01.models import Goods</span><br><span class="line"> </span><br><span class="line">Goods.objects.update(price=F(&quot;price&quot;)+10)  # 对于goods表中每件商品的价格都在原价格的基础上增加10元F查询专门对对象中某列值的操作，不可使用__双下划线！</span><br><span class="line">Q:用来进行复杂查询    Q查询可以组合使用 “&amp;”, “|” 操作符，当一个操作符是用于两个Q的对象,它产生一个新的Q对象，　　Q对象可以用 “~” 操作符放在前面表示否定，也可允许否定与不否定形式的组合。　　Q对象可以与关键字参数查询一起使用，不过一定要把Q对象放在关键字参数查询的前面。</span><br><span class="line">  Q(条件1) | Q(条件2) 或</span><br><span class="line">  Q(条件1) &amp; Q(条件2) 且</span><br><span class="line">  Q(条件1) &amp; ~</span><br><span class="line">  Q(条件2) 非</span><br></pre></td></tr></table></figure><p>扩展:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">11.Django中查询queryset时什么情况下用Q?</span><br><span class="line">    关键字参数查询 - 输入filter()等 - 是“AND”编辑在一起。如果需要执行更复杂的查询（例如，带OR语句的查询），则可以使用。Q objects</span><br><span class="line">    例如需要进行复合条件的查询的SQL语句如下：</span><br><span class="line">    select * from goods where name like &apos;%好看%&apos; or title like &apos;%好看%&apos;; </span><br><span class="line"></span><br><span class="line">    使用Q就可以写成：</span><br><span class="line">    from django.db.models import Q</span><br><span class="line">    obs = Goods.objects.filter(Q(name__contains=&apos;好看&apos;)|Q(title__contains=&apos;好看&apos;))</span><br></pre></td></tr></table></figure><h3 id="27-values和values-list的区别？"><a href="#27-values和values-list的区别？" class="headerlink" title="27.values和values_list的区别？"></a>27.values和values_list的区别？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def values(self, *fields):</span><br><span class="line">    # 获取每行数据为字典格式</span><br><span class="line"></span><br><span class="line">def values_list(self, *fields, **kwargs):</span><br><span class="line">    # 获取每行数据为元祖</span><br></pre></td></tr></table></figure><h3 id="28-如何使用django-orm批量创建数据？"><a href="#28-如何使用django-orm批量创建数据？" class="headerlink" title="28.如何使用django orm批量创建数据？"></a>28.如何使用django orm批量创建数据？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def bulk_create(self, objs, batch_size=None):</span><br><span class="line">    # 批量插入</span><br><span class="line">    # batch_size表示一次插入的个数</span><br><span class="line">    objs = [</span><br><span class="line">        models.DDD(name=&apos;r11&apos;),</span><br><span class="line">        models.DDD(name=&apos;r22&apos;)</span><br><span class="line">    ]</span><br><span class="line">    models.DDD.objects.bulk_create(objs, 10)</span><br></pre></td></tr></table></figure><h3 id="29-django的Form和ModeForm的作用？"><a href="#29-django的Form和ModeForm的作用？" class="headerlink" title="29.django的Form和ModeForm的作用？"></a>29.django的Form和ModeForm的作用？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- 作用：</span><br><span class="line">     - 对用户请求数据格式进行校验</span><br><span class="line">     - 自动生成HTML标签</span><br><span class="line"> - 区别：</span><br><span class="line">     - Form，字段需要自己手写。</span><br><span class="line">         class Form(Form):</span><br><span class="line">             xx = fields.CharField(.)</span><br><span class="line">             xx = fields.CharField(.)</span><br><span class="line">             xx = fields.CharField(.)</span><br><span class="line">             xx = fields.CharField(.)</span><br><span class="line">     - ModelForm，可以通过Meta进行定义</span><br><span class="line">         class MForm(ModelForm):</span><br><span class="line">             class Meta:</span><br><span class="line">                 fields = &quot;__all__&quot;</span><br><span class="line">                 model = UserInfo                            </span><br><span class="line"> - 应用：只要是客户端向服务端发送表单数据时，都可以进行使用，如：用户登录注册</span><br></pre></td></tr></table></figure><h3 id="30-django的Form组件中，如果字段中包含choices参数，请使用两种方式实现数据源实时更新。"><a href="#30-django的Form组件中，如果字段中包含choices参数，请使用两种方式实现数据源实时更新。" class="headerlink" title="30.django的Form组件中，如果字段中包含choices参数，请使用两种方式实现数据源实时更新。"></a>30.django的Form组件中，如果字段中包含choices参数，请使用两种方式实现数据源实时更新。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">方式一:重写构造方法，在构造方法中重新去数据库获取值</span><br><span class="line"> class UserForm(Form):</span><br><span class="line">     name = fields.CharField(label=&apos;用户名&apos;,max_length=32)</span><br><span class="line">     email = fields.EmailField(label=&apos;邮箱&apos;)</span><br><span class="line">     ut_id = fields.ChoiceField(</span><br><span class="line">         # choices=[(1,&apos;普通用户&apos;),(2,&apos;IP用户&apos;)]</span><br><span class="line">         choices=[]</span><br><span class="line">     )</span><br><span class="line"></span><br><span class="line">     def __init__(self,*args,**kwargs):</span><br><span class="line">         super(UserForm,self).__init__(*args,**kwargs)</span><br><span class="line"></span><br><span class="line">         self.fields[&apos;ut_id&apos;].choices = models.UserType.objects.all().values_list(&apos;id&apos;,&apos;title&apos;)</span><br><span class="line"> 方式二: ModelChoiceField字段</span><br><span class="line"> from django.forms import Form</span><br><span class="line"> from django.forms import fields</span><br><span class="line"> from django.forms.models import ModelChoiceField</span><br><span class="line"> class UserForm(Form):</span><br><span class="line">     name = fields.CharField(label=&apos;用户名&apos;,max_length=32)</span><br><span class="line">     email = fields.EmailField(label=&apos;邮箱&apos;)</span><br><span class="line">     ut_id = ModelChoiceField(queryset=models.UserType.objects.all())    </span><br><span class="line"></span><br><span class="line"> 依赖：</span><br><span class="line">     class UserType(models.Model):</span><br><span class="line">         title = models.CharField(max_length=32)</span><br><span class="line"></span><br><span class="line">         def __str__(self):</span><br><span class="line">             return self.title</span><br></pre></td></tr></table></figure><h3 id="31-django的Model中的ForeignKey字段中的on-delete参数有什么作用？"><a href="#31-django的Model中的ForeignKey字段中的on-delete参数有什么作用？" class="headerlink" title="31.django的Model中的ForeignKey字段中的on_delete参数有什么作用？"></a>31.django的Model中的ForeignKey字段中的on_delete参数有什么作用？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">在django2.0后，定义外键和一对一关系的时候需要加on_delete选项，此参数为了避免两个表里的数据不一致问题，不然会报错：</span><br><span class="line"></span><br><span class="line">TypeError: __init__() missing 1 required positional argument: &apos;on_delete&apos;</span><br><span class="line"></span><br><span class="line"> 举例说明：</span><br><span class="line"></span><br><span class="line">user=models.OneToOneField(User)</span><br><span class="line"></span><br><span class="line">owner=models.ForeignKey(UserProfile)</span><br><span class="line"></span><br><span class="line">需要改成：</span><br><span class="line"></span><br><span class="line">user=models.OneToOneField(User,on_delete=models.CASCADE)          --在老版本这个参数（models.CASCADE）是默认值</span><br><span class="line"></span><br><span class="line">owner=models.ForeignKey(UserProfile,on_delete=models.CASCADE)    --在老版本这个参数（models.CASCADE）是默认值</span><br><span class="line">参数说明：</span><br><span class="line"></span><br><span class="line">on_delete有CASCADE、PROTECT、SET_NULL、SET_DEFAULT、SET()五个可选择的值</span><br><span class="line"></span><br><span class="line">CASCADE：此值设置，是级联删除。</span><br><span class="line">PROTECT：此值设置，是会报完整性错误。</span><br><span class="line">SET_NULL：此值设置，会把外键设置为null，前提是允许为null。</span><br><span class="line">SET_DEFAULT：此值设置，会把设置为外键的默认值。</span><br><span class="line">SET()：此值设置，会调用外面的值，可以是一个函数。</span><br><span class="line">一般情况下使用CASCADE就可以了。</span><br></pre></td></tr></table></figure><h3 id="32-django中csrf的实现机制？"><a href="#32-django中csrf的实现机制？" class="headerlink" title="32.django中csrf的实现机制？"></a>32.django中csrf的实现机制？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">目的：防止用户直接向服务端发起POST请求</span><br><span class="line">- 用户先发送GET获取csrf token: Form表单中一个隐藏的标签 + token</span><br><span class="line">- 发起POST请求时，需要携带之前发送给用户的csrf token；</span><br><span class="line">- 在中间件的process_view方法中进行校验。</span><br><span class="line"></span><br><span class="line">在html中添加&#123;%csrf_token%&#125;标签</span><br><span class="line"></span><br><span class="line">第一步：django第一次响应来自某个客户端的请求时,后端随机产生一个token值，把这个token保存在SESSION状态中;同时,后端把这个token放到cookie中交给前端  页面；</span><br><span class="line">    第二步：下次前端需要发起请求（比如发帖）的时候把这个token值加入到请求数据或者头信息中,一起传给后端；Cookies:&#123;csrftoken:xxxxx&#125;</span><br><span class="line">    第三步：后端校验前端请求带过来的token和SESSION里的token是否一致。</span><br></pre></td></tr></table></figure><h3 id="33-django如何实现websocket？"><a href="#33-django如何实现websocket？" class="headerlink" title="33.django如何实现websocket？"></a>33.django如何实现websocket？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django中可以通过channel实现websocket</span><br></pre></td></tr></table></figure><h3 id="34-基于django使用ajax发送post请求时，都可以使用哪种方法携带csrf-token？"><a href="#34-基于django使用ajax发送post请求时，都可以使用哪种方法携带csrf-token？" class="headerlink" title="34.基于django使用ajax发送post请求时，都可以使用哪种方法携带csrf token？"></a>34.基于django使用ajax发送post请求时，都可以使用哪种方法携带csrf token？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">//方式一给每个ajax都加上上请求头</span><br><span class="line">    function Do1()&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:&quot;/index/&quot;,</span><br><span class="line">            data:&#123;id:1&#125;,</span><br><span class="line">            type:&apos;POST&apos;,</span><br><span class="line">　　　　　　　data:&#123;csrfmiddlewaretoken:&apos;&#123;&#123; csrf_token &#125;&#125;&apos;,name:&apos;alex&apos;&#125;</span><br><span class="line">            success:function(data)&#123;</span><br><span class="line">                console.log(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">方式二：需要先下载jQuery-cookie，才能去cookie中获取token</span><br><span class="line">        function Do1()&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:&quot;/index/&quot;,</span><br><span class="line">            data:&#123;id:1&#125;,</span><br><span class="line">            type:&apos;POST&apos;,</span><br><span class="line">            headers:&#123;</span><br><span class="line">              &apos;X-CSRFToken&apos;:$.cookie(&apos;csrftoken&apos;)  // 去cookie中获取</span><br><span class="line">            &#125;,</span><br><span class="line">            success:function(data)&#123;</span><br><span class="line">                console.log(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">方式三：搞个函数ajaxSetup，当有多的ajax请求，即会执行这个函数</span><br><span class="line">        $.ajaxSetup(&#123;</span><br><span class="line">           beforeSend:function (xhr,settings) &#123;</span><br><span class="line">               xhr.setRequestHeader(&quot;X-CSRFToken&quot;,$.cookie(&apos;csrftoken&apos;))</span><br><span class="line">           &#125; </span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">函数版本</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; onclick=&quot;Do1();&quot;  value=&quot;Do it&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; onclick=&quot;Do2();&quot;  value=&quot;Do it&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; onclick=&quot;Do3();&quot;  value=&quot;Do it&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;/static/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;/static/jquery.cookie.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $.ajaxSetup(&#123;</span><br><span class="line">        beforeSend: function(xhr, settings) &#123;</span><br><span class="line">            xhr.setRequestHeader(&quot;X-CSRFToken&quot;, $.cookie(&apos;csrftoken&apos;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">     function Do1()&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:&quot;/index/&quot;,</span><br><span class="line">            data:&#123;id:1&#125;,</span><br><span class="line">            type:&apos;POST&apos;,</span><br><span class="line">            success:function(data)&#123;</span><br><span class="line">                console.log(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     function Do2()&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:&quot;/index/&quot;,</span><br><span class="line">            data:&#123;id:1&#125;,</span><br><span class="line">            type:&apos;POST&apos;,</span><br><span class="line">            success:function(data)&#123;</span><br><span class="line">                console.log(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     function Do3()&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:&quot;/index/&quot;,</span><br><span class="line">            data:&#123;id:1&#125;,</span><br><span class="line">            type:&apos;POST&apos;,</span><br><span class="line">            success:function(data)&#123;</span><br><span class="line">                console.log(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="35-django中如何实现orm表中添加数据时创建一条日志记录。"><a href="#35-django中如何实现orm表中添加数据时创建一条日志记录。" class="headerlink" title="35.django中如何实现orm表中添加数据时创建一条日志记录。"></a>35.django中如何实现orm表中添加数据时创建一条日志记录。</h3><p>给信号注册函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用django的信号机制，可以在添加、删除数据前后设置日志记录</span><br><span class="line">pre_init  # Django中的model对象执行其构造方法前,自动触发</span><br><span class="line">post_init  # Django中的model对象执行其构造方法后,自动触发</span><br><span class="line">pre_save  # Django中的model对象保存前,自动触发</span><br><span class="line">post_save  # Django中的model对象保存后,自动触发</span><br><span class="line">pre_delete  # Django中的model对象删除前,自动触发</span><br><span class="line">post_delete  # Django中的model对象删除后,自动触发</span><br></pre></td></tr></table></figure><h3 id="36-django缓存如何设置？"><a href="#36-django缓存如何设置？" class="headerlink" title="36.django缓存如何设置？"></a>36.django缓存如何设置？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">jango中提供了6种缓存方式：</span><br><span class="line">　　开发调试（不加缓存）</span><br><span class="line">　　内存</span><br><span class="line">　　文件</span><br><span class="line">　　数据库</span><br><span class="line">　　Memcache缓存（python-memcached模块）</span><br><span class="line">　　Memcache缓存（pylibmc模块）</span><br><span class="line"></span><br><span class="line">安装第三方组件支持redis：</span><br><span class="line">　　django-redis组件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">设置缓存</span><br><span class="line"># 全站缓存（中间件）</span><br><span class="line">MIDDLEWARE_CLASSES = (</span><br><span class="line">    ‘django.middleware.cache.UpdateCacheMiddleware’, #第一</span><br><span class="line">    &apos;django.middleware.common.CommonMiddleware&apos;,</span><br><span class="line">    ‘django.middleware.cache.FetchFromCacheMiddleware’, #最后</span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"># 视图缓存</span><br><span class="line">from django.views.decorators.cache import cache_page</span><br><span class="line">import time</span><br><span class="line">  </span><br><span class="line">@cache_page(15)          #超时时间为15秒</span><br><span class="line">def index(request):</span><br><span class="line">   t=time.time()      #获取当前时间</span><br><span class="line">   return render(request,&quot;index.html&quot;,locals())</span><br><span class="line"> </span><br><span class="line"># 模板缓存</span><br><span class="line">&#123;% load cache %&#125;</span><br><span class="line"> &lt;h3 style=&quot;color: green&quot;&gt;不缓存:-----&#123;&#123; t &#125;&#125;&lt;/h3&gt;</span><br><span class="line">  </span><br><span class="line">&#123;% cache 2 &apos;name&apos; %&#125; # 存的key</span><br><span class="line"> &lt;h3&gt;缓存:-----:&#123;&#123; t &#125;&#125;&lt;/h3&gt;</span><br><span class="line">&#123;% endcache %&#125;</span><br></pre></td></tr></table></figure><h3 id="37-django的缓存能使用redis吗？如果可以的话，如何配置？"><a href="#37-django的缓存能使用redis吗？如果可以的话，如何配置？" class="headerlink" title="37.django的缓存能使用redis吗？如果可以的话，如何配置？"></a>37.django的缓存能使用redis吗？如果可以的话，如何配置？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  pip install django-redis  </span><br><span class="line">  apt-get install redis-serv</span><br><span class="line"></span><br><span class="line">在setting添加配置文件</span><br><span class="line">CACHES = &#123;</span><br><span class="line">    &quot;default&quot;: &#123;</span><br><span class="line">        &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;, # 缓存类型</span><br><span class="line">        &quot;LOCATION&quot;: &quot;127.0.0.1:6379&quot;, # ip端口</span><br><span class="line">        &quot;OPTIONS&quot;: &#123;</span><br><span class="line">            &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,  #</span><br><span class="line">            &quot;CONNECTION_POOL_KWARGS&quot;: &#123;&quot;max_connections&quot;: 100&#125; # 连接池最大连接数</span><br><span class="line">            # &quot;PASSWORD&quot;: &quot;密码&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">使用</span><br><span class="line">from django.shortcuts import render,HttpResponse</span><br><span class="line">from django_redis import get_redis_connection</span><br><span class="line">  </span><br><span class="line">def index(request):</span><br><span class="line"># 根据名字去连接池中获取连接</span><br><span class="line">conn = get_redis_connection(&quot;default&quot;)</span><br><span class="line">    conn.hset(&apos;n1&apos;,&apos;k1&apos;,&apos;v1&apos;) # 存数据</span><br><span class="line">    return HttpResponse(&apos;...&apos;)</span><br></pre></td></tr></table></figure><h3 id="38-django路由系统中name的作用？"><a href="#38-django路由系统中name的作用？" class="headerlink" title="38.django路由系统中name的作用？"></a>38.django路由系统中name的作用？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">反向解析路由字符串</span><br><span class="line">路由系统中name的作用：反向解析</span><br><span class="line">url(r&apos;^home&apos;, views.home, name=&apos;home&apos;)在模板中使用：&#123; % url &apos;home&apos; %&#125;在视图中使用：reverse(“home”）</span><br></pre></td></tr></table></figure><h3 id="39-django的模板中filter和simple-tag的区别？"><a href="#39-django的模板中filter和simple-tag的区别？" class="headerlink" title="39.django的模板中filter和simple_tag的区别？"></a>39.django的模板中filter和simple_tag的区别？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filter : 类似管道,只能接受两个参数第一个参数是|前的数据</span><br><span class="line"></span><br><span class="line">simple_tag : 类似函数1、模板继承：&#123;% extends &apos;layouts.html&apos; %&#125;2、自定义方法</span><br><span class="line">   &apos;filter&apos;：只能传递两个参数，可以在if、for语句中使用</span><br><span class="line">   &apos;simple_tag&apos;：可以无线传参，不能在if for中使用</span><br><span class="line">   &apos;inclusion_tags&apos;：可以使用模板和后端数据</span><br><span class="line">3、防xss攻击： &apos;|safe&apos;、&apos;mark_safe&apos;</span><br></pre></td></tr></table></figure><h3 id="40-django-debug-toolbar的作用？"><a href="#40-django-debug-toolbar的作用？" class="headerlink" title="40.django-debug-toolbar的作用？"></a>40.django-debug-toolbar的作用？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一、查看访问的速度、数据库的行为、cache命中等信息。 </span><br><span class="line">二、尤其在Mysql访问等的分析上大有用处(sql查询速度)</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_39198406/article/details/78821677" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39198406/article/details/78821677</a></p><h3 id="41-django中如何实现单元测试？"><a href="#41-django中如何实现单元测试？" class="headerlink" title="41.django中如何实现单元测试？"></a>41.django中如何实现单元测试？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">对于每一个测试方法都会将setUp()和tearDown()方法执行一遍</span><br><span class="line">会单独新建一个测试数据库来进行数据库的操作方面的测试，默认在测试完成后销毁。</span><br><span class="line">在测试方法中对数据库进行增删操作，最后都会被清除。也就是说，在test_add中插入的数据，在test_add测试结束后插入的数据会被清除。</span><br><span class="line">django单元测试时为了模拟生产环境，会修改settings中的变量，例如, 把DEBUG变量修改为True, 把ALLOWED_HOSTS修改为[*]。</span><br></pre></td></tr></table></figure><h3 id="42-解释orm中-db-first-和-code-first的含义？"><a href="#42-解释orm中-db-first-和-code-first的含义？" class="headerlink" title="42.解释orm中 db first 和 code first的含义？"></a>42.解释orm中 db first 和 code first的含义？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db first: 先创建数据库，再更新表模型</span><br><span class="line">code first：先写表模型，再更新数据库</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/jassin-du/p/8988897.html" target="_blank" rel="noopener">https://www.cnblogs.com/jassin-du/p/8988897.html</a></p><h3 id="43-django中如何根据数据库表生成model中的类？"><a href="#43-django中如何根据数据库表生成model中的类？" class="headerlink" title="43.django中如何根据数据库表生成model中的类？"></a>43.django中如何根据数据库表生成model中的类？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、修改seting文件，在setting里面设置要连接的数据库类型和名称、地址</span><br><span class="line">2、运行下面代码可以自动生成models模型文件</span><br><span class="line">       - python manage.py inspectdb</span><br><span class="line">3、创建一个app执行下下面代码：</span><br><span class="line">       - python manage.py inspectdb &gt; app/models.py</span><br></pre></td></tr></table></figure><h3 id="44-使用orm和原生sql的优缺点？"><a href="#44-使用orm和原生sql的优缺点？" class="headerlink" title="44.使用orm和原生sql的优缺点？"></a>44.使用orm和原生sql的优缺点？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SQL：</span><br><span class="line"># 优点：</span><br><span class="line">执行速度快</span><br><span class="line"># 缺点：</span><br><span class="line">编写复杂，开发效率不高</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ORM：</span><br><span class="line"># 优点：</span><br><span class="line">让用户不再写SQL语句，提高开发效率</span><br><span class="line">可以很方便地引入数据缓存之类的附加功能</span><br><span class="line"># 缺点：</span><br><span class="line">在处理多表联查、where条件复杂查询时，ORM的语法会变得复杂。</span><br><span class="line">没有原生SQL速度快</span><br></pre></td></tr></table></figure><h3 id="45-简述MVC和MTV"><a href="#45-简述MVC和MTV" class="headerlink" title="45.简述MVC和MTV"></a>45.简述MVC和MTV</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">16.MVC的核心思想 </span><br><span class="line">程序解耦，让不同的代码块之间降低耦合，增强代码的可扩展和可移植性，实现向后兼容。</span><br><span class="line"></span><br><span class="line">MVC软件系统分为三个基本部分：模型(Model)、视图(View)和控制器(Controller)</span><br><span class="line">    Model：负责业务对象与数据库的映射(ORM)</span><br><span class="line">    View：负责与用户的交互</span><br><span class="line">    Control：接受用户的输入调用模型和视图完成用户的请求</span><br><span class="line">Django框架的MTV设计模式借鉴了MVC框架的思想,三部分为：Model、Template和View</span><br><span class="line">    Model(模型)：负责业务对象与数据库的对象(ORM)</span><br><span class="line">    Template(模版)：负责如何把页面展示给用户</span><br><span class="line">    View(视图)：负责业务逻辑，并在适当的时候调用Model和Template</span><br><span class="line">    此外,Django还有一个urls分发器,</span><br><span class="line">    它将一个个URL的页面请求分发给不同的view处理,view再调用相应的Model和Template</span><br></pre></td></tr></table></figure><h3 id="46-django的contenttype组件的作用？"><a href="#46-django的contenttype组件的作用？" class="headerlink" title="46.django的contenttype组件的作用？"></a>46.django的contenttype组件的作用？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">contenttype是django的一个组件(app)，它可以将django下所有app下的表记录下来</span><br><span class="line">可以使用他再加上表中的两个字段,实现一张表和N张表动态创建FK关系。</span><br><span class="line">   - 字段：表名称</span><br><span class="line">   - 字段：数据行ID</span><br><span class="line">应用：路飞表结构优惠券和专题课和学位课关联</span><br></pre></td></tr></table></figure><h3 id="47-谈谈你对restfull-规范的认识？"><a href="#47-谈谈你对restfull-规范的认识？" class="headerlink" title="47.谈谈你对restfull 规范的认识？"></a>47.谈谈你对restfull 规范的认识？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">restful其实就是一套编写接口的&apos;协议&apos;，规定如何编写以及如何设置返回值、状态码等信息。</span><br><span class="line"># 最显著的特点：</span><br><span class="line"># 用restful: </span><br><span class="line">    给用户一个url，根据method不同在后端做不同的处理</span><br><span class="line">    比如：post创建数据、get获取数据、put和patch修改数据、delete删除数据。</span><br><span class="line"># 不用restful: </span><br><span class="line">    给调用者很多url，每个url代表一个功能，比如：add_user/delte_user/edit_user/</span><br><span class="line"># 当然，还有协议其他的，比如：</span><br><span class="line">    &apos;版本&apos;来控制让程序有多个版本共存的情况，版本可以放在 url、请求头（accept/自定义）、GET参数</span><br><span class="line">    &apos;状态码&apos;200/300/400/500</span><br><span class="line">    &apos;url中尽量使用名词&apos;restful也可以称为“面向资源编程”</span><br><span class="line">    &apos;api标示&apos;</span><br><span class="line">        api.luffycity.com</span><br><span class="line">        www.luffycity.com/api/</span><br></pre></td></tr></table></figure><h3 id="48-接口的幂等性是什么意思？"><a href="#48-接口的幂等性是什么意思？" class="headerlink" title="48.接口的幂等性是什么意思？"></a>48.接口的幂等性是什么意思？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&apos;一个接口通过1次相同的访问，再对该接口进行N次相同的访问时，对资源不造影响就认为接口具有幂等性。&apos;</span><br><span class="line">    GET，  #第一次获取结果、第二次也是获取结果对资源都不会造成影响，幂等。</span><br><span class="line">    POST， #第一次新增数据，第二次也会再次新增，非幂等。</span><br><span class="line">    PUT，  #第一次更新数据，第二次不会再次更新，幂等。</span><br><span class="line">    PATCH，#第一次更新数据，第二次不会再次更新，非幂等。</span><br><span class="line">    DELTE，#第一次删除数据，第二次不在再删除，幂等。</span><br></pre></td></tr></table></figure><h3 id="49-什么是RPC？"><a href="#49-什么是RPC？" class="headerlink" title="49.什么是RPC？"></a>49.什么是RPC？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&apos;远程过程调用协议&apos;</span><br><span class="line">是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。</span><br><span class="line">进化的顺序: 现有的RPC,然后有的RESTful规范</span><br></pre></td></tr></table></figure><h3 id="50-Http和Https的区别？"><a href="#50-Http和Https的区别？" class="headerlink" title="50.Http和Https的区别？"></a>50.Http和Https的区别？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#Http: 80端口</span><br><span class="line">#https: 443端口</span><br><span class="line"># http信息是明文传输，https则是具有安全性的ssl加密传输协议。</span><br><span class="line">#- 自定义证书 </span><br><span class="line">    - 服务端：创建一对证书</span><br><span class="line">    - 客户端：必须携带证书</span><br><span class="line">#- 购买证书</span><br><span class="line">    - 服务端： 创建一对证书，。。。。</span><br><span class="line">    - 客户端： 去机构获取证书，数据加密后发给咱们的服务单</span><br><span class="line">    - 证书机构:公钥给改机构</span><br></pre></td></tr></table></figure><h3 id="51-为什么要使用django-rest-framework框架？"><a href="#51-为什么要使用django-rest-framework框架？" class="headerlink" title="51.为什么要使用django rest framework框架？"></a>51.为什么要使用django rest framework框架？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 在编写接口时可以不使用django rest framework框架，</span><br><span class="line"># 不使用：也可以做，可以用django的CBV来实现，开发者编写的代码会更多一些。</span><br><span class="line"># 使用：内部帮助我们提供了很多方便的组件，我们通过配置就可以完成相应操作，如：</span><br><span class="line">    &apos;序列化&apos;可以做用户请求数据校验+queryset对象的序列化称为json</span><br><span class="line">    &apos;解析器&apos;获取用户请求数据request.data，会自动根据content-type请求头的不能对数据进行解析</span><br><span class="line">    &apos;分页&apos;将从数据库获取到的数据在页面进行分页显示。</span><br><span class="line">     # 还有其他组件：</span><br><span class="line">         &apos;认证&apos;、&apos;权限&apos;、&apos;访问频率控制</span><br></pre></td></tr></table></figure><h3 id="52-django-rest-framework框架中都有那些组件？"><a href="#52-django-rest-framework框架中都有那些组件？" class="headerlink" title="52.django rest framework框架中都有那些组件？"></a>52.django rest framework框架中都有那些组件？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#- 路由，自动帮助开发者快速为一个视图创建4个url</span><br><span class="line">        www.oldboyedu.com/api/v1/student/$</span><br><span class="line">        www.oldboyedu.com/api/v1/student(?P&lt;format&gt;\w+)$</span><br><span class="line">        www.oldboyedu.com/api/v1/student/(?P&lt;pk&gt;\d+)/$</span><br><span class="line">        www.oldboyedu.com/api/v1/student/(?P&lt;pk&gt;\d+)(?P&lt;format&gt;\w+)$</span><br><span class="line">#- 版本处理</span><br><span class="line">    - 问题：版本都可以放在那里？</span><br><span class="line">            - url</span><br><span class="line">            - GET </span><br><span class="line">            - 请求头 </span><br><span class="line">#- 认证 </span><br><span class="line">    - 问题：认证流程？</span><br><span class="line">#- 权限 </span><br><span class="line">    - 权限是否可以放在中间件中？以及为什么？</span><br><span class="line">#- 访问频率的控制</span><br><span class="line">    匿名用户可以真正的防止？无法做到真正的访问频率控制，只能把小白拒之门外。</span><br><span class="line">    如果要封IP，使用防火墙来做。</span><br><span class="line">    登录用户可以通过用户名作为唯一标示进行控制，如果有人注册很多账号，则无法防止。</span><br><span class="line">#- 视图</span><br><span class="line">#- 解析器 ，根据Content-Type请求头对请求体中的数据格式进行处理。request.data </span><br><span class="line">#- 分页</span><br><span class="line">#- 序列化</span><br><span class="line">    - 序列化</span><br><span class="line">        - source</span><br><span class="line">        - 定义方法</span><br><span class="line">    - 请求数据格式校验</span><br><span class="line">#- 渲染器</span><br></pre></td></tr></table></figure><h3 id="53-django-rest-framework框架中的视图都可以继承哪些类"><a href="#53-django-rest-framework框架中的视图都可以继承哪些类" class="headerlink" title="53.django rest framework框架中的视图都可以继承哪些类"></a>53.django rest framework框架中的视图都可以继承哪些类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">a. 继承APIView（最原始）但定制性比较强</span><br><span class="line">    这个类属于rest framework中的顶层类，内部帮助我们实现了只是基本功能：认证、权限、频率控制，</span><br><span class="line">但凡是数据库、分页等操作都需要手动去完成，比较原始。</span><br><span class="line">    class GenericAPIView(APIView)</span><br><span class="line">    def post(...):</span><br><span class="line">          pass </span><br><span class="line"></span><br><span class="line">b.继承GenericViewSet（ViewSetMixin，generics.GenericAPIView）</span><br><span class="line">　　首先他的路由就发生变化</span><br><span class="line">    如果继承它之后，路由中的as_view需要填写对应关系</span><br><span class="line">　　在内部也帮助我们提供了一些方便的方法：</span><br><span class="line">　　get_queryset</span><br><span class="line">　　get_object</span><br><span class="line">　　get_serializer</span><br><span class="line">　　get_serializer_class</span><br><span class="line">　　get_serializer_context</span><br><span class="line">　　filter_queryset</span><br><span class="line">注意：要设置queryset字段，否则会抛出断言的异常。</span><br><span class="line"></span><br><span class="line">代码</span><br><span class="line">只提供增加功能 只继承GenericViewSet</span><br><span class="line"></span><br><span class="line">class TestView(GenericViewSet):</span><br><span class="line">　　serialazer_class = xxx</span><br><span class="line">　　def creat(self,*args,**kwargs):</span><br><span class="line">　　　　pass  # 获取数据并对数据</span><br><span class="line"></span><br><span class="line">c. 继承  modelviewset  --&gt; 快速快发</span><br><span class="line">　　　　-ModelViewSet(增删改查全有+数据库操作)</span><br><span class="line">　　　　-mixins.CreateModelMixin（只有增）,GenericViewSet</span><br><span class="line">　　　　-mixins.CreateModelMixin,DestroyModelMixin,GenericViewSet</span><br><span class="line">　　对数据库和分页等操作不用我们在编写，只需要继承相关类即可。</span><br><span class="line">　　</span><br><span class="line">示例：只提供增加功能</span><br><span class="line">class TestView(mixins.CreateModelMixin,GenericViewSet):</span><br><span class="line">　　　　serializer_class = XXXXXXX</span><br><span class="line">*** </span><br><span class="line">　　modelviewset --&gt; 快速开发，复杂点的genericview、apiview</span><br></pre></td></tr></table></figure><p><img src="https://images2018.cnblogs.com/blog/1258691/201806/1258691-20180604131035243-475790859.png" alt="img"></p><h3 id="54-简述-django-rest-framework框架的认证流程。"><a href="#54-简述-django-rest-framework框架的认证流程。" class="headerlink" title="54.简述 django rest framework框架的认证流程。"></a>54.简述 django rest framework框架的认证流程。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- 如何编写？写类并实现authenticators</span><br><span class="line">　　请求进来认证需要编写一个类，类里面有一个authenticators方法，我们可以自定义这个方法，可以定制3类返回值。</span><br><span class="line">　　成功返回元组，返回none为匿名用户，抛出异常为认证失败。</span><br><span class="line"></span><br><span class="line">源码流程：请求进来先走dispatch方法，然后封装的request对象会执行user方法，由user触发authenticators认证流程</span><br><span class="line">- 方法中可以定义三种返回值：</span><br><span class="line">    - （user,auth），认证成功</span><br><span class="line">    - None , 匿名用户</span><br><span class="line">    - 异常 ，认证失败</span><br><span class="line">- 流程：</span><br><span class="line">    - dispatch </span><br><span class="line">    - 再去request中进行认证处理</span><br></pre></td></tr></table></figure><h3 id="55-django-rest-framework如何实现的用户访问频率控制？"><a href="#55-django-rest-framework如何实现的用户访问频率控制？" class="headerlink" title="55.django rest framework如何实现的用户访问频率控制？"></a>55.django rest framework如何实现的用户访问频率控制？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 对匿名用户，根据用户IP或代理IP作为标识进行记录，为每个用户在redis中建一个列表</span><br><span class="line">    &#123;</span><br><span class="line">        throttle_1.1.1.1:[1526868876.497521,152686885.497521...]，</span><br><span class="line">        throttle_1.1.1.2:[1526868876.497521,152686885.497521...]，</span><br><span class="line">        throttle_1.1.1.3:[1526868876.497521,152686885.497521...]，</span><br><span class="line">    &#125; </span><br><span class="line"> 每个用户再来访问时，需先去记录中剔除过期记录，再根据列表的长度判断是否可以继续访问。</span><br><span class="line"> &apos;如何封IP&apos;：在防火墙中进行设置</span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line"># 对注册用户，根据用户名或邮箱进行判断。</span><br><span class="line">    &#123;</span><br><span class="line">        throttle_xxxx1:[1526868876.497521,152686885.497521...]，</span><br><span class="line">        throttle_xxxx2:[1526868876.497521,152686885.497521...]，</span><br><span class="line">        throttle_xxxx3:[1526868876.497521,152686885.497521...]，</span><br><span class="line">    &#125;</span><br><span class="line">每个用户再来访问时，需先去记录中剔除过期记录，再根据列表的长度判断是否可以继续访问。</span><br><span class="line">\如1分钟：40次，列表长度限制在40，超过40则不可访问</span><br></pre></td></tr></table></figure><h3 id="56-简述Django和Flask有什么区别？"><a href="#56-简述Django和Flask有什么区别？" class="headerlink" title="56.简述Django和Flask有什么区别？"></a>56.简述Django和Flask有什么区别？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">8.Django和Flask有什么区别？</span><br><span class="line"></span><br><span class="line">答案示例:</span><br><span class="line">Flask</span><br><span class="line">    ·轻量级web框架，默认依赖两个外部库：jinja2和Werkzeug WSGI工具</span><br><span class="line">    ·适用于做小型网站以及web服务的API，开发大型网站无压力，但架构需要自己设计</span><br><span class="line">    ·与关系型数据库的结合不弱于Django，而与非关系型数据库的结合远远优于Django</span><br><span class="line">Django</span><br><span class="line">    ·重量级web框架，功能齐全，提供一站式解决的思路，能让开发者不用在选择上花费大量时间。</span><br><span class="line">    ·自带ORM(Object-Relational Mapping 对象关系映射)和模板引擎，支持jinja等非官方模板引擎。</span><br><span class="line">    ·自带ORM使Django和关系型数据库耦合度高，如果要使用非关系型数据库，需要使用第三方库</span><br><span class="line">    ·自带数据库管理app</span><br><span class="line">    ·成熟，稳定，开发效率高，相对于Flask，Django的整体封闭性比较好，适合做企业级网站的开发。</span><br><span class="line">    ·python web框架的先驱，第三方库丰富</span><br></pre></td></tr></table></figure><h3 id="57-Django中想验证表单提交是否格式正确需要用到Form中的哪个函数？"><a href="#57-Django中想验证表单提交是否格式正确需要用到Form中的哪个函数？" class="headerlink" title="57.Django中想验证表单提交是否格式正确需要用到Form中的哪个函数？"></a>57.Django中想验证表单提交是否格式正确需要用到Form中的哪个函数？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">答案: is_valid()</span><br></pre></td></tr></table></figure><h3 id="58-Flask-WTF是什么，有什么特点？"><a href="#58-Flask-WTF是什么，有什么特点？" class="headerlink" title="58.Flask-WTF是什么，有什么特点？"></a>58.Flask-WTF是什么，有什么特点？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">答案: Flask-wtf是一个用于表单处理,校验并提供csrf验证的功能的扩展库 Flask-wtf能把正表单免受CSRF&lt;跨站请求伪造&gt;的攻击</span><br></pre></td></tr></table></figure><h3 id="59-基于django使用ajax发送post请求时，都可以使用哪种方法携带csrf-token？"><a href="#59-基于django使用ajax发送post请求时，都可以使用哪种方法携带csrf-token？" class="headerlink" title="59.基于django使用ajax发送post请求时，都可以使用哪种方法携带csrf token？"></a>59.基于django使用ajax发送post请求时，都可以使用哪种方法携带csrf token？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.后端将csrftoken传到前端，发送post请求时携带这个值发送</span><br><span class="line">data: &#123;</span><br><span class="line">        csrfmiddlewaretoken: &apos;&#123;&#123; csrf_token &#125;&#125;&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">2.获取form中隐藏标签的csrftoken值，加入到请求数据中传给后端</span><br><span class="line">data: &#123;</span><br><span class="line">          csrfmiddlewaretoken:$(&apos;[name=&quot;csrfmiddlewaretoken&quot;]&apos;).val()</span><br><span class="line">     &#125;,</span><br><span class="line">3.cookie中存在csrftoken,将csrftoken值放到请求头中</span><br><span class="line">headers:&#123; &quot;X-CSRFtoken&quot;:$.cookie(&quot;csrftoken&quot;)&#125;</span><br></pre></td></tr></table></figure><h3 id="60-列举django的orm的查询方法"><a href="#60-列举django的orm的查询方法" class="headerlink" title="60.列举django的orm的查询方法"></a>60.列举django的orm的查询方法</h3><p>外链：<a href="https://www.cnblogs.com/lpdeboke/p/11275714.html" target="_blank" rel="noopener">https://www.cnblogs.com/lpdeboke/p/11275714.html</a></p><h3 id="61-django如何连接多个数据库？"><a href="#61-django如何连接多个数据库？" class="headerlink" title="61.django如何连接多个数据库？"></a>61.django如何连接多个数据库？</h3><p>外链：<a href="https://www.jianshu.com/p/1d4442b683e6" target="_blank" rel="noopener">https://www.jianshu.com/p/1d4442b683e6</a></p><h3 id="62-django的ORM的懒加载是干嘛的？"><a href="#62-django的ORM的懒加载是干嘛的？" class="headerlink" title="62.django的ORM的懒加载是干嘛的？"></a>62.django的ORM的懒加载是干嘛的？</h3><p>外链：<a href="https://blog.csdn.net/orangleliu/article/details/57088557" target="_blank" rel="noopener">https://blog.csdn.net/orangleliu/article/details/57088557</a></p><h3 id="63-dj的selete-related、prefetch-related的作用？"><a href="#63-dj的selete-related、prefetch-related的作用？" class="headerlink" title="63.dj的selete_related、prefetch_related的作用？"></a>63.dj的selete_related、prefetch_related的作用？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">有外键存在时，可以很好的减少数据库请求的次数,提高性能</span><br><span class="line"></span><br><span class="line">select_related通过多表join关联查询,一次性获得所有数据,只执行一次SQL查询</span><br><span class="line"></span><br><span class="line">prefetch_related分别查询每个表,然后根据它们之间的关系进行处理,执行两次查询</span><br></pre></td></tr></table></figure><h3 id="64-描述Python-GIL的概念，-以及它对python多线程的影响？一个单线程抓取网页的程序，与一个多线程抓取网页的程序哪个性能更高，并解释原因"><a href="#64-描述Python-GIL的概念，-以及它对python多线程的影响？一个单线程抓取网页的程序，与一个多线程抓取网页的程序哪个性能更高，并解释原因" class="headerlink" title="64.描述Python GIL的概念， 以及它对python多线程的影响？一个单线程抓取网页的程序，与一个多线程抓取网页的程序哪个性能更高，并解释原因"></a>64.描述Python GIL的概念， 以及它对python多线程的影响？一个单线程抓取网页的程序，与一个多线程抓取网页的程序哪个性能更高，并解释原因</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.GIL，全局解释器锁(global interpreter lock)，它是cpython解析器的特性，不是python的特性 ，它要求线程在执行前，需要获取GIL锁，</span><br><span class="line"></span><br><span class="line">2.由于GIL的存在，会影响多线程不能利用多核CPU资源(原因是一个进程只存在一把gil锁，当在执行多个线程时，内部会争抢gil锁，这会造成当某一个线程没有抢到锁的时候会让cpu等待，进而不能合理利用多核cpu资源)，通过多进程方式可利用多个CPU资源</span><br><span class="line"></span><br><span class="line">3.线程释放GIL锁的情况：</span><br><span class="line">    1.在IO操作等可能会引起阻塞的system call之前,可以暂时释放GIL,但在执行完毕后,必须重新获取GIL</span><br><span class="line">    2.Python 3x使用计时器（执行时间达到阈值后，当前线程释放GIL）</span><br><span class="line"></span><br><span class="line">4.多线程爬取比单线程性能有提升，因为遇到IO阻塞会自动释放GIL锁，这样在线程阻塞情况下，可以执行其他线程中的代码</span><br></pre></td></tr></table></figure><h3 id="65-GIL"><a href="#65-GIL" class="headerlink" title="65.GIL"></a>65.GIL</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1.GIL是什么？</span><br><span class="line">GIL全称Global Interpreter Lock，即全局解释器锁。 作用就是，限制多线程同时执行，保证同一时间内只有一个线程在执行。</span><br><span class="line">GIL并不是Python的特性，它是在实现Python解析器(CPython)时所引入的一个概念。python 与 python解释器是两个概念，切不可混为一谈，也就是说，GIL只存在于使用C语言编写的解释器CPython中。</span><br><span class="line">通俗地说，就是如果你不用Python官方推荐的CPython解释器，而使用其他语言编写的Python解释器（比如  JPython: 运行在Java上的解释器，直接把python代码编译成Java字节码执行 ），就不会有GIL问题。然而因为CPython是大部分环境下默认的Python执行环境。所以在很多人的概念里CPython就是Python，也就想当然的把GIL归结为Python语言的缺陷。所以这里要先明确一点：GIL并不是Python的特性，Python完全可以不依赖于GIL。</span><br><span class="line"> </span><br><span class="line">2.GIL有什么作用？</span><br><span class="line">为了更有效的利用多核处理器的性能，就出现了多线程的编程方式，而随之带来的就是线程间数据的一致性和状态同步的完整性。  python为了利用多核，开始支持多线程，但线程是非独立的，所以同一进程里线程是数据共享，当各个线程访问数据资源时会出现竞状态，即数据可能会同时被多个线程占用，造成数据混乱，这就是线程的不安全。而解决多线程之间数据完整性和状态同步最简单的方式就是加锁。GIL能限制多线程同时执行，保证同一时间内只有一个线程在执行。</span><br><span class="line"> </span><br><span class="line">3.GIL有什么影响？</span><br><span class="line">GIL无疑就是一把全局排他锁。毫无疑问全局锁的存在会对多线程的效率有不小影响。甚至就几乎等于Python是个单线程的程序。</span><br><span class="line"> </span><br><span class="line">4.如何避免GIL带来的影响？</span><br><span class="line">方法一：用进程+协程 代替 多线程的方式</span><br><span class="line">在多进程中，由于每个进程都是独立的存在，所以每个进程内的线程都拥有独立的GIL锁，互不影响。但是，由于进程之间是独立的存在，所以进程间通信就需要通过队列的方式来实现。</span><br><span class="line"> </span><br><span class="line">方法二：更换解释器</span><br><span class="line">像JPython和IronPython这样的解析器由于实现语言的特性，他们不需要GIL的帮助。然而由于用了Java/C#用于解析器实现，他们也失去了利用社区众多C语言模块有用特性的机会。所以这些解析器也因此一直都比较小众。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-简述http协议以及常用的请求头&quot;&gt;&lt;a href=&quot;#1-简述http协议以及常用的请求头&quot; class=&quot;headerlink&quot; title=&quot;1.简述http协议以及常用的请求头&quot;&gt;&lt;/a&gt;1.简述http协议以及常用的请求头&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;User-Agent：标识浏览器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content_Type：用来标记请求体的数据的格式，服务端根据这个对数据进行解析&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Accept：指定客户端能够接收的内容类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Accept-Encoding:指定浏览器可以支持的web服务器返回内容压缩编码类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Accept-Language:浏览器可接受的语言&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content-Length:请求的内容长度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Date：请求发送的日期和时间&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;2-列举常见请求方法：&quot;&gt;&lt;a href=&quot;#2-列举常见请求方法：&quot; class=&quot;headerlink&quot; title=&quot;2.列举常见请求方法：&quot;&gt;&lt;/a&gt;2.列举常见请求方法：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GET&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;POST&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;3-列举常见的状态码&quot;&gt;&lt;a href=&quot;#3-列举常见的状态码&quot; class=&quot;headerlink&quot; title=&quot;3.列举常见的状态码&quot;&gt;&lt;/a&gt;3.列举常见的状态码&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;200：请求成功&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;301：永久重定向&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;302：临时重定向&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;403：没有通过跨站请求伪造&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;404：请求的页面不存在&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;500：服务器错误&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;4-简述websocket协议及实现原理&quot;&gt;&lt;a href=&quot;#4-简述websocket协议及实现原理&quot; class=&quot;headerlink&quot; title=&quot;4.简述websocket协议及实现原理&quot;&gt;&lt;/a&gt;4.简述websocket协议及实现原理&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;协议：WebSocket 是一种标准协议，用于在客户端和服务端之间进行双向数据传输。但它跟 HTTP 没什么关系，它是基于 TCP 的一种独立实现。用来弥补http协议在持久通信能力上的不足。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;原理：WebSocket是HTML5下一种新的协议。它实现了浏览器与服务器全双工通信，能更好的节省服务器资源和带宽并达到实时通讯的目的。它与HTTP一样通过已建立的TCP连接来传输数据，但是它和HTTP最大不同是：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WebSocket是一种双向通信协议。在建立连接后，WebSocket服务器端和客户端都能主动向对方发送或接收数据，就像Socket一样；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WebSocket需要像TCP一样，先建立连接，连接成功后才能相互通信。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;相比HTTP长连接，WebSocket有以下特点：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1，是真正的全双工方式，建立连接后客户端与服务器端是完全平等的，可以互相主动请求。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2，Websocket协议通过第一个request建立了TCP连接之后，之后交换的数据都不需要发送 HTTP header就能交换数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3，此外还有 multiplexing、不同的URL可以复用同一个WebSocket连接等功能&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Wesocket协议的优点：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Websocket协议一旦建立后，互相沟通所消耗的请求头是很小的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;服务端可以向客户端推送消息了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Wesocket协议的缺点：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;少部分浏览器不支持，浏览器支持的成都与方式有区别&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Wesocket协议的应用场景：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;即时聊天通信&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;多玩家游戏&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在线协同编辑&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;实时数据流的拉取与推送&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;体育实况&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;实时地图位置&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;5-Python-web开发中，跨域问题的解决思路是什么&quot;&gt;&lt;a href=&quot;#5-Python-web开发中，跨域问题的解决思路是什么&quot; class=&quot;headerlink&quot; title=&quot;5.Python web开发中，跨域问题的解决思路是什么&quot;&gt;&lt;/a&gt;5.Python web开发中，跨域问题的解决思路是什么&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;首先，什么是跨域？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;同源策略/SOP（Same origin policy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SOP要求两个通讯地址的协议、域名、端口号必须相同，否则两个地址的通讯将被浏览器视为不安全的，并被block下来。比如“http页面”和“https页面”属于不同协议；“qq.com”、“www.qq.com”、“a.qq.com”都属于不同域名（或主机）；“a.com”和“a.com:8000”属于不同端口号。这三种情况常规都是无法直接进行通讯的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解决办法：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;目前业界流行的解决方案有三种：服务器代理、JSONP、CORS（不展开）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;6-简述http的缓存机制&quot;&gt;&lt;a href=&quot;#6-简述http的缓存机制&quot; class=&quot;headerlink&quot; title=&quot;6.简述http的缓存机制&quot;&gt;&lt;/a&gt;6.简述http的缓存机制&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;HTTP的缓存可以分为两大类：强制缓存和协商缓存。强制缓存的优先级高于比较缓存。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;强制缓存（状态码200）：服务端通知浏览器一个缓存时间，在缓存期间内，下次请求，直接使用浏览器中缓存的数据，不在时间内，执行比较缓存策略。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;比较缓存（状态码：304）：对于 比较缓存而言，将缓存信息中的Etag（浏览器当前资源在服务器的唯一标识）和Last-Modified（浏览器资源的最后修改时间）通过请求发送给服务器，由服务器校验，比较成功，返回304状态，浏览器直接使用缓存。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;http://9017499461.linshutu.top/Http%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6.webp&quot; alt&gt;&lt;/p&gt;
&lt;h3 id=&quot;7-谈谈你知道的python-web框架：&quot;&gt;&lt;a href=&quot;#7-谈谈你知道的python-web框架：&quot; class=&quot;headerlink&quot; title=&quot;7.谈谈你知道的python web框架：&quot;&gt;&lt;/a&gt;7.谈谈你知道的python web框架：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Django&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flask&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Tornado&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Twisted&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;8-django中model的SulgFiled类型字段有什么用途&quot;&gt;&lt;a href=&quot;#8-django中model的SulgFiled类型字段有什么用途&quot; class=&quot;headerlink&quot; title=&quot;8.django中model的SulgFiled类型字段有什么用途&quot;&gt;&lt;/a&gt;8.django中model的SulgFiled类型字段有什么用途&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;slug是一个新闻行业的术语。一个slug就是一个某种东西的简短标签，包含字母、数字、下划线或者连接线，通常用于URLs中。可以设置max_length参数，默认为50。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;9-django常见的线上部署方式有哪几种&quot;&gt;&lt;a href=&quot;#9-django常见的线上部署方式有哪几种&quot; class=&quot;headerlink&quot; title=&quot;9.django常见的线上部署方式有哪几种&quot;&gt;&lt;/a&gt;9.django常见的线上部署方式有哪几种&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Nginx+uwsgi+Django+mysql（目前我用到的）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;10-django中使用memcached作为缓存的具体方法？优缺点说明？&quot;&gt;&lt;a href=&quot;#10-django中使用memcached作为缓存的具体方法？优缺点说明？&quot; class=&quot;headerlink&quot; title=&quot;10.django中使用memcached作为缓存的具体方法？优缺点说明？&quot;&gt;&lt;/a&gt;10.django中使用memcached作为缓存的具体方法？优缺点说明？&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1，settings.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CACHES = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;apos;default&amp;apos;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;apos;BACKEND&amp;apos;: &amp;apos;django.core.cache.backends.memcached.MemcachedCache&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;apos;LOCATION&amp;apos;: &amp;apos;127.0.0.1:11211&amp;apos;, #多个使用列表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2，views.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;from django.http import  HttpResponse&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 使用cache来操作memcached&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;from django.core.cache import cache&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Create your views here.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def index(request):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cache.set(&amp;apos;username&amp;apos;,&amp;apos;zhiliao&amp;apos;,12000)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    username = cache.get(&amp;apos;username&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(username)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return HttpResponse(&amp;apos;index&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我认为：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;优点：对于一些访问量高的文件放在缓存中，可以提高访问的效率&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;缺点：缓存的缺点即使数据断电丢失，这点memcached没有好的办法处理&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;memcached的具体操作：&lt;a href=&quot;https://blog.csdn.net/xujin0/article/details/84311862&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/xujin0/article/details/84311862&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="小绿本" scheme="https://pl1649947109.github.io/pl1649947109/tags/%E5%B0%8F%E7%BB%BF%E6%9C%AC/"/>
    
  </entry>
  
</feed>
